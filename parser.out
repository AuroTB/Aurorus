Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> MAIN_PROGRAM
Rule 1     empty -> <empty>
Rule 2     MAIN_PROGRAM -> STRUCTURES
Rule 3     STRUCTURES -> FOR_LOOP STRUCTURES
Rule 4     STRUCTURES -> DO_WHILE_LOOP STRUCTURES
Rule 5     STRUCTURES -> WHILE_LOOP STRUCTURES
Rule 6     STRUCTURES -> ELSE_CONDITIONAL STRUCTURES
Rule 7     STRUCTURES -> IF_CONDITIONAL STRUCTURES
Rule 8     STRUCTURES -> OUTPUT STRUCTURES
Rule 9     STRUCTURES -> INPUT STRUCTURES
Rule 10    STRUCTURES -> VAR STRUCTURES
Rule 11    STRUCTURES -> FUNCTION STRUCTURES
Rule 12    STRUCTURES -> FUNC_CALL STRUCTURES
Rule 13    STRUCTURES -> empty
Rule 14    VAR -> ID COMMA VAR
Rule 15    VAR -> MATRIX_VAL COMMA VAR
Rule 16    VAR -> ID IS_VALUE EXP
Rule 17    VAR -> MATRIX_VAL IS_VALUE EXP
Rule 18    INPUT -> ID COMMA INPUT
Rule 19    INPUT -> MATRIX_VAL COMMA INPUT
Rule 20    INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
Rule 21    INPUT -> MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
Rule 22    OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
Rule 23    IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
Rule 24    IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
Rule 25    ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
Rule 26    WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
Rule 27    DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
Rule 28    FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
Rule 29    FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
Rule 30    NON_FUNCTION -> FOR_LOOP NON_FUNCTION
Rule 31    NON_FUNCTION -> DO_WHILE_LOOP NON_FUNCTION
Rule 32    NON_FUNCTION -> WHILE_LOOP NON_FUNCTION
Rule 33    NON_FUNCTION -> ELSE_CONDITIONAL NON_FUNCTION
Rule 34    NON_FUNCTION -> IF_CONDITIONAL NON_FUNCTION
Rule 35    NON_FUNCTION -> OUTPUT NON_FUNCTION
Rule 36    NON_FUNCTION -> INPUT NON_FUNCTION
Rule 37    NON_FUNCTION -> VAR NON_FUNCTION
Rule 38    NON_FUNCTION -> FUNC_CALL NON_FUNCTION
Rule 39    NON_FUNCTION -> empty
Rule 40    FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
Rule 41    EXP -> VALUE
Rule 42    VALUE -> EARITH
Rule 43    VALUE -> ELOGIC
Rule 44    VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
Rule 45    VALUE -> VAL
Rule 46    VALUE -> ID
Rule 47    VALUE -> MATRIX_VAL
Rule 48    VALUE -> STRING
Rule 49    VALUE -> MATRIX
Rule 50    VALUE -> SEQUENCE
Rule 51    EARITH -> VALUE MULOP VALUE
Rule 52    EARITH -> VALUE DIVOP VALUE
Rule 53    EARITH -> VALUE SUMOP VALUE
Rule 54    EARITH -> VALUE SUBOP VALUE
Rule 55    ELOGIC -> VALUE EQ VALUE
Rule 56    ELOGIC -> VALUE NE VALUE
Rule 57    ELOGIC -> VALUE LT VALUE
Rule 58    ELOGIC -> VALUE GT VALUE
Rule 59    ELOGIC -> VALUE LE VALUE
Rule 60    ELOGIC -> VALUE GE VALUE
Rule 61    ELOGIC -> VALUE AND VALUE
Rule 62    ELOGIC -> VALUE OR VALUE

Terminals, with rules where they appear

AND                  : 61
CLOSE_BRACES         : 23 24 25 26 27 28 29
CLOSE_PARENTHESIS    : 20 21 22 23 24 26 27 28 29 40 44
COMMA                : 14 15 18 19
DIVOP                : 52
DO                   : 27
ELSE                 : 25
EQ                   : 55
FOR                  : 28
FUNC                 : 29
GE                   : 60
GT                   : 58
ID                   : 14 16 18 20 29 40 46
IF                   : 23 24
IS_VALUE             : 16 17 20 21
LE                   : 59
LT                   : 57
MATRIX               : 49
MATRIX_VAL           : 15 17 19 21 47
MULOP                : 51
NE                   : 56
OPEN_BRACES          : 23 24 25 26 27 28 29
OPEN_PARENTHESIS     : 20 21 22 23 24 26 27 28 29 40 44
OR                   : 62
PRINT                : 22
READ                 : 20 21
SEQUENCE             : 28 50
STRING               : 48
SUBOP                : 54
SUMOP                : 53
VAL                  : 45
WHILE                : 26 27
error                : 

Nonterminals, with rules where they appear

DO_WHILE_LOOP        : 4 31
EARITH               : 42
ELOGIC               : 43
ELSE_CONDITIONAL     : 6 23 33
EXP                  : 16 17 22 23 24 26 27
FOR_LOOP             : 3 30
FUNCTION             : 11
FUNC_CALL            : 12 38
IF_CONDITIONAL       : 7 34
INPUT                : 9 18 19 36
MAIN_PROGRAM         : 0
NON_FUNCTION         : 29 30 31 32 33 34 35 36 37 38
OUTPUT               : 8 35
STRUCTURES           : 2 3 4 5 6 7 8 9 10 11 12 23 24 25 26 27 28
VALUE                : 41 44 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62
VAR                  : 10 14 15 37
WHILE_LOOP           : 5 32
empty                : 13 39

Parsing method: LALR

state 0

    (0) S' -> . MAIN_PROGRAM
    (2) MAIN_PROGRAM -> . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (29) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    FUNC            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)

    MAIN_PROGRAM                   shift and go to state 1
    STRUCTURES                     shift and go to state 2
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 1

    (0) S' -> MAIN_PROGRAM .



state 2

    (2) MAIN_PROGRAM -> STRUCTURES .

    $end            reduce using rule 2 (MAIN_PROGRAM -> STRUCTURES .)


state 3

    (3) STRUCTURES -> FOR_LOOP . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (29) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    FUNC            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    FOR_LOOP                       shift and go to state 3
    STRUCTURES                     shift and go to state 23
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 4

    (4) STRUCTURES -> DO_WHILE_LOOP . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (29) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    FUNC            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    DO_WHILE_LOOP                  shift and go to state 4
    STRUCTURES                     shift and go to state 24
    FOR_LOOP                       shift and go to state 3
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 5

    (5) STRUCTURES -> WHILE_LOOP . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (29) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    FUNC            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    WHILE_LOOP                     shift and go to state 5
    STRUCTURES                     shift and go to state 25
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 6

    (6) STRUCTURES -> ELSE_CONDITIONAL . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (29) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    FUNC            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    ELSE_CONDITIONAL               shift and go to state 6
    STRUCTURES                     shift and go to state 26
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 7

    (7) STRUCTURES -> IF_CONDITIONAL . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (29) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    FUNC            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    IF_CONDITIONAL                 shift and go to state 7
    STRUCTURES                     shift and go to state 27
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 8

    (8) STRUCTURES -> OUTPUT . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (29) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    FUNC            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    OUTPUT                         shift and go to state 8
    STRUCTURES                     shift and go to state 28
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 9

    (9) STRUCTURES -> INPUT . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (29) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    FUNC            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    INPUT                          shift and go to state 9
    STRUCTURES                     shift and go to state 29
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 10

    (10) STRUCTURES -> VAR . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (29) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    FUNC            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    VAR                            shift and go to state 10
    STRUCTURES                     shift and go to state 30
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 11

    (11) STRUCTURES -> FUNCTION . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (29) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    FUNC            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    FUNCTION                       shift and go to state 11
    STRUCTURES                     shift and go to state 31
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 12

    (12) STRUCTURES -> FUNC_CALL . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (29) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    FUNC            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    FUNC_CALL                      shift and go to state 12
    STRUCTURES                     shift and go to state 32
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    empty                          shift and go to state 13

state 13

    (13) STRUCTURES -> empty .

    $end            reduce using rule 13 (STRUCTURES -> empty .)
    CLOSE_BRACES    reduce using rule 13 (STRUCTURES -> empty .)


state 14

    (28) FOR_LOOP -> FOR . OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_PARENTHESIS shift and go to state 33


state 15

    (27) DO_WHILE_LOOP -> DO . OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS

    OPEN_BRACES     shift and go to state 34


state 16

    (26) WHILE_LOOP -> WHILE . OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_PARENTHESIS shift and go to state 35


state 17

    (25) ELSE_CONDITIONAL -> ELSE . OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_BRACES     shift and go to state 36


state 18

    (23) IF_CONDITIONAL -> IF . OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> IF . OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_PARENTHESIS shift and go to state 37


state 19

    (22) OUTPUT -> PRINT . OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 38


state 20

    (18) INPUT -> ID . COMMA INPUT
    (20) INPUT -> ID . IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> ID . COMMA VAR
    (16) VAR -> ID . IS_VALUE EXP
    (40) FUNC_CALL -> ID . OPEN_PARENTHESIS CLOSE_PARENTHESIS

    COMMA           shift and go to state 39
    IS_VALUE        shift and go to state 40
    OPEN_PARENTHESIS shift and go to state 41


state 21

    (19) INPUT -> MATRIX_VAL . COMMA INPUT
    (21) INPUT -> MATRIX_VAL . IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (15) VAR -> MATRIX_VAL . COMMA VAR
    (17) VAR -> MATRIX_VAL . IS_VALUE EXP

    COMMA           shift and go to state 42
    IS_VALUE        shift and go to state 43


state 22

    (29) FUNCTION -> FUNC . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES

    ID              shift and go to state 44


state 23

    (3) STRUCTURES -> FOR_LOOP STRUCTURES .

    $end            reduce using rule 3 (STRUCTURES -> FOR_LOOP STRUCTURES .)
    CLOSE_BRACES    reduce using rule 3 (STRUCTURES -> FOR_LOOP STRUCTURES .)


state 24

    (4) STRUCTURES -> DO_WHILE_LOOP STRUCTURES .

    $end            reduce using rule 4 (STRUCTURES -> DO_WHILE_LOOP STRUCTURES .)
    CLOSE_BRACES    reduce using rule 4 (STRUCTURES -> DO_WHILE_LOOP STRUCTURES .)


state 25

    (5) STRUCTURES -> WHILE_LOOP STRUCTURES .

    $end            reduce using rule 5 (STRUCTURES -> WHILE_LOOP STRUCTURES .)
    CLOSE_BRACES    reduce using rule 5 (STRUCTURES -> WHILE_LOOP STRUCTURES .)


state 26

    (6) STRUCTURES -> ELSE_CONDITIONAL STRUCTURES .

    $end            reduce using rule 6 (STRUCTURES -> ELSE_CONDITIONAL STRUCTURES .)
    CLOSE_BRACES    reduce using rule 6 (STRUCTURES -> ELSE_CONDITIONAL STRUCTURES .)


state 27

    (7) STRUCTURES -> IF_CONDITIONAL STRUCTURES .

    $end            reduce using rule 7 (STRUCTURES -> IF_CONDITIONAL STRUCTURES .)
    CLOSE_BRACES    reduce using rule 7 (STRUCTURES -> IF_CONDITIONAL STRUCTURES .)


state 28

    (8) STRUCTURES -> OUTPUT STRUCTURES .

    $end            reduce using rule 8 (STRUCTURES -> OUTPUT STRUCTURES .)
    CLOSE_BRACES    reduce using rule 8 (STRUCTURES -> OUTPUT STRUCTURES .)


state 29

    (9) STRUCTURES -> INPUT STRUCTURES .

    $end            reduce using rule 9 (STRUCTURES -> INPUT STRUCTURES .)
    CLOSE_BRACES    reduce using rule 9 (STRUCTURES -> INPUT STRUCTURES .)


state 30

    (10) STRUCTURES -> VAR STRUCTURES .

    $end            reduce using rule 10 (STRUCTURES -> VAR STRUCTURES .)
    CLOSE_BRACES    reduce using rule 10 (STRUCTURES -> VAR STRUCTURES .)


state 31

    (11) STRUCTURES -> FUNCTION STRUCTURES .

    $end            reduce using rule 11 (STRUCTURES -> FUNCTION STRUCTURES .)
    CLOSE_BRACES    reduce using rule 11 (STRUCTURES -> FUNCTION STRUCTURES .)


state 32

    (12) STRUCTURES -> FUNC_CALL STRUCTURES .

    $end            reduce using rule 12 (STRUCTURES -> FUNC_CALL STRUCTURES .)
    CLOSE_BRACES    reduce using rule 12 (STRUCTURES -> FUNC_CALL STRUCTURES .)


state 33

    (28) FOR_LOOP -> FOR OPEN_PARENTHESIS . SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    SEQUENCE        shift and go to state 45


state 34

    (27) DO_WHILE_LOOP -> DO OPEN_BRACES . STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (29) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    FUNC            shift and go to state 22
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    STRUCTURES                     shift and go to state 46
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 35

    (26) WHILE_LOOP -> WHILE OPEN_PARENTHESIS . EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (41) EXP -> . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    EXP                            shift and go to state 48
    VALUE                          shift and go to state 49
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 36

    (25) ELSE_CONDITIONAL -> ELSE OPEN_BRACES . STRUCTURES CLOSE_BRACES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (29) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    FUNC            shift and go to state 22
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    STRUCTURES                     shift and go to state 58
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 37

    (23) IF_CONDITIONAL -> IF OPEN_PARENTHESIS . EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> IF OPEN_PARENTHESIS . EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (41) EXP -> . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    EXP                            shift and go to state 59
    VALUE                          shift and go to state 49
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 38

    (22) OUTPUT -> PRINT OPEN_PARENTHESIS . EXP CLOSE_PARENTHESIS
    (41) EXP -> . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    EXP                            shift and go to state 60
    VALUE                          shift and go to state 49
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 39

    (18) INPUT -> ID COMMA . INPUT
    (14) VAR -> ID COMMA . VAR
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP

    ID              shift and go to state 61
    MATRIX_VAL      shift and go to state 21

    INPUT                          shift and go to state 62
    VAR                            shift and go to state 63

state 40

    (20) INPUT -> ID IS_VALUE . READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (16) VAR -> ID IS_VALUE . EXP
    (41) EXP -> . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    READ            shift and go to state 64
    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    EXP                            shift and go to state 65
    VALUE                          shift and go to state 49
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 41

    (40) FUNC_CALL -> ID OPEN_PARENTHESIS . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 66


state 42

    (19) INPUT -> MATRIX_VAL COMMA . INPUT
    (15) VAR -> MATRIX_VAL COMMA . VAR
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP

    ID              shift and go to state 61
    MATRIX_VAL      shift and go to state 21

    INPUT                          shift and go to state 67
    VAR                            shift and go to state 68

state 43

    (21) INPUT -> MATRIX_VAL IS_VALUE . READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (17) VAR -> MATRIX_VAL IS_VALUE . EXP
    (41) EXP -> . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    READ            shift and go to state 69
    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    EXP                            shift and go to state 70
    VALUE                          shift and go to state 49
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 44

    (29) FUNCTION -> FUNC ID . OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES

    OPEN_PARENTHESIS shift and go to state 71


state 45

    (28) FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE . CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    CLOSE_PARENTHESIS shift and go to state 72


state 46

    (27) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES . CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS

    CLOSE_BRACES    shift and go to state 73


state 47

    (44) VALUE -> OPEN_PARENTHESIS . VALUE CLOSE_PARENTHESIS
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    VALUE                          shift and go to state 74
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 48

    (26) WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP . CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    CLOSE_PARENTHESIS shift and go to state 75


state 49

    (41) EXP -> VALUE .
    (51) EARITH -> VALUE . MULOP VALUE
    (52) EARITH -> VALUE . DIVOP VALUE
    (53) EARITH -> VALUE . SUMOP VALUE
    (54) EARITH -> VALUE . SUBOP VALUE
    (55) ELOGIC -> VALUE . EQ VALUE
    (56) ELOGIC -> VALUE . NE VALUE
    (57) ELOGIC -> VALUE . LT VALUE
    (58) ELOGIC -> VALUE . GT VALUE
    (59) ELOGIC -> VALUE . LE VALUE
    (60) ELOGIC -> VALUE . GE VALUE
    (61) ELOGIC -> VALUE . AND VALUE
    (62) ELOGIC -> VALUE . OR VALUE

    CLOSE_PARENTHESIS reduce using rule 41 (EXP -> VALUE .)
    FOR             reduce using rule 41 (EXP -> VALUE .)
    DO              reduce using rule 41 (EXP -> VALUE .)
    WHILE           reduce using rule 41 (EXP -> VALUE .)
    ELSE            reduce using rule 41 (EXP -> VALUE .)
    IF              reduce using rule 41 (EXP -> VALUE .)
    PRINT           reduce using rule 41 (EXP -> VALUE .)
    ID              reduce using rule 41 (EXP -> VALUE .)
    MATRIX_VAL      reduce using rule 41 (EXP -> VALUE .)
    FUNC            reduce using rule 41 (EXP -> VALUE .)
    $end            reduce using rule 41 (EXP -> VALUE .)
    CLOSE_BRACES    reduce using rule 41 (EXP -> VALUE .)
    MULOP           shift and go to state 76
    DIVOP           shift and go to state 77
    SUMOP           shift and go to state 78
    SUBOP           shift and go to state 79
    EQ              shift and go to state 80
    NE              shift and go to state 81
    LT              shift and go to state 82
    GT              shift and go to state 83
    LE              shift and go to state 84
    GE              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 50

    (42) VALUE -> EARITH .

    MULOP           reduce using rule 42 (VALUE -> EARITH .)
    DIVOP           reduce using rule 42 (VALUE -> EARITH .)
    SUMOP           reduce using rule 42 (VALUE -> EARITH .)
    SUBOP           reduce using rule 42 (VALUE -> EARITH .)
    EQ              reduce using rule 42 (VALUE -> EARITH .)
    NE              reduce using rule 42 (VALUE -> EARITH .)
    LT              reduce using rule 42 (VALUE -> EARITH .)
    GT              reduce using rule 42 (VALUE -> EARITH .)
    LE              reduce using rule 42 (VALUE -> EARITH .)
    GE              reduce using rule 42 (VALUE -> EARITH .)
    AND             reduce using rule 42 (VALUE -> EARITH .)
    OR              reduce using rule 42 (VALUE -> EARITH .)
    CLOSE_PARENTHESIS reduce using rule 42 (VALUE -> EARITH .)
    FOR             reduce using rule 42 (VALUE -> EARITH .)
    DO              reduce using rule 42 (VALUE -> EARITH .)
    WHILE           reduce using rule 42 (VALUE -> EARITH .)
    ELSE            reduce using rule 42 (VALUE -> EARITH .)
    IF              reduce using rule 42 (VALUE -> EARITH .)
    PRINT           reduce using rule 42 (VALUE -> EARITH .)
    ID              reduce using rule 42 (VALUE -> EARITH .)
    MATRIX_VAL      reduce using rule 42 (VALUE -> EARITH .)
    FUNC            reduce using rule 42 (VALUE -> EARITH .)
    $end            reduce using rule 42 (VALUE -> EARITH .)
    CLOSE_BRACES    reduce using rule 42 (VALUE -> EARITH .)


state 51

    (43) VALUE -> ELOGIC .

    MULOP           reduce using rule 43 (VALUE -> ELOGIC .)
    DIVOP           reduce using rule 43 (VALUE -> ELOGIC .)
    SUMOP           reduce using rule 43 (VALUE -> ELOGIC .)
    SUBOP           reduce using rule 43 (VALUE -> ELOGIC .)
    EQ              reduce using rule 43 (VALUE -> ELOGIC .)
    NE              reduce using rule 43 (VALUE -> ELOGIC .)
    LT              reduce using rule 43 (VALUE -> ELOGIC .)
    GT              reduce using rule 43 (VALUE -> ELOGIC .)
    LE              reduce using rule 43 (VALUE -> ELOGIC .)
    GE              reduce using rule 43 (VALUE -> ELOGIC .)
    AND             reduce using rule 43 (VALUE -> ELOGIC .)
    OR              reduce using rule 43 (VALUE -> ELOGIC .)
    CLOSE_PARENTHESIS reduce using rule 43 (VALUE -> ELOGIC .)
    FOR             reduce using rule 43 (VALUE -> ELOGIC .)
    DO              reduce using rule 43 (VALUE -> ELOGIC .)
    WHILE           reduce using rule 43 (VALUE -> ELOGIC .)
    ELSE            reduce using rule 43 (VALUE -> ELOGIC .)
    IF              reduce using rule 43 (VALUE -> ELOGIC .)
    PRINT           reduce using rule 43 (VALUE -> ELOGIC .)
    ID              reduce using rule 43 (VALUE -> ELOGIC .)
    MATRIX_VAL      reduce using rule 43 (VALUE -> ELOGIC .)
    FUNC            reduce using rule 43 (VALUE -> ELOGIC .)
    $end            reduce using rule 43 (VALUE -> ELOGIC .)
    CLOSE_BRACES    reduce using rule 43 (VALUE -> ELOGIC .)


state 52

    (45) VALUE -> VAL .

    MULOP           reduce using rule 45 (VALUE -> VAL .)
    DIVOP           reduce using rule 45 (VALUE -> VAL .)
    SUMOP           reduce using rule 45 (VALUE -> VAL .)
    SUBOP           reduce using rule 45 (VALUE -> VAL .)
    EQ              reduce using rule 45 (VALUE -> VAL .)
    NE              reduce using rule 45 (VALUE -> VAL .)
    LT              reduce using rule 45 (VALUE -> VAL .)
    GT              reduce using rule 45 (VALUE -> VAL .)
    LE              reduce using rule 45 (VALUE -> VAL .)
    GE              reduce using rule 45 (VALUE -> VAL .)
    AND             reduce using rule 45 (VALUE -> VAL .)
    OR              reduce using rule 45 (VALUE -> VAL .)
    CLOSE_PARENTHESIS reduce using rule 45 (VALUE -> VAL .)
    FOR             reduce using rule 45 (VALUE -> VAL .)
    DO              reduce using rule 45 (VALUE -> VAL .)
    WHILE           reduce using rule 45 (VALUE -> VAL .)
    ELSE            reduce using rule 45 (VALUE -> VAL .)
    IF              reduce using rule 45 (VALUE -> VAL .)
    PRINT           reduce using rule 45 (VALUE -> VAL .)
    ID              reduce using rule 45 (VALUE -> VAL .)
    MATRIX_VAL      reduce using rule 45 (VALUE -> VAL .)
    FUNC            reduce using rule 45 (VALUE -> VAL .)
    $end            reduce using rule 45 (VALUE -> VAL .)
    CLOSE_BRACES    reduce using rule 45 (VALUE -> VAL .)


state 53

    (46) VALUE -> ID .

    MULOP           reduce using rule 46 (VALUE -> ID .)
    DIVOP           reduce using rule 46 (VALUE -> ID .)
    SUMOP           reduce using rule 46 (VALUE -> ID .)
    SUBOP           reduce using rule 46 (VALUE -> ID .)
    EQ              reduce using rule 46 (VALUE -> ID .)
    NE              reduce using rule 46 (VALUE -> ID .)
    LT              reduce using rule 46 (VALUE -> ID .)
    GT              reduce using rule 46 (VALUE -> ID .)
    LE              reduce using rule 46 (VALUE -> ID .)
    GE              reduce using rule 46 (VALUE -> ID .)
    AND             reduce using rule 46 (VALUE -> ID .)
    OR              reduce using rule 46 (VALUE -> ID .)
    CLOSE_PARENTHESIS reduce using rule 46 (VALUE -> ID .)
    FOR             reduce using rule 46 (VALUE -> ID .)
    DO              reduce using rule 46 (VALUE -> ID .)
    WHILE           reduce using rule 46 (VALUE -> ID .)
    ELSE            reduce using rule 46 (VALUE -> ID .)
    IF              reduce using rule 46 (VALUE -> ID .)
    PRINT           reduce using rule 46 (VALUE -> ID .)
    ID              reduce using rule 46 (VALUE -> ID .)
    MATRIX_VAL      reduce using rule 46 (VALUE -> ID .)
    FUNC            reduce using rule 46 (VALUE -> ID .)
    $end            reduce using rule 46 (VALUE -> ID .)
    CLOSE_BRACES    reduce using rule 46 (VALUE -> ID .)


state 54

    (47) VALUE -> MATRIX_VAL .

    MULOP           reduce using rule 47 (VALUE -> MATRIX_VAL .)
    DIVOP           reduce using rule 47 (VALUE -> MATRIX_VAL .)
    SUMOP           reduce using rule 47 (VALUE -> MATRIX_VAL .)
    SUBOP           reduce using rule 47 (VALUE -> MATRIX_VAL .)
    EQ              reduce using rule 47 (VALUE -> MATRIX_VAL .)
    NE              reduce using rule 47 (VALUE -> MATRIX_VAL .)
    LT              reduce using rule 47 (VALUE -> MATRIX_VAL .)
    GT              reduce using rule 47 (VALUE -> MATRIX_VAL .)
    LE              reduce using rule 47 (VALUE -> MATRIX_VAL .)
    GE              reduce using rule 47 (VALUE -> MATRIX_VAL .)
    AND             reduce using rule 47 (VALUE -> MATRIX_VAL .)
    OR              reduce using rule 47 (VALUE -> MATRIX_VAL .)
    CLOSE_PARENTHESIS reduce using rule 47 (VALUE -> MATRIX_VAL .)
    FOR             reduce using rule 47 (VALUE -> MATRIX_VAL .)
    DO              reduce using rule 47 (VALUE -> MATRIX_VAL .)
    WHILE           reduce using rule 47 (VALUE -> MATRIX_VAL .)
    ELSE            reduce using rule 47 (VALUE -> MATRIX_VAL .)
    IF              reduce using rule 47 (VALUE -> MATRIX_VAL .)
    PRINT           reduce using rule 47 (VALUE -> MATRIX_VAL .)
    ID              reduce using rule 47 (VALUE -> MATRIX_VAL .)
    MATRIX_VAL      reduce using rule 47 (VALUE -> MATRIX_VAL .)
    FUNC            reduce using rule 47 (VALUE -> MATRIX_VAL .)
    $end            reduce using rule 47 (VALUE -> MATRIX_VAL .)
    CLOSE_BRACES    reduce using rule 47 (VALUE -> MATRIX_VAL .)


state 55

    (48) VALUE -> STRING .

    MULOP           reduce using rule 48 (VALUE -> STRING .)
    DIVOP           reduce using rule 48 (VALUE -> STRING .)
    SUMOP           reduce using rule 48 (VALUE -> STRING .)
    SUBOP           reduce using rule 48 (VALUE -> STRING .)
    EQ              reduce using rule 48 (VALUE -> STRING .)
    NE              reduce using rule 48 (VALUE -> STRING .)
    LT              reduce using rule 48 (VALUE -> STRING .)
    GT              reduce using rule 48 (VALUE -> STRING .)
    LE              reduce using rule 48 (VALUE -> STRING .)
    GE              reduce using rule 48 (VALUE -> STRING .)
    AND             reduce using rule 48 (VALUE -> STRING .)
    OR              reduce using rule 48 (VALUE -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 48 (VALUE -> STRING .)
    FOR             reduce using rule 48 (VALUE -> STRING .)
    DO              reduce using rule 48 (VALUE -> STRING .)
    WHILE           reduce using rule 48 (VALUE -> STRING .)
    ELSE            reduce using rule 48 (VALUE -> STRING .)
    IF              reduce using rule 48 (VALUE -> STRING .)
    PRINT           reduce using rule 48 (VALUE -> STRING .)
    ID              reduce using rule 48 (VALUE -> STRING .)
    MATRIX_VAL      reduce using rule 48 (VALUE -> STRING .)
    FUNC            reduce using rule 48 (VALUE -> STRING .)
    $end            reduce using rule 48 (VALUE -> STRING .)
    CLOSE_BRACES    reduce using rule 48 (VALUE -> STRING .)


state 56

    (49) VALUE -> MATRIX .

    MULOP           reduce using rule 49 (VALUE -> MATRIX .)
    DIVOP           reduce using rule 49 (VALUE -> MATRIX .)
    SUMOP           reduce using rule 49 (VALUE -> MATRIX .)
    SUBOP           reduce using rule 49 (VALUE -> MATRIX .)
    EQ              reduce using rule 49 (VALUE -> MATRIX .)
    NE              reduce using rule 49 (VALUE -> MATRIX .)
    LT              reduce using rule 49 (VALUE -> MATRIX .)
    GT              reduce using rule 49 (VALUE -> MATRIX .)
    LE              reduce using rule 49 (VALUE -> MATRIX .)
    GE              reduce using rule 49 (VALUE -> MATRIX .)
    AND             reduce using rule 49 (VALUE -> MATRIX .)
    OR              reduce using rule 49 (VALUE -> MATRIX .)
    CLOSE_PARENTHESIS reduce using rule 49 (VALUE -> MATRIX .)
    FOR             reduce using rule 49 (VALUE -> MATRIX .)
    DO              reduce using rule 49 (VALUE -> MATRIX .)
    WHILE           reduce using rule 49 (VALUE -> MATRIX .)
    ELSE            reduce using rule 49 (VALUE -> MATRIX .)
    IF              reduce using rule 49 (VALUE -> MATRIX .)
    PRINT           reduce using rule 49 (VALUE -> MATRIX .)
    ID              reduce using rule 49 (VALUE -> MATRIX .)
    MATRIX_VAL      reduce using rule 49 (VALUE -> MATRIX .)
    FUNC            reduce using rule 49 (VALUE -> MATRIX .)
    $end            reduce using rule 49 (VALUE -> MATRIX .)
    CLOSE_BRACES    reduce using rule 49 (VALUE -> MATRIX .)


state 57

    (50) VALUE -> SEQUENCE .

    MULOP           reduce using rule 50 (VALUE -> SEQUENCE .)
    DIVOP           reduce using rule 50 (VALUE -> SEQUENCE .)
    SUMOP           reduce using rule 50 (VALUE -> SEQUENCE .)
    SUBOP           reduce using rule 50 (VALUE -> SEQUENCE .)
    EQ              reduce using rule 50 (VALUE -> SEQUENCE .)
    NE              reduce using rule 50 (VALUE -> SEQUENCE .)
    LT              reduce using rule 50 (VALUE -> SEQUENCE .)
    GT              reduce using rule 50 (VALUE -> SEQUENCE .)
    LE              reduce using rule 50 (VALUE -> SEQUENCE .)
    GE              reduce using rule 50 (VALUE -> SEQUENCE .)
    AND             reduce using rule 50 (VALUE -> SEQUENCE .)
    OR              reduce using rule 50 (VALUE -> SEQUENCE .)
    CLOSE_PARENTHESIS reduce using rule 50 (VALUE -> SEQUENCE .)
    FOR             reduce using rule 50 (VALUE -> SEQUENCE .)
    DO              reduce using rule 50 (VALUE -> SEQUENCE .)
    WHILE           reduce using rule 50 (VALUE -> SEQUENCE .)
    ELSE            reduce using rule 50 (VALUE -> SEQUENCE .)
    IF              reduce using rule 50 (VALUE -> SEQUENCE .)
    PRINT           reduce using rule 50 (VALUE -> SEQUENCE .)
    ID              reduce using rule 50 (VALUE -> SEQUENCE .)
    MATRIX_VAL      reduce using rule 50 (VALUE -> SEQUENCE .)
    FUNC            reduce using rule 50 (VALUE -> SEQUENCE .)
    $end            reduce using rule 50 (VALUE -> SEQUENCE .)
    CLOSE_BRACES    reduce using rule 50 (VALUE -> SEQUENCE .)


state 58

    (25) ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 88


state 59

    (23) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP . CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP . CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    CLOSE_PARENTHESIS shift and go to state 89


state 60

    (22) OUTPUT -> PRINT OPEN_PARENTHESIS EXP . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 90


state 61

    (18) INPUT -> ID . COMMA INPUT
    (20) INPUT -> ID . IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> ID . COMMA VAR
    (16) VAR -> ID . IS_VALUE EXP

    COMMA           shift and go to state 39
    IS_VALUE        shift and go to state 40


state 62

    (18) INPUT -> ID COMMA INPUT .

    FOR             reduce using rule 18 (INPUT -> ID COMMA INPUT .)
    DO              reduce using rule 18 (INPUT -> ID COMMA INPUT .)
    WHILE           reduce using rule 18 (INPUT -> ID COMMA INPUT .)
    ELSE            reduce using rule 18 (INPUT -> ID COMMA INPUT .)
    IF              reduce using rule 18 (INPUT -> ID COMMA INPUT .)
    PRINT           reduce using rule 18 (INPUT -> ID COMMA INPUT .)
    ID              reduce using rule 18 (INPUT -> ID COMMA INPUT .)
    MATRIX_VAL      reduce using rule 18 (INPUT -> ID COMMA INPUT .)
    FUNC            reduce using rule 18 (INPUT -> ID COMMA INPUT .)
    $end            reduce using rule 18 (INPUT -> ID COMMA INPUT .)
    CLOSE_BRACES    reduce using rule 18 (INPUT -> ID COMMA INPUT .)


state 63

    (14) VAR -> ID COMMA VAR .

    FOR             reduce using rule 14 (VAR -> ID COMMA VAR .)
    DO              reduce using rule 14 (VAR -> ID COMMA VAR .)
    WHILE           reduce using rule 14 (VAR -> ID COMMA VAR .)
    ELSE            reduce using rule 14 (VAR -> ID COMMA VAR .)
    IF              reduce using rule 14 (VAR -> ID COMMA VAR .)
    PRINT           reduce using rule 14 (VAR -> ID COMMA VAR .)
    ID              reduce using rule 14 (VAR -> ID COMMA VAR .)
    MATRIX_VAL      reduce using rule 14 (VAR -> ID COMMA VAR .)
    FUNC            reduce using rule 14 (VAR -> ID COMMA VAR .)
    $end            reduce using rule 14 (VAR -> ID COMMA VAR .)
    CLOSE_BRACES    reduce using rule 14 (VAR -> ID COMMA VAR .)


state 64

    (20) INPUT -> ID IS_VALUE READ . OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 91


state 65

    (16) VAR -> ID IS_VALUE EXP .

    FOR             reduce using rule 16 (VAR -> ID IS_VALUE EXP .)
    DO              reduce using rule 16 (VAR -> ID IS_VALUE EXP .)
    WHILE           reduce using rule 16 (VAR -> ID IS_VALUE EXP .)
    ELSE            reduce using rule 16 (VAR -> ID IS_VALUE EXP .)
    IF              reduce using rule 16 (VAR -> ID IS_VALUE EXP .)
    PRINT           reduce using rule 16 (VAR -> ID IS_VALUE EXP .)
    ID              reduce using rule 16 (VAR -> ID IS_VALUE EXP .)
    MATRIX_VAL      reduce using rule 16 (VAR -> ID IS_VALUE EXP .)
    FUNC            reduce using rule 16 (VAR -> ID IS_VALUE EXP .)
    $end            reduce using rule 16 (VAR -> ID IS_VALUE EXP .)
    CLOSE_BRACES    reduce using rule 16 (VAR -> ID IS_VALUE EXP .)


state 66

    (40) FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .

    FOR             reduce using rule 40 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    DO              reduce using rule 40 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 40 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 40 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    IF              reduce using rule 40 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 40 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    ID              reduce using rule 40 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    MATRIX_VAL      reduce using rule 40 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    FUNC            reduce using rule 40 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    $end            reduce using rule 40 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CLOSE_BRACES    reduce using rule 40 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)


state 67

    (19) INPUT -> MATRIX_VAL COMMA INPUT .

    FOR             reduce using rule 19 (INPUT -> MATRIX_VAL COMMA INPUT .)
    DO              reduce using rule 19 (INPUT -> MATRIX_VAL COMMA INPUT .)
    WHILE           reduce using rule 19 (INPUT -> MATRIX_VAL COMMA INPUT .)
    ELSE            reduce using rule 19 (INPUT -> MATRIX_VAL COMMA INPUT .)
    IF              reduce using rule 19 (INPUT -> MATRIX_VAL COMMA INPUT .)
    PRINT           reduce using rule 19 (INPUT -> MATRIX_VAL COMMA INPUT .)
    ID              reduce using rule 19 (INPUT -> MATRIX_VAL COMMA INPUT .)
    MATRIX_VAL      reduce using rule 19 (INPUT -> MATRIX_VAL COMMA INPUT .)
    FUNC            reduce using rule 19 (INPUT -> MATRIX_VAL COMMA INPUT .)
    $end            reduce using rule 19 (INPUT -> MATRIX_VAL COMMA INPUT .)
    CLOSE_BRACES    reduce using rule 19 (INPUT -> MATRIX_VAL COMMA INPUT .)


state 68

    (15) VAR -> MATRIX_VAL COMMA VAR .

    FOR             reduce using rule 15 (VAR -> MATRIX_VAL COMMA VAR .)
    DO              reduce using rule 15 (VAR -> MATRIX_VAL COMMA VAR .)
    WHILE           reduce using rule 15 (VAR -> MATRIX_VAL COMMA VAR .)
    ELSE            reduce using rule 15 (VAR -> MATRIX_VAL COMMA VAR .)
    IF              reduce using rule 15 (VAR -> MATRIX_VAL COMMA VAR .)
    PRINT           reduce using rule 15 (VAR -> MATRIX_VAL COMMA VAR .)
    ID              reduce using rule 15 (VAR -> MATRIX_VAL COMMA VAR .)
    MATRIX_VAL      reduce using rule 15 (VAR -> MATRIX_VAL COMMA VAR .)
    FUNC            reduce using rule 15 (VAR -> MATRIX_VAL COMMA VAR .)
    $end            reduce using rule 15 (VAR -> MATRIX_VAL COMMA VAR .)
    CLOSE_BRACES    reduce using rule 15 (VAR -> MATRIX_VAL COMMA VAR .)


state 69

    (21) INPUT -> MATRIX_VAL IS_VALUE READ . OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 92


state 70

    (17) VAR -> MATRIX_VAL IS_VALUE EXP .

    FOR             reduce using rule 17 (VAR -> MATRIX_VAL IS_VALUE EXP .)
    DO              reduce using rule 17 (VAR -> MATRIX_VAL IS_VALUE EXP .)
    WHILE           reduce using rule 17 (VAR -> MATRIX_VAL IS_VALUE EXP .)
    ELSE            reduce using rule 17 (VAR -> MATRIX_VAL IS_VALUE EXP .)
    IF              reduce using rule 17 (VAR -> MATRIX_VAL IS_VALUE EXP .)
    PRINT           reduce using rule 17 (VAR -> MATRIX_VAL IS_VALUE EXP .)
    ID              reduce using rule 17 (VAR -> MATRIX_VAL IS_VALUE EXP .)
    MATRIX_VAL      reduce using rule 17 (VAR -> MATRIX_VAL IS_VALUE EXP .)
    FUNC            reduce using rule 17 (VAR -> MATRIX_VAL IS_VALUE EXP .)
    $end            reduce using rule 17 (VAR -> MATRIX_VAL IS_VALUE EXP .)
    CLOSE_BRACES    reduce using rule 17 (VAR -> MATRIX_VAL IS_VALUE EXP .)


state 71

    (29) FUNCTION -> FUNC ID OPEN_PARENTHESIS . CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES

    CLOSE_PARENTHESIS shift and go to state 93


state 72

    (28) FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS . OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_BRACES     shift and go to state 94


state 73

    (27) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS

    WHILE           shift and go to state 95


state 74

    (44) VALUE -> OPEN_PARENTHESIS VALUE . CLOSE_PARENTHESIS
    (51) EARITH -> VALUE . MULOP VALUE
    (52) EARITH -> VALUE . DIVOP VALUE
    (53) EARITH -> VALUE . SUMOP VALUE
    (54) EARITH -> VALUE . SUBOP VALUE
    (55) ELOGIC -> VALUE . EQ VALUE
    (56) ELOGIC -> VALUE . NE VALUE
    (57) ELOGIC -> VALUE . LT VALUE
    (58) ELOGIC -> VALUE . GT VALUE
    (59) ELOGIC -> VALUE . LE VALUE
    (60) ELOGIC -> VALUE . GE VALUE
    (61) ELOGIC -> VALUE . AND VALUE
    (62) ELOGIC -> VALUE . OR VALUE

    CLOSE_PARENTHESIS shift and go to state 96
    MULOP           shift and go to state 76
    DIVOP           shift and go to state 77
    SUMOP           shift and go to state 78
    SUBOP           shift and go to state 79
    EQ              shift and go to state 80
    NE              shift and go to state 81
    LT              shift and go to state 82
    GT              shift and go to state 83
    LE              shift and go to state 84
    GE              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 75

    (26) WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS . OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_BRACES     shift and go to state 97


state 76

    (51) EARITH -> VALUE MULOP . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    VALUE                          shift and go to state 98
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 77

    (52) EARITH -> VALUE DIVOP . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    VALUE                          shift and go to state 99
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 78

    (53) EARITH -> VALUE SUMOP . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    VALUE                          shift and go to state 100
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 79

    (54) EARITH -> VALUE SUBOP . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    VALUE                          shift and go to state 101
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 80

    (55) ELOGIC -> VALUE EQ . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    VALUE                          shift and go to state 102
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 81

    (56) ELOGIC -> VALUE NE . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    VALUE                          shift and go to state 103
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 82

    (57) ELOGIC -> VALUE LT . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    VALUE                          shift and go to state 104
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 83

    (58) ELOGIC -> VALUE GT . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    VALUE                          shift and go to state 105
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 84

    (59) ELOGIC -> VALUE LE . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    VALUE                          shift and go to state 106
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 85

    (60) ELOGIC -> VALUE GE . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    VALUE                          shift and go to state 107
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 86

    (61) ELOGIC -> VALUE AND . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    VALUE                          shift and go to state 108
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 87

    (62) ELOGIC -> VALUE OR . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    VALUE                          shift and go to state 109
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 88

    (25) ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .

    FOR             reduce using rule 25 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    DO              reduce using rule 25 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    WHILE           reduce using rule 25 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ELSE            reduce using rule 25 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    IF              reduce using rule 25 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    PRINT           reduce using rule 25 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ID              reduce using rule 25 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    MATRIX_VAL      reduce using rule 25 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    FUNC            reduce using rule 25 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    $end            reduce using rule 25 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 25 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)


state 89

    (23) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS . OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS . OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_BRACES     shift and go to state 110


state 90

    (22) OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .

    FOR             reduce using rule 22 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    DO              reduce using rule 22 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 22 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 22 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    IF              reduce using rule 22 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 22 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    ID              reduce using rule 22 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    MATRIX_VAL      reduce using rule 22 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    FUNC            reduce using rule 22 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    $end            reduce using rule 22 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    CLOSE_BRACES    reduce using rule 22 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)


state 91

    (20) INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 111


state 92

    (21) INPUT -> MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 112


state 93

    (29) FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS . OPEN_BRACES NON_FUNCTION CLOSE_BRACES

    OPEN_BRACES     shift and go to state 113


state 94

    (28) FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES . STRUCTURES CLOSE_BRACES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (29) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    FUNC            shift and go to state 22
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    STRUCTURES                     shift and go to state 114
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 95

    (27) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE . OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 115


state 96

    (44) VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .

    MULOP           reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    DIVOP           reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    SUMOP           reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    SUBOP           reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    EQ              reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    NE              reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    LT              reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    GT              reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    LE              reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    GE              reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    AND             reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    OR              reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    FOR             reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    DO              reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    IF              reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    ID              reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    MATRIX_VAL      reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    FUNC            reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    $end            reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    CLOSE_BRACES    reduce using rule 44 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)


state 97

    (26) WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES . STRUCTURES CLOSE_BRACES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (29) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    FUNC            shift and go to state 22
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    STRUCTURES                     shift and go to state 116
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 98

    (51) EARITH -> VALUE MULOP VALUE .
    (51) EARITH -> VALUE . MULOP VALUE
    (52) EARITH -> VALUE . DIVOP VALUE
    (53) EARITH -> VALUE . SUMOP VALUE
    (54) EARITH -> VALUE . SUBOP VALUE
    (55) ELOGIC -> VALUE . EQ VALUE
    (56) ELOGIC -> VALUE . NE VALUE
    (57) ELOGIC -> VALUE . LT VALUE
    (58) ELOGIC -> VALUE . GT VALUE
    (59) ELOGIC -> VALUE . LE VALUE
    (60) ELOGIC -> VALUE . GE VALUE
    (61) ELOGIC -> VALUE . AND VALUE
    (62) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 51 (EARITH -> VALUE MULOP VALUE .)
    FOR             reduce using rule 51 (EARITH -> VALUE MULOP VALUE .)
    DO              reduce using rule 51 (EARITH -> VALUE MULOP VALUE .)
    WHILE           reduce using rule 51 (EARITH -> VALUE MULOP VALUE .)
    ELSE            reduce using rule 51 (EARITH -> VALUE MULOP VALUE .)
    IF              reduce using rule 51 (EARITH -> VALUE MULOP VALUE .)
    PRINT           reduce using rule 51 (EARITH -> VALUE MULOP VALUE .)
    ID              reduce using rule 51 (EARITH -> VALUE MULOP VALUE .)
    MATRIX_VAL      reduce using rule 51 (EARITH -> VALUE MULOP VALUE .)
    FUNC            reduce using rule 51 (EARITH -> VALUE MULOP VALUE .)
    $end            reduce using rule 51 (EARITH -> VALUE MULOP VALUE .)
    CLOSE_BRACES    reduce using rule 51 (EARITH -> VALUE MULOP VALUE .)
    MULOP           shift and go to state 76
    DIVOP           shift and go to state 77
    SUMOP           shift and go to state 78
    SUBOP           shift and go to state 79
    EQ              shift and go to state 80
    NE              shift and go to state 81
    LT              shift and go to state 82
    GT              shift and go to state 83
    LE              shift and go to state 84
    GE              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! MULOP           [ reduce using rule 51 (EARITH -> VALUE MULOP VALUE .) ]
  ! DIVOP           [ reduce using rule 51 (EARITH -> VALUE MULOP VALUE .) ]
  ! SUMOP           [ reduce using rule 51 (EARITH -> VALUE MULOP VALUE .) ]
  ! SUBOP           [ reduce using rule 51 (EARITH -> VALUE MULOP VALUE .) ]
  ! EQ              [ reduce using rule 51 (EARITH -> VALUE MULOP VALUE .) ]
  ! NE              [ reduce using rule 51 (EARITH -> VALUE MULOP VALUE .) ]
  ! LT              [ reduce using rule 51 (EARITH -> VALUE MULOP VALUE .) ]
  ! GT              [ reduce using rule 51 (EARITH -> VALUE MULOP VALUE .) ]
  ! LE              [ reduce using rule 51 (EARITH -> VALUE MULOP VALUE .) ]
  ! GE              [ reduce using rule 51 (EARITH -> VALUE MULOP VALUE .) ]
  ! AND             [ reduce using rule 51 (EARITH -> VALUE MULOP VALUE .) ]
  ! OR              [ reduce using rule 51 (EARITH -> VALUE MULOP VALUE .) ]


state 99

    (52) EARITH -> VALUE DIVOP VALUE .
    (51) EARITH -> VALUE . MULOP VALUE
    (52) EARITH -> VALUE . DIVOP VALUE
    (53) EARITH -> VALUE . SUMOP VALUE
    (54) EARITH -> VALUE . SUBOP VALUE
    (55) ELOGIC -> VALUE . EQ VALUE
    (56) ELOGIC -> VALUE . NE VALUE
    (57) ELOGIC -> VALUE . LT VALUE
    (58) ELOGIC -> VALUE . GT VALUE
    (59) ELOGIC -> VALUE . LE VALUE
    (60) ELOGIC -> VALUE . GE VALUE
    (61) ELOGIC -> VALUE . AND VALUE
    (62) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .)
    FOR             reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .)
    DO              reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .)
    WHILE           reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .)
    ELSE            reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .)
    IF              reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .)
    PRINT           reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .)
    ID              reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .)
    MATRIX_VAL      reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .)
    FUNC            reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .)
    $end            reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .)
    CLOSE_BRACES    reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .)
    MULOP           shift and go to state 76
    DIVOP           shift and go to state 77
    SUMOP           shift and go to state 78
    SUBOP           shift and go to state 79
    EQ              shift and go to state 80
    NE              shift and go to state 81
    LT              shift and go to state 82
    GT              shift and go to state 83
    LE              shift and go to state 84
    GE              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! MULOP           [ reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .) ]
  ! DIVOP           [ reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .) ]
  ! SUMOP           [ reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .) ]
  ! SUBOP           [ reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .) ]
  ! EQ              [ reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .) ]
  ! NE              [ reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .) ]
  ! LT              [ reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .) ]
  ! GT              [ reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .) ]
  ! LE              [ reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .) ]
  ! GE              [ reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .) ]
  ! AND             [ reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .) ]
  ! OR              [ reduce using rule 52 (EARITH -> VALUE DIVOP VALUE .) ]


state 100

    (53) EARITH -> VALUE SUMOP VALUE .
    (51) EARITH -> VALUE . MULOP VALUE
    (52) EARITH -> VALUE . DIVOP VALUE
    (53) EARITH -> VALUE . SUMOP VALUE
    (54) EARITH -> VALUE . SUBOP VALUE
    (55) ELOGIC -> VALUE . EQ VALUE
    (56) ELOGIC -> VALUE . NE VALUE
    (57) ELOGIC -> VALUE . LT VALUE
    (58) ELOGIC -> VALUE . GT VALUE
    (59) ELOGIC -> VALUE . LE VALUE
    (60) ELOGIC -> VALUE . GE VALUE
    (61) ELOGIC -> VALUE . AND VALUE
    (62) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .)
    FOR             reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .)
    DO              reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .)
    WHILE           reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .)
    ELSE            reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .)
    IF              reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .)
    PRINT           reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .)
    ID              reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .)
    MATRIX_VAL      reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .)
    FUNC            reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .)
    $end            reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .)
    CLOSE_BRACES    reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .)
    MULOP           shift and go to state 76
    DIVOP           shift and go to state 77
    SUMOP           shift and go to state 78
    SUBOP           shift and go to state 79
    EQ              shift and go to state 80
    NE              shift and go to state 81
    LT              shift and go to state 82
    GT              shift and go to state 83
    LE              shift and go to state 84
    GE              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! MULOP           [ reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .) ]
  ! DIVOP           [ reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .) ]
  ! SUMOP           [ reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .) ]
  ! SUBOP           [ reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .) ]
  ! EQ              [ reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .) ]
  ! NE              [ reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .) ]
  ! LT              [ reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .) ]
  ! GT              [ reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .) ]
  ! LE              [ reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .) ]
  ! GE              [ reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .) ]
  ! AND             [ reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .) ]
  ! OR              [ reduce using rule 53 (EARITH -> VALUE SUMOP VALUE .) ]


state 101

    (54) EARITH -> VALUE SUBOP VALUE .
    (51) EARITH -> VALUE . MULOP VALUE
    (52) EARITH -> VALUE . DIVOP VALUE
    (53) EARITH -> VALUE . SUMOP VALUE
    (54) EARITH -> VALUE . SUBOP VALUE
    (55) ELOGIC -> VALUE . EQ VALUE
    (56) ELOGIC -> VALUE . NE VALUE
    (57) ELOGIC -> VALUE . LT VALUE
    (58) ELOGIC -> VALUE . GT VALUE
    (59) ELOGIC -> VALUE . LE VALUE
    (60) ELOGIC -> VALUE . GE VALUE
    (61) ELOGIC -> VALUE . AND VALUE
    (62) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .)
    FOR             reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .)
    DO              reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .)
    WHILE           reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .)
    ELSE            reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .)
    IF              reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .)
    PRINT           reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .)
    ID              reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .)
    MATRIX_VAL      reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .)
    FUNC            reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .)
    $end            reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .)
    CLOSE_BRACES    reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .)
    MULOP           shift and go to state 76
    DIVOP           shift and go to state 77
    SUMOP           shift and go to state 78
    SUBOP           shift and go to state 79
    EQ              shift and go to state 80
    NE              shift and go to state 81
    LT              shift and go to state 82
    GT              shift and go to state 83
    LE              shift and go to state 84
    GE              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! MULOP           [ reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .) ]
  ! DIVOP           [ reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .) ]
  ! SUMOP           [ reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .) ]
  ! SUBOP           [ reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .) ]
  ! EQ              [ reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .) ]
  ! NE              [ reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .) ]
  ! LT              [ reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .) ]
  ! GT              [ reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .) ]
  ! LE              [ reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .) ]
  ! GE              [ reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .) ]
  ! AND             [ reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .) ]
  ! OR              [ reduce using rule 54 (EARITH -> VALUE SUBOP VALUE .) ]


state 102

    (55) ELOGIC -> VALUE EQ VALUE .
    (51) EARITH -> VALUE . MULOP VALUE
    (52) EARITH -> VALUE . DIVOP VALUE
    (53) EARITH -> VALUE . SUMOP VALUE
    (54) EARITH -> VALUE . SUBOP VALUE
    (55) ELOGIC -> VALUE . EQ VALUE
    (56) ELOGIC -> VALUE . NE VALUE
    (57) ELOGIC -> VALUE . LT VALUE
    (58) ELOGIC -> VALUE . GT VALUE
    (59) ELOGIC -> VALUE . LE VALUE
    (60) ELOGIC -> VALUE . GE VALUE
    (61) ELOGIC -> VALUE . AND VALUE
    (62) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .)
    FOR             reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .)
    DO              reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .)
    WHILE           reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .)
    ELSE            reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .)
    IF              reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .)
    PRINT           reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .)
    ID              reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .)
    MATRIX_VAL      reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .)
    FUNC            reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .)
    $end            reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .)
    CLOSE_BRACES    reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .)
    MULOP           shift and go to state 76
    DIVOP           shift and go to state 77
    SUMOP           shift and go to state 78
    SUBOP           shift and go to state 79
    EQ              shift and go to state 80
    NE              shift and go to state 81
    LT              shift and go to state 82
    GT              shift and go to state 83
    LE              shift and go to state 84
    GE              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! MULOP           [ reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .) ]
  ! DIVOP           [ reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .) ]
  ! SUMOP           [ reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .) ]
  ! SUBOP           [ reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .) ]
  ! EQ              [ reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .) ]
  ! NE              [ reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .) ]
  ! LT              [ reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .) ]
  ! GT              [ reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .) ]
  ! LE              [ reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .) ]
  ! GE              [ reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .) ]
  ! AND             [ reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .) ]
  ! OR              [ reduce using rule 55 (ELOGIC -> VALUE EQ VALUE .) ]


state 103

    (56) ELOGIC -> VALUE NE VALUE .
    (51) EARITH -> VALUE . MULOP VALUE
    (52) EARITH -> VALUE . DIVOP VALUE
    (53) EARITH -> VALUE . SUMOP VALUE
    (54) EARITH -> VALUE . SUBOP VALUE
    (55) ELOGIC -> VALUE . EQ VALUE
    (56) ELOGIC -> VALUE . NE VALUE
    (57) ELOGIC -> VALUE . LT VALUE
    (58) ELOGIC -> VALUE . GT VALUE
    (59) ELOGIC -> VALUE . LE VALUE
    (60) ELOGIC -> VALUE . GE VALUE
    (61) ELOGIC -> VALUE . AND VALUE
    (62) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 56 (ELOGIC -> VALUE NE VALUE .)
    FOR             reduce using rule 56 (ELOGIC -> VALUE NE VALUE .)
    DO              reduce using rule 56 (ELOGIC -> VALUE NE VALUE .)
    WHILE           reduce using rule 56 (ELOGIC -> VALUE NE VALUE .)
    ELSE            reduce using rule 56 (ELOGIC -> VALUE NE VALUE .)
    IF              reduce using rule 56 (ELOGIC -> VALUE NE VALUE .)
    PRINT           reduce using rule 56 (ELOGIC -> VALUE NE VALUE .)
    ID              reduce using rule 56 (ELOGIC -> VALUE NE VALUE .)
    MATRIX_VAL      reduce using rule 56 (ELOGIC -> VALUE NE VALUE .)
    FUNC            reduce using rule 56 (ELOGIC -> VALUE NE VALUE .)
    $end            reduce using rule 56 (ELOGIC -> VALUE NE VALUE .)
    CLOSE_BRACES    reduce using rule 56 (ELOGIC -> VALUE NE VALUE .)
    MULOP           shift and go to state 76
    DIVOP           shift and go to state 77
    SUMOP           shift and go to state 78
    SUBOP           shift and go to state 79
    EQ              shift and go to state 80
    NE              shift and go to state 81
    LT              shift and go to state 82
    GT              shift and go to state 83
    LE              shift and go to state 84
    GE              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! MULOP           [ reduce using rule 56 (ELOGIC -> VALUE NE VALUE .) ]
  ! DIVOP           [ reduce using rule 56 (ELOGIC -> VALUE NE VALUE .) ]
  ! SUMOP           [ reduce using rule 56 (ELOGIC -> VALUE NE VALUE .) ]
  ! SUBOP           [ reduce using rule 56 (ELOGIC -> VALUE NE VALUE .) ]
  ! EQ              [ reduce using rule 56 (ELOGIC -> VALUE NE VALUE .) ]
  ! NE              [ reduce using rule 56 (ELOGIC -> VALUE NE VALUE .) ]
  ! LT              [ reduce using rule 56 (ELOGIC -> VALUE NE VALUE .) ]
  ! GT              [ reduce using rule 56 (ELOGIC -> VALUE NE VALUE .) ]
  ! LE              [ reduce using rule 56 (ELOGIC -> VALUE NE VALUE .) ]
  ! GE              [ reduce using rule 56 (ELOGIC -> VALUE NE VALUE .) ]
  ! AND             [ reduce using rule 56 (ELOGIC -> VALUE NE VALUE .) ]
  ! OR              [ reduce using rule 56 (ELOGIC -> VALUE NE VALUE .) ]


state 104

    (57) ELOGIC -> VALUE LT VALUE .
    (51) EARITH -> VALUE . MULOP VALUE
    (52) EARITH -> VALUE . DIVOP VALUE
    (53) EARITH -> VALUE . SUMOP VALUE
    (54) EARITH -> VALUE . SUBOP VALUE
    (55) ELOGIC -> VALUE . EQ VALUE
    (56) ELOGIC -> VALUE . NE VALUE
    (57) ELOGIC -> VALUE . LT VALUE
    (58) ELOGIC -> VALUE . GT VALUE
    (59) ELOGIC -> VALUE . LE VALUE
    (60) ELOGIC -> VALUE . GE VALUE
    (61) ELOGIC -> VALUE . AND VALUE
    (62) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 57 (ELOGIC -> VALUE LT VALUE .)
    FOR             reduce using rule 57 (ELOGIC -> VALUE LT VALUE .)
    DO              reduce using rule 57 (ELOGIC -> VALUE LT VALUE .)
    WHILE           reduce using rule 57 (ELOGIC -> VALUE LT VALUE .)
    ELSE            reduce using rule 57 (ELOGIC -> VALUE LT VALUE .)
    IF              reduce using rule 57 (ELOGIC -> VALUE LT VALUE .)
    PRINT           reduce using rule 57 (ELOGIC -> VALUE LT VALUE .)
    ID              reduce using rule 57 (ELOGIC -> VALUE LT VALUE .)
    MATRIX_VAL      reduce using rule 57 (ELOGIC -> VALUE LT VALUE .)
    FUNC            reduce using rule 57 (ELOGIC -> VALUE LT VALUE .)
    $end            reduce using rule 57 (ELOGIC -> VALUE LT VALUE .)
    CLOSE_BRACES    reduce using rule 57 (ELOGIC -> VALUE LT VALUE .)
    MULOP           shift and go to state 76
    DIVOP           shift and go to state 77
    SUMOP           shift and go to state 78
    SUBOP           shift and go to state 79
    EQ              shift and go to state 80
    NE              shift and go to state 81
    LT              shift and go to state 82
    GT              shift and go to state 83
    LE              shift and go to state 84
    GE              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! MULOP           [ reduce using rule 57 (ELOGIC -> VALUE LT VALUE .) ]
  ! DIVOP           [ reduce using rule 57 (ELOGIC -> VALUE LT VALUE .) ]
  ! SUMOP           [ reduce using rule 57 (ELOGIC -> VALUE LT VALUE .) ]
  ! SUBOP           [ reduce using rule 57 (ELOGIC -> VALUE LT VALUE .) ]
  ! EQ              [ reduce using rule 57 (ELOGIC -> VALUE LT VALUE .) ]
  ! NE              [ reduce using rule 57 (ELOGIC -> VALUE LT VALUE .) ]
  ! LT              [ reduce using rule 57 (ELOGIC -> VALUE LT VALUE .) ]
  ! GT              [ reduce using rule 57 (ELOGIC -> VALUE LT VALUE .) ]
  ! LE              [ reduce using rule 57 (ELOGIC -> VALUE LT VALUE .) ]
  ! GE              [ reduce using rule 57 (ELOGIC -> VALUE LT VALUE .) ]
  ! AND             [ reduce using rule 57 (ELOGIC -> VALUE LT VALUE .) ]
  ! OR              [ reduce using rule 57 (ELOGIC -> VALUE LT VALUE .) ]


state 105

    (58) ELOGIC -> VALUE GT VALUE .
    (51) EARITH -> VALUE . MULOP VALUE
    (52) EARITH -> VALUE . DIVOP VALUE
    (53) EARITH -> VALUE . SUMOP VALUE
    (54) EARITH -> VALUE . SUBOP VALUE
    (55) ELOGIC -> VALUE . EQ VALUE
    (56) ELOGIC -> VALUE . NE VALUE
    (57) ELOGIC -> VALUE . LT VALUE
    (58) ELOGIC -> VALUE . GT VALUE
    (59) ELOGIC -> VALUE . LE VALUE
    (60) ELOGIC -> VALUE . GE VALUE
    (61) ELOGIC -> VALUE . AND VALUE
    (62) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 58 (ELOGIC -> VALUE GT VALUE .)
    FOR             reduce using rule 58 (ELOGIC -> VALUE GT VALUE .)
    DO              reduce using rule 58 (ELOGIC -> VALUE GT VALUE .)
    WHILE           reduce using rule 58 (ELOGIC -> VALUE GT VALUE .)
    ELSE            reduce using rule 58 (ELOGIC -> VALUE GT VALUE .)
    IF              reduce using rule 58 (ELOGIC -> VALUE GT VALUE .)
    PRINT           reduce using rule 58 (ELOGIC -> VALUE GT VALUE .)
    ID              reduce using rule 58 (ELOGIC -> VALUE GT VALUE .)
    MATRIX_VAL      reduce using rule 58 (ELOGIC -> VALUE GT VALUE .)
    FUNC            reduce using rule 58 (ELOGIC -> VALUE GT VALUE .)
    $end            reduce using rule 58 (ELOGIC -> VALUE GT VALUE .)
    CLOSE_BRACES    reduce using rule 58 (ELOGIC -> VALUE GT VALUE .)
    MULOP           shift and go to state 76
    DIVOP           shift and go to state 77
    SUMOP           shift and go to state 78
    SUBOP           shift and go to state 79
    EQ              shift and go to state 80
    NE              shift and go to state 81
    LT              shift and go to state 82
    GT              shift and go to state 83
    LE              shift and go to state 84
    GE              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! MULOP           [ reduce using rule 58 (ELOGIC -> VALUE GT VALUE .) ]
  ! DIVOP           [ reduce using rule 58 (ELOGIC -> VALUE GT VALUE .) ]
  ! SUMOP           [ reduce using rule 58 (ELOGIC -> VALUE GT VALUE .) ]
  ! SUBOP           [ reduce using rule 58 (ELOGIC -> VALUE GT VALUE .) ]
  ! EQ              [ reduce using rule 58 (ELOGIC -> VALUE GT VALUE .) ]
  ! NE              [ reduce using rule 58 (ELOGIC -> VALUE GT VALUE .) ]
  ! LT              [ reduce using rule 58 (ELOGIC -> VALUE GT VALUE .) ]
  ! GT              [ reduce using rule 58 (ELOGIC -> VALUE GT VALUE .) ]
  ! LE              [ reduce using rule 58 (ELOGIC -> VALUE GT VALUE .) ]
  ! GE              [ reduce using rule 58 (ELOGIC -> VALUE GT VALUE .) ]
  ! AND             [ reduce using rule 58 (ELOGIC -> VALUE GT VALUE .) ]
  ! OR              [ reduce using rule 58 (ELOGIC -> VALUE GT VALUE .) ]


state 106

    (59) ELOGIC -> VALUE LE VALUE .
    (51) EARITH -> VALUE . MULOP VALUE
    (52) EARITH -> VALUE . DIVOP VALUE
    (53) EARITH -> VALUE . SUMOP VALUE
    (54) EARITH -> VALUE . SUBOP VALUE
    (55) ELOGIC -> VALUE . EQ VALUE
    (56) ELOGIC -> VALUE . NE VALUE
    (57) ELOGIC -> VALUE . LT VALUE
    (58) ELOGIC -> VALUE . GT VALUE
    (59) ELOGIC -> VALUE . LE VALUE
    (60) ELOGIC -> VALUE . GE VALUE
    (61) ELOGIC -> VALUE . AND VALUE
    (62) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 59 (ELOGIC -> VALUE LE VALUE .)
    FOR             reduce using rule 59 (ELOGIC -> VALUE LE VALUE .)
    DO              reduce using rule 59 (ELOGIC -> VALUE LE VALUE .)
    WHILE           reduce using rule 59 (ELOGIC -> VALUE LE VALUE .)
    ELSE            reduce using rule 59 (ELOGIC -> VALUE LE VALUE .)
    IF              reduce using rule 59 (ELOGIC -> VALUE LE VALUE .)
    PRINT           reduce using rule 59 (ELOGIC -> VALUE LE VALUE .)
    ID              reduce using rule 59 (ELOGIC -> VALUE LE VALUE .)
    MATRIX_VAL      reduce using rule 59 (ELOGIC -> VALUE LE VALUE .)
    FUNC            reduce using rule 59 (ELOGIC -> VALUE LE VALUE .)
    $end            reduce using rule 59 (ELOGIC -> VALUE LE VALUE .)
    CLOSE_BRACES    reduce using rule 59 (ELOGIC -> VALUE LE VALUE .)
    MULOP           shift and go to state 76
    DIVOP           shift and go to state 77
    SUMOP           shift and go to state 78
    SUBOP           shift and go to state 79
    EQ              shift and go to state 80
    NE              shift and go to state 81
    LT              shift and go to state 82
    GT              shift and go to state 83
    LE              shift and go to state 84
    GE              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! MULOP           [ reduce using rule 59 (ELOGIC -> VALUE LE VALUE .) ]
  ! DIVOP           [ reduce using rule 59 (ELOGIC -> VALUE LE VALUE .) ]
  ! SUMOP           [ reduce using rule 59 (ELOGIC -> VALUE LE VALUE .) ]
  ! SUBOP           [ reduce using rule 59 (ELOGIC -> VALUE LE VALUE .) ]
  ! EQ              [ reduce using rule 59 (ELOGIC -> VALUE LE VALUE .) ]
  ! NE              [ reduce using rule 59 (ELOGIC -> VALUE LE VALUE .) ]
  ! LT              [ reduce using rule 59 (ELOGIC -> VALUE LE VALUE .) ]
  ! GT              [ reduce using rule 59 (ELOGIC -> VALUE LE VALUE .) ]
  ! LE              [ reduce using rule 59 (ELOGIC -> VALUE LE VALUE .) ]
  ! GE              [ reduce using rule 59 (ELOGIC -> VALUE LE VALUE .) ]
  ! AND             [ reduce using rule 59 (ELOGIC -> VALUE LE VALUE .) ]
  ! OR              [ reduce using rule 59 (ELOGIC -> VALUE LE VALUE .) ]


state 107

    (60) ELOGIC -> VALUE GE VALUE .
    (51) EARITH -> VALUE . MULOP VALUE
    (52) EARITH -> VALUE . DIVOP VALUE
    (53) EARITH -> VALUE . SUMOP VALUE
    (54) EARITH -> VALUE . SUBOP VALUE
    (55) ELOGIC -> VALUE . EQ VALUE
    (56) ELOGIC -> VALUE . NE VALUE
    (57) ELOGIC -> VALUE . LT VALUE
    (58) ELOGIC -> VALUE . GT VALUE
    (59) ELOGIC -> VALUE . LE VALUE
    (60) ELOGIC -> VALUE . GE VALUE
    (61) ELOGIC -> VALUE . AND VALUE
    (62) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 60 (ELOGIC -> VALUE GE VALUE .)
    FOR             reduce using rule 60 (ELOGIC -> VALUE GE VALUE .)
    DO              reduce using rule 60 (ELOGIC -> VALUE GE VALUE .)
    WHILE           reduce using rule 60 (ELOGIC -> VALUE GE VALUE .)
    ELSE            reduce using rule 60 (ELOGIC -> VALUE GE VALUE .)
    IF              reduce using rule 60 (ELOGIC -> VALUE GE VALUE .)
    PRINT           reduce using rule 60 (ELOGIC -> VALUE GE VALUE .)
    ID              reduce using rule 60 (ELOGIC -> VALUE GE VALUE .)
    MATRIX_VAL      reduce using rule 60 (ELOGIC -> VALUE GE VALUE .)
    FUNC            reduce using rule 60 (ELOGIC -> VALUE GE VALUE .)
    $end            reduce using rule 60 (ELOGIC -> VALUE GE VALUE .)
    CLOSE_BRACES    reduce using rule 60 (ELOGIC -> VALUE GE VALUE .)
    MULOP           shift and go to state 76
    DIVOP           shift and go to state 77
    SUMOP           shift and go to state 78
    SUBOP           shift and go to state 79
    EQ              shift and go to state 80
    NE              shift and go to state 81
    LT              shift and go to state 82
    GT              shift and go to state 83
    LE              shift and go to state 84
    GE              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! MULOP           [ reduce using rule 60 (ELOGIC -> VALUE GE VALUE .) ]
  ! DIVOP           [ reduce using rule 60 (ELOGIC -> VALUE GE VALUE .) ]
  ! SUMOP           [ reduce using rule 60 (ELOGIC -> VALUE GE VALUE .) ]
  ! SUBOP           [ reduce using rule 60 (ELOGIC -> VALUE GE VALUE .) ]
  ! EQ              [ reduce using rule 60 (ELOGIC -> VALUE GE VALUE .) ]
  ! NE              [ reduce using rule 60 (ELOGIC -> VALUE GE VALUE .) ]
  ! LT              [ reduce using rule 60 (ELOGIC -> VALUE GE VALUE .) ]
  ! GT              [ reduce using rule 60 (ELOGIC -> VALUE GE VALUE .) ]
  ! LE              [ reduce using rule 60 (ELOGIC -> VALUE GE VALUE .) ]
  ! GE              [ reduce using rule 60 (ELOGIC -> VALUE GE VALUE .) ]
  ! AND             [ reduce using rule 60 (ELOGIC -> VALUE GE VALUE .) ]
  ! OR              [ reduce using rule 60 (ELOGIC -> VALUE GE VALUE .) ]


state 108

    (61) ELOGIC -> VALUE AND VALUE .
    (51) EARITH -> VALUE . MULOP VALUE
    (52) EARITH -> VALUE . DIVOP VALUE
    (53) EARITH -> VALUE . SUMOP VALUE
    (54) EARITH -> VALUE . SUBOP VALUE
    (55) ELOGIC -> VALUE . EQ VALUE
    (56) ELOGIC -> VALUE . NE VALUE
    (57) ELOGIC -> VALUE . LT VALUE
    (58) ELOGIC -> VALUE . GT VALUE
    (59) ELOGIC -> VALUE . LE VALUE
    (60) ELOGIC -> VALUE . GE VALUE
    (61) ELOGIC -> VALUE . AND VALUE
    (62) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 61 (ELOGIC -> VALUE AND VALUE .)
    FOR             reduce using rule 61 (ELOGIC -> VALUE AND VALUE .)
    DO              reduce using rule 61 (ELOGIC -> VALUE AND VALUE .)
    WHILE           reduce using rule 61 (ELOGIC -> VALUE AND VALUE .)
    ELSE            reduce using rule 61 (ELOGIC -> VALUE AND VALUE .)
    IF              reduce using rule 61 (ELOGIC -> VALUE AND VALUE .)
    PRINT           reduce using rule 61 (ELOGIC -> VALUE AND VALUE .)
    ID              reduce using rule 61 (ELOGIC -> VALUE AND VALUE .)
    MATRIX_VAL      reduce using rule 61 (ELOGIC -> VALUE AND VALUE .)
    FUNC            reduce using rule 61 (ELOGIC -> VALUE AND VALUE .)
    $end            reduce using rule 61 (ELOGIC -> VALUE AND VALUE .)
    CLOSE_BRACES    reduce using rule 61 (ELOGIC -> VALUE AND VALUE .)
    MULOP           shift and go to state 76
    DIVOP           shift and go to state 77
    SUMOP           shift and go to state 78
    SUBOP           shift and go to state 79
    EQ              shift and go to state 80
    NE              shift and go to state 81
    LT              shift and go to state 82
    GT              shift and go to state 83
    LE              shift and go to state 84
    GE              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! MULOP           [ reduce using rule 61 (ELOGIC -> VALUE AND VALUE .) ]
  ! DIVOP           [ reduce using rule 61 (ELOGIC -> VALUE AND VALUE .) ]
  ! SUMOP           [ reduce using rule 61 (ELOGIC -> VALUE AND VALUE .) ]
  ! SUBOP           [ reduce using rule 61 (ELOGIC -> VALUE AND VALUE .) ]
  ! EQ              [ reduce using rule 61 (ELOGIC -> VALUE AND VALUE .) ]
  ! NE              [ reduce using rule 61 (ELOGIC -> VALUE AND VALUE .) ]
  ! LT              [ reduce using rule 61 (ELOGIC -> VALUE AND VALUE .) ]
  ! GT              [ reduce using rule 61 (ELOGIC -> VALUE AND VALUE .) ]
  ! LE              [ reduce using rule 61 (ELOGIC -> VALUE AND VALUE .) ]
  ! GE              [ reduce using rule 61 (ELOGIC -> VALUE AND VALUE .) ]
  ! AND             [ reduce using rule 61 (ELOGIC -> VALUE AND VALUE .) ]
  ! OR              [ reduce using rule 61 (ELOGIC -> VALUE AND VALUE .) ]


state 109

    (62) ELOGIC -> VALUE OR VALUE .
    (51) EARITH -> VALUE . MULOP VALUE
    (52) EARITH -> VALUE . DIVOP VALUE
    (53) EARITH -> VALUE . SUMOP VALUE
    (54) EARITH -> VALUE . SUBOP VALUE
    (55) ELOGIC -> VALUE . EQ VALUE
    (56) ELOGIC -> VALUE . NE VALUE
    (57) ELOGIC -> VALUE . LT VALUE
    (58) ELOGIC -> VALUE . GT VALUE
    (59) ELOGIC -> VALUE . LE VALUE
    (60) ELOGIC -> VALUE . GE VALUE
    (61) ELOGIC -> VALUE . AND VALUE
    (62) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 62 (ELOGIC -> VALUE OR VALUE .)
    FOR             reduce using rule 62 (ELOGIC -> VALUE OR VALUE .)
    DO              reduce using rule 62 (ELOGIC -> VALUE OR VALUE .)
    WHILE           reduce using rule 62 (ELOGIC -> VALUE OR VALUE .)
    ELSE            reduce using rule 62 (ELOGIC -> VALUE OR VALUE .)
    IF              reduce using rule 62 (ELOGIC -> VALUE OR VALUE .)
    PRINT           reduce using rule 62 (ELOGIC -> VALUE OR VALUE .)
    ID              reduce using rule 62 (ELOGIC -> VALUE OR VALUE .)
    MATRIX_VAL      reduce using rule 62 (ELOGIC -> VALUE OR VALUE .)
    FUNC            reduce using rule 62 (ELOGIC -> VALUE OR VALUE .)
    $end            reduce using rule 62 (ELOGIC -> VALUE OR VALUE .)
    CLOSE_BRACES    reduce using rule 62 (ELOGIC -> VALUE OR VALUE .)
    MULOP           shift and go to state 76
    DIVOP           shift and go to state 77
    SUMOP           shift and go to state 78
    SUBOP           shift and go to state 79
    EQ              shift and go to state 80
    NE              shift and go to state 81
    LT              shift and go to state 82
    GT              shift and go to state 83
    LE              shift and go to state 84
    GE              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! MULOP           [ reduce using rule 62 (ELOGIC -> VALUE OR VALUE .) ]
  ! DIVOP           [ reduce using rule 62 (ELOGIC -> VALUE OR VALUE .) ]
  ! SUMOP           [ reduce using rule 62 (ELOGIC -> VALUE OR VALUE .) ]
  ! SUBOP           [ reduce using rule 62 (ELOGIC -> VALUE OR VALUE .) ]
  ! EQ              [ reduce using rule 62 (ELOGIC -> VALUE OR VALUE .) ]
  ! NE              [ reduce using rule 62 (ELOGIC -> VALUE OR VALUE .) ]
  ! LT              [ reduce using rule 62 (ELOGIC -> VALUE OR VALUE .) ]
  ! GT              [ reduce using rule 62 (ELOGIC -> VALUE OR VALUE .) ]
  ! LE              [ reduce using rule 62 (ELOGIC -> VALUE OR VALUE .) ]
  ! GE              [ reduce using rule 62 (ELOGIC -> VALUE OR VALUE .) ]
  ! AND             [ reduce using rule 62 (ELOGIC -> VALUE OR VALUE .) ]
  ! OR              [ reduce using rule 62 (ELOGIC -> VALUE OR VALUE .) ]


state 110

    (23) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES . STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES . STRUCTURES CLOSE_BRACES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (29) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    FUNC            shift and go to state 22
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    STRUCTURES                     shift and go to state 117
    ELSE_CONDITIONAL               shift and go to state 6
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 111

    (20) INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .

    FOR             reduce using rule 20 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    DO              reduce using rule 20 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 20 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 20 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    IF              reduce using rule 20 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 20 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    ID              reduce using rule 20 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    MATRIX_VAL      reduce using rule 20 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    FUNC            reduce using rule 20 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    $end            reduce using rule 20 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CLOSE_BRACES    reduce using rule 20 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)


state 112

    (21) INPUT -> MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .

    FOR             reduce using rule 21 (INPUT -> MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    DO              reduce using rule 21 (INPUT -> MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 21 (INPUT -> MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 21 (INPUT -> MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    IF              reduce using rule 21 (INPUT -> MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 21 (INPUT -> MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    ID              reduce using rule 21 (INPUT -> MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    MATRIX_VAL      reduce using rule 21 (INPUT -> MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    FUNC            reduce using rule 21 (INPUT -> MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    $end            reduce using rule 21 (INPUT -> MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CLOSE_BRACES    reduce using rule 21 (INPUT -> MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)


state 113

    (29) FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES . NON_FUNCTION CLOSE_BRACES
    (30) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (32) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (33) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (34) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (35) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (36) NON_FUNCTION -> . INPUT NON_FUNCTION
    (37) NON_FUNCTION -> . VAR NON_FUNCTION
    (38) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (39) NON_FUNCTION -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    NON_FUNCTION                   shift and go to state 118
    FOR_LOOP                       shift and go to state 119
    DO_WHILE_LOOP                  shift and go to state 120
    WHILE_LOOP                     shift and go to state 121
    ELSE_CONDITIONAL               shift and go to state 122
    IF_CONDITIONAL                 shift and go to state 123
    OUTPUT                         shift and go to state 124
    INPUT                          shift and go to state 125
    VAR                            shift and go to state 126
    FUNC_CALL                      shift and go to state 127
    empty                          shift and go to state 128

state 114

    (28) FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 129


state 115

    (27) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS . EXP CLOSE_PARENTHESIS
    (41) EXP -> . VALUE
    (42) VALUE -> . EARITH
    (43) VALUE -> . ELOGIC
    (44) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (45) VALUE -> . VAL
    (46) VALUE -> . ID
    (47) VALUE -> . MATRIX_VAL
    (48) VALUE -> . STRING
    (49) VALUE -> . MATRIX
    (50) VALUE -> . SEQUENCE
    (51) EARITH -> . VALUE MULOP VALUE
    (52) EARITH -> . VALUE DIVOP VALUE
    (53) EARITH -> . VALUE SUMOP VALUE
    (54) EARITH -> . VALUE SUBOP VALUE
    (55) ELOGIC -> . VALUE EQ VALUE
    (56) ELOGIC -> . VALUE NE VALUE
    (57) ELOGIC -> . VALUE LT VALUE
    (58) ELOGIC -> . VALUE GT VALUE
    (59) ELOGIC -> . VALUE LE VALUE
    (60) ELOGIC -> . VALUE GE VALUE
    (61) ELOGIC -> . VALUE AND VALUE
    (62) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 47
    VAL             shift and go to state 52
    ID              shift and go to state 53
    MATRIX_VAL      shift and go to state 54
    STRING          shift and go to state 55
    MATRIX          shift and go to state 56
    SEQUENCE        shift and go to state 57

    EXP                            shift and go to state 130
    VALUE                          shift and go to state 49
    EARITH                         shift and go to state 50
    ELOGIC                         shift and go to state 51

state 116

    (26) WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 131


state 117

    (23) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES . CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 132


state 118

    (29) FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 133


state 119

    (30) NON_FUNCTION -> FOR_LOOP . NON_FUNCTION
    (30) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (32) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (33) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (34) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (35) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (36) NON_FUNCTION -> . INPUT NON_FUNCTION
    (37) NON_FUNCTION -> . VAR NON_FUNCTION
    (38) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (39) NON_FUNCTION -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    FOR_LOOP                       shift and go to state 119
    NON_FUNCTION                   shift and go to state 134
    DO_WHILE_LOOP                  shift and go to state 120
    WHILE_LOOP                     shift and go to state 121
    ELSE_CONDITIONAL               shift and go to state 122
    IF_CONDITIONAL                 shift and go to state 123
    OUTPUT                         shift and go to state 124
    INPUT                          shift and go to state 125
    VAR                            shift and go to state 126
    FUNC_CALL                      shift and go to state 127
    empty                          shift and go to state 128

state 120

    (31) NON_FUNCTION -> DO_WHILE_LOOP . NON_FUNCTION
    (30) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (32) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (33) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (34) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (35) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (36) NON_FUNCTION -> . INPUT NON_FUNCTION
    (37) NON_FUNCTION -> . VAR NON_FUNCTION
    (38) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (39) NON_FUNCTION -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    DO_WHILE_LOOP                  shift and go to state 120
    NON_FUNCTION                   shift and go to state 135
    FOR_LOOP                       shift and go to state 119
    WHILE_LOOP                     shift and go to state 121
    ELSE_CONDITIONAL               shift and go to state 122
    IF_CONDITIONAL                 shift and go to state 123
    OUTPUT                         shift and go to state 124
    INPUT                          shift and go to state 125
    VAR                            shift and go to state 126
    FUNC_CALL                      shift and go to state 127
    empty                          shift and go to state 128

state 121

    (32) NON_FUNCTION -> WHILE_LOOP . NON_FUNCTION
    (30) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (32) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (33) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (34) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (35) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (36) NON_FUNCTION -> . INPUT NON_FUNCTION
    (37) NON_FUNCTION -> . VAR NON_FUNCTION
    (38) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (39) NON_FUNCTION -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    WHILE_LOOP                     shift and go to state 121
    NON_FUNCTION                   shift and go to state 136
    FOR_LOOP                       shift and go to state 119
    DO_WHILE_LOOP                  shift and go to state 120
    ELSE_CONDITIONAL               shift and go to state 122
    IF_CONDITIONAL                 shift and go to state 123
    OUTPUT                         shift and go to state 124
    INPUT                          shift and go to state 125
    VAR                            shift and go to state 126
    FUNC_CALL                      shift and go to state 127
    empty                          shift and go to state 128

state 122

    (33) NON_FUNCTION -> ELSE_CONDITIONAL . NON_FUNCTION
    (30) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (32) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (33) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (34) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (35) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (36) NON_FUNCTION -> . INPUT NON_FUNCTION
    (37) NON_FUNCTION -> . VAR NON_FUNCTION
    (38) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (39) NON_FUNCTION -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    ELSE_CONDITIONAL               shift and go to state 122
    NON_FUNCTION                   shift and go to state 137
    FOR_LOOP                       shift and go to state 119
    DO_WHILE_LOOP                  shift and go to state 120
    WHILE_LOOP                     shift and go to state 121
    IF_CONDITIONAL                 shift and go to state 123
    OUTPUT                         shift and go to state 124
    INPUT                          shift and go to state 125
    VAR                            shift and go to state 126
    FUNC_CALL                      shift and go to state 127
    empty                          shift and go to state 128

state 123

    (34) NON_FUNCTION -> IF_CONDITIONAL . NON_FUNCTION
    (30) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (32) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (33) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (34) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (35) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (36) NON_FUNCTION -> . INPUT NON_FUNCTION
    (37) NON_FUNCTION -> . VAR NON_FUNCTION
    (38) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (39) NON_FUNCTION -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    IF_CONDITIONAL                 shift and go to state 123
    NON_FUNCTION                   shift and go to state 138
    FOR_LOOP                       shift and go to state 119
    DO_WHILE_LOOP                  shift and go to state 120
    WHILE_LOOP                     shift and go to state 121
    ELSE_CONDITIONAL               shift and go to state 122
    OUTPUT                         shift and go to state 124
    INPUT                          shift and go to state 125
    VAR                            shift and go to state 126
    FUNC_CALL                      shift and go to state 127
    empty                          shift and go to state 128

state 124

    (35) NON_FUNCTION -> OUTPUT . NON_FUNCTION
    (30) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (32) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (33) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (34) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (35) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (36) NON_FUNCTION -> . INPUT NON_FUNCTION
    (37) NON_FUNCTION -> . VAR NON_FUNCTION
    (38) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (39) NON_FUNCTION -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    OUTPUT                         shift and go to state 124
    NON_FUNCTION                   shift and go to state 139
    FOR_LOOP                       shift and go to state 119
    DO_WHILE_LOOP                  shift and go to state 120
    WHILE_LOOP                     shift and go to state 121
    ELSE_CONDITIONAL               shift and go to state 122
    IF_CONDITIONAL                 shift and go to state 123
    INPUT                          shift and go to state 125
    VAR                            shift and go to state 126
    FUNC_CALL                      shift and go to state 127
    empty                          shift and go to state 128

state 125

    (36) NON_FUNCTION -> INPUT . NON_FUNCTION
    (30) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (32) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (33) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (34) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (35) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (36) NON_FUNCTION -> . INPUT NON_FUNCTION
    (37) NON_FUNCTION -> . VAR NON_FUNCTION
    (38) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (39) NON_FUNCTION -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    INPUT                          shift and go to state 125
    NON_FUNCTION                   shift and go to state 140
    FOR_LOOP                       shift and go to state 119
    DO_WHILE_LOOP                  shift and go to state 120
    WHILE_LOOP                     shift and go to state 121
    ELSE_CONDITIONAL               shift and go to state 122
    IF_CONDITIONAL                 shift and go to state 123
    OUTPUT                         shift and go to state 124
    VAR                            shift and go to state 126
    FUNC_CALL                      shift and go to state 127
    empty                          shift and go to state 128

state 126

    (37) NON_FUNCTION -> VAR . NON_FUNCTION
    (30) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (32) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (33) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (34) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (35) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (36) NON_FUNCTION -> . INPUT NON_FUNCTION
    (37) NON_FUNCTION -> . VAR NON_FUNCTION
    (38) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (39) NON_FUNCTION -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    VAR                            shift and go to state 126
    NON_FUNCTION                   shift and go to state 141
    FOR_LOOP                       shift and go to state 119
    DO_WHILE_LOOP                  shift and go to state 120
    WHILE_LOOP                     shift and go to state 121
    ELSE_CONDITIONAL               shift and go to state 122
    IF_CONDITIONAL                 shift and go to state 123
    OUTPUT                         shift and go to state 124
    INPUT                          shift and go to state 125
    FUNC_CALL                      shift and go to state 127
    empty                          shift and go to state 128

state 127

    (38) NON_FUNCTION -> FUNC_CALL . NON_FUNCTION
    (30) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (32) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (33) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (34) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (35) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (36) NON_FUNCTION -> . INPUT NON_FUNCTION
    (37) NON_FUNCTION -> . VAR NON_FUNCTION
    (38) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (39) NON_FUNCTION -> . empty
    (28) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (27) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (26) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (18) INPUT -> . ID COMMA INPUT
    (19) INPUT -> . MATRIX_VAL COMMA INPUT
    (20) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (21) INPUT -> . MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . MATRIX_VAL COMMA VAR
    (16) VAR -> . ID IS_VALUE EXP
    (17) VAR -> . MATRIX_VAL IS_VALUE EXP
    (40) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    MATRIX_VAL      shift and go to state 21
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    FUNC_CALL                      shift and go to state 127
    NON_FUNCTION                   shift and go to state 142
    FOR_LOOP                       shift and go to state 119
    DO_WHILE_LOOP                  shift and go to state 120
    WHILE_LOOP                     shift and go to state 121
    ELSE_CONDITIONAL               shift and go to state 122
    IF_CONDITIONAL                 shift and go to state 123
    OUTPUT                         shift and go to state 124
    INPUT                          shift and go to state 125
    VAR                            shift and go to state 126
    empty                          shift and go to state 128

state 128

    (39) NON_FUNCTION -> empty .

    CLOSE_BRACES    reduce using rule 39 (NON_FUNCTION -> empty .)


state 129

    (28) FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .

    FOR             reduce using rule 28 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    DO              reduce using rule 28 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    WHILE           reduce using rule 28 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ELSE            reduce using rule 28 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    IF              reduce using rule 28 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    PRINT           reduce using rule 28 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ID              reduce using rule 28 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    MATRIX_VAL      reduce using rule 28 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    FUNC            reduce using rule 28 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    $end            reduce using rule 28 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 28 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)


state 130

    (27) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 143


state 131

    (26) WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .

    FOR             reduce using rule 26 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    DO              reduce using rule 26 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    WHILE           reduce using rule 26 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ELSE            reduce using rule 26 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    IF              reduce using rule 26 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    PRINT           reduce using rule 26 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ID              reduce using rule 26 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    MATRIX_VAL      reduce using rule 26 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    FUNC            reduce using rule 26 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    $end            reduce using rule 26 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 26 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)


state 132

    (23) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES . ELSE_CONDITIONAL
    (24) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .
    (25) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES

  ! shift/reduce conflict for ELSE resolved as shift
    FOR             reduce using rule 24 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    DO              reduce using rule 24 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    WHILE           reduce using rule 24 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    IF              reduce using rule 24 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    PRINT           reduce using rule 24 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ID              reduce using rule 24 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    MATRIX_VAL      reduce using rule 24 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    FUNC            reduce using rule 24 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    $end            reduce using rule 24 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 24 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ELSE            shift and go to state 17

  ! ELSE            [ reduce using rule 24 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .) ]

    ELSE_CONDITIONAL               shift and go to state 144

state 133

    (29) FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .

    FOR             reduce using rule 29 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    DO              reduce using rule 29 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    WHILE           reduce using rule 29 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    ELSE            reduce using rule 29 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    IF              reduce using rule 29 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    PRINT           reduce using rule 29 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    ID              reduce using rule 29 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    MATRIX_VAL      reduce using rule 29 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    FUNC            reduce using rule 29 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    $end            reduce using rule 29 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 29 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)


state 134

    (30) NON_FUNCTION -> FOR_LOOP NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 30 (NON_FUNCTION -> FOR_LOOP NON_FUNCTION .)


state 135

    (31) NON_FUNCTION -> DO_WHILE_LOOP NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 31 (NON_FUNCTION -> DO_WHILE_LOOP NON_FUNCTION .)


state 136

    (32) NON_FUNCTION -> WHILE_LOOP NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 32 (NON_FUNCTION -> WHILE_LOOP NON_FUNCTION .)


state 137

    (33) NON_FUNCTION -> ELSE_CONDITIONAL NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 33 (NON_FUNCTION -> ELSE_CONDITIONAL NON_FUNCTION .)


state 138

    (34) NON_FUNCTION -> IF_CONDITIONAL NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 34 (NON_FUNCTION -> IF_CONDITIONAL NON_FUNCTION .)


state 139

    (35) NON_FUNCTION -> OUTPUT NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 35 (NON_FUNCTION -> OUTPUT NON_FUNCTION .)


state 140

    (36) NON_FUNCTION -> INPUT NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 36 (NON_FUNCTION -> INPUT NON_FUNCTION .)


state 141

    (37) NON_FUNCTION -> VAR NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 37 (NON_FUNCTION -> VAR NON_FUNCTION .)


state 142

    (38) NON_FUNCTION -> FUNC_CALL NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 38 (NON_FUNCTION -> FUNC_CALL NON_FUNCTION .)


state 143

    (27) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .

    FOR             reduce using rule 27 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    DO              reduce using rule 27 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 27 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 27 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    IF              reduce using rule 27 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 27 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    ID              reduce using rule 27 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    MATRIX_VAL      reduce using rule 27 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    FUNC            reduce using rule 27 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    $end            reduce using rule 27 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    CLOSE_BRACES    reduce using rule 27 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)


state 144

    (23) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .

    FOR             reduce using rule 23 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    DO              reduce using rule 23 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    WHILE           reduce using rule 23 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    ELSE            reduce using rule 23 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    IF              reduce using rule 23 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    PRINT           reduce using rule 23 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    ID              reduce using rule 23 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    MATRIX_VAL      reduce using rule 23 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    FUNC            reduce using rule 23 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    $end            reduce using rule 23 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    CLOSE_BRACES    reduce using rule 23 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MULOP in state 98 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 98 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 98 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 98 resolved as shift
WARNING: shift/reduce conflict for EQ in state 98 resolved as shift
WARNING: shift/reduce conflict for NE in state 98 resolved as shift
WARNING: shift/reduce conflict for LT in state 98 resolved as shift
WARNING: shift/reduce conflict for GT in state 98 resolved as shift
WARNING: shift/reduce conflict for LE in state 98 resolved as shift
WARNING: shift/reduce conflict for GE in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 99 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 99 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 99 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 99 resolved as shift
WARNING: shift/reduce conflict for EQ in state 99 resolved as shift
WARNING: shift/reduce conflict for NE in state 99 resolved as shift
WARNING: shift/reduce conflict for LT in state 99 resolved as shift
WARNING: shift/reduce conflict for GT in state 99 resolved as shift
WARNING: shift/reduce conflict for LE in state 99 resolved as shift
WARNING: shift/reduce conflict for GE in state 99 resolved as shift
WARNING: shift/reduce conflict for AND in state 99 resolved as shift
WARNING: shift/reduce conflict for OR in state 99 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 100 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 100 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 100 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 100 resolved as shift
WARNING: shift/reduce conflict for EQ in state 100 resolved as shift
WARNING: shift/reduce conflict for NE in state 100 resolved as shift
WARNING: shift/reduce conflict for LT in state 100 resolved as shift
WARNING: shift/reduce conflict for GT in state 100 resolved as shift
WARNING: shift/reduce conflict for LE in state 100 resolved as shift
WARNING: shift/reduce conflict for GE in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 100 resolved as shift
WARNING: shift/reduce conflict for OR in state 100 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 101 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 101 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 101 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 101 resolved as shift
WARNING: shift/reduce conflict for EQ in state 101 resolved as shift
WARNING: shift/reduce conflict for NE in state 101 resolved as shift
WARNING: shift/reduce conflict for LT in state 101 resolved as shift
WARNING: shift/reduce conflict for GT in state 101 resolved as shift
WARNING: shift/reduce conflict for LE in state 101 resolved as shift
WARNING: shift/reduce conflict for GE in state 101 resolved as shift
WARNING: shift/reduce conflict for AND in state 101 resolved as shift
WARNING: shift/reduce conflict for OR in state 101 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 102 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 102 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 102 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 102 resolved as shift
WARNING: shift/reduce conflict for EQ in state 102 resolved as shift
WARNING: shift/reduce conflict for NE in state 102 resolved as shift
WARNING: shift/reduce conflict for LT in state 102 resolved as shift
WARNING: shift/reduce conflict for GT in state 102 resolved as shift
WARNING: shift/reduce conflict for LE in state 102 resolved as shift
WARNING: shift/reduce conflict for GE in state 102 resolved as shift
WARNING: shift/reduce conflict for AND in state 102 resolved as shift
WARNING: shift/reduce conflict for OR in state 102 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 103 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 103 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 103 resolved as shift
WARNING: shift/reduce conflict for EQ in state 103 resolved as shift
WARNING: shift/reduce conflict for NE in state 103 resolved as shift
WARNING: shift/reduce conflict for LT in state 103 resolved as shift
WARNING: shift/reduce conflict for GT in state 103 resolved as shift
WARNING: shift/reduce conflict for LE in state 103 resolved as shift
WARNING: shift/reduce conflict for GE in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for OR in state 103 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 104 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 104 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 104 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 104 resolved as shift
WARNING: shift/reduce conflict for EQ in state 104 resolved as shift
WARNING: shift/reduce conflict for NE in state 104 resolved as shift
WARNING: shift/reduce conflict for LT in state 104 resolved as shift
WARNING: shift/reduce conflict for GT in state 104 resolved as shift
WARNING: shift/reduce conflict for LE in state 104 resolved as shift
WARNING: shift/reduce conflict for GE in state 104 resolved as shift
WARNING: shift/reduce conflict for AND in state 104 resolved as shift
WARNING: shift/reduce conflict for OR in state 104 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 105 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 105 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 105 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 105 resolved as shift
WARNING: shift/reduce conflict for EQ in state 105 resolved as shift
WARNING: shift/reduce conflict for NE in state 105 resolved as shift
WARNING: shift/reduce conflict for LT in state 105 resolved as shift
WARNING: shift/reduce conflict for GT in state 105 resolved as shift
WARNING: shift/reduce conflict for LE in state 105 resolved as shift
WARNING: shift/reduce conflict for GE in state 105 resolved as shift
WARNING: shift/reduce conflict for AND in state 105 resolved as shift
WARNING: shift/reduce conflict for OR in state 105 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 106 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 106 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 106 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 106 resolved as shift
WARNING: shift/reduce conflict for EQ in state 106 resolved as shift
WARNING: shift/reduce conflict for NE in state 106 resolved as shift
WARNING: shift/reduce conflict for LT in state 106 resolved as shift
WARNING: shift/reduce conflict for GT in state 106 resolved as shift
WARNING: shift/reduce conflict for LE in state 106 resolved as shift
WARNING: shift/reduce conflict for GE in state 106 resolved as shift
WARNING: shift/reduce conflict for AND in state 106 resolved as shift
WARNING: shift/reduce conflict for OR in state 106 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 107 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 107 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 107 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 107 resolved as shift
WARNING: shift/reduce conflict for EQ in state 107 resolved as shift
WARNING: shift/reduce conflict for NE in state 107 resolved as shift
WARNING: shift/reduce conflict for LT in state 107 resolved as shift
WARNING: shift/reduce conflict for GT in state 107 resolved as shift
WARNING: shift/reduce conflict for LE in state 107 resolved as shift
WARNING: shift/reduce conflict for GE in state 107 resolved as shift
WARNING: shift/reduce conflict for AND in state 107 resolved as shift
WARNING: shift/reduce conflict for OR in state 107 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 108 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 108 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 108 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 108 resolved as shift
WARNING: shift/reduce conflict for EQ in state 108 resolved as shift
WARNING: shift/reduce conflict for NE in state 108 resolved as shift
WARNING: shift/reduce conflict for LT in state 108 resolved as shift
WARNING: shift/reduce conflict for GT in state 108 resolved as shift
WARNING: shift/reduce conflict for LE in state 108 resolved as shift
WARNING: shift/reduce conflict for GE in state 108 resolved as shift
WARNING: shift/reduce conflict for AND in state 108 resolved as shift
WARNING: shift/reduce conflict for OR in state 108 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 109 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 109 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 109 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 109 resolved as shift
WARNING: shift/reduce conflict for EQ in state 109 resolved as shift
WARNING: shift/reduce conflict for NE in state 109 resolved as shift
WARNING: shift/reduce conflict for LT in state 109 resolved as shift
WARNING: shift/reduce conflict for GT in state 109 resolved as shift
WARNING: shift/reduce conflict for LE in state 109 resolved as shift
WARNING: shift/reduce conflict for GE in state 109 resolved as shift
WARNING: shift/reduce conflict for AND in state 109 resolved as shift
WARNING: shift/reduce conflict for OR in state 109 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 132 resolved as shift
