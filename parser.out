Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> MAIN_PROGRAM
Rule 1     empty -> <empty>
Rule 2     MAIN_PROGRAM -> STRUCTURES
Rule 3     STRUCTURES -> FOR_LOOP STRUCTURES
Rule 4     STRUCTURES -> DO_WHILE_LOOP STRUCTURES
Rule 5     STRUCTURES -> WHILE_LOOP STRUCTURES
Rule 6     STRUCTURES -> ELSE_CONDITIONAL STRUCTURES
Rule 7     STRUCTURES -> IF_CONDITIONAL STRUCTURES
Rule 8     STRUCTURES -> OUTPUT STRUCTURES
Rule 9     STRUCTURES -> INPUT STRUCTURES
Rule 10    STRUCTURES -> VAR STRUCTURES
Rule 11    STRUCTURES -> FUNCTION STRUCTURES
Rule 12    STRUCTURES -> empty
Rule 13    VAR -> ID COMMA VAR
Rule 14    VAR -> ID IS_VALUE EXP
Rule 15    INPUT -> ID COMMA INPUT
Rule 16    INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
Rule 17    OUTPUT -> PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS
Rule 18    IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
Rule 19    IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
Rule 20    ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
Rule 21    WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
Rule 22    DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
Rule 23    FOR_LOOP -> FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
Rule 24    FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
Rule 25    EXP -> VALUE
Rule 26    VALUE -> EARITH
Rule 27    VALUE -> ELOGIC
Rule 28    VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
Rule 29    VALUE -> VAL
Rule 30    EARITH -> VALUE MULOP VALUE
Rule 31    EARITH -> VALUE DIVOP VALUE
Rule 32    EARITH -> VALUE SUMOP VALUE
Rule 33    EARITH -> VALUE SUBOP VALUE
Rule 34    ELOGIC -> VALUE EQ VALUE
Rule 35    ELOGIC -> VALUE NE VALUE
Rule 36    ELOGIC -> VALUE LT VALUE
Rule 37    ELOGIC -> VALUE GT VALUE
Rule 38    ELOGIC -> VALUE LE VALUE
Rule 39    ELOGIC -> VALUE GE VALUE
Rule 40    ELOGIC -> VALUE AND VALUE
Rule 41    ELOGIC -> VALUE OR VALUE

Terminals, with rules where they appear

AND                  : 40
CLOSE_BRACES         : 18 19 20 21 22 23 24
CLOSE_PARENTHESIS    : 16 17 18 19 21 22 23 24 28
COLON                : 23
COMMA                : 13 15
DIVOP                : 31
DO                   : 22
ELSE                 : 20
EQ                   : 34
FOR                  : 23
FUNC                 : 24
GE                   : 39
GT                   : 37
ID                   : 13 14 15 16 17 24
IF                   : 18 19
IS_VALUE             : 14 16
LE                   : 38
LT                   : 36
MULOP                : 30
NE                   : 35
OPEN_BRACES          : 18 19 20 21 22 23 24
OPEN_PARENTHESIS     : 16 17 18 19 21 22 23 24 28
OR                   : 41
PRINT                : 17
READ                 : 16
SUBOP                : 33
SUMOP                : 32
VAL                  : 29
WHILE                : 21 22
error                : 

Nonterminals, with rules where they appear

DO_WHILE_LOOP        : 4
EARITH               : 26
ELOGIC               : 27
ELSE_CONDITIONAL     : 6 18
EXP                  : 14 18 19 21 22 23 23
FOR_LOOP             : 3
FUNCTION             : 11
IF_CONDITIONAL       : 7
INPUT                : 9 15
MAIN_PROGRAM         : 0
OUTPUT               : 8
STRUCTURES           : 2 3 4 5 6 7 8 9 10 11 18 19 20 21 22 23 24
VALUE                : 25 28 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41
VAR                  : 10 13
WHILE_LOOP           : 5
empty                : 12

Parsing method: LALR

state 0

    (0) S' -> . MAIN_PROGRAM
    (2) MAIN_PROGRAM -> . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . empty
    (23) FOR_LOOP -> . FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (21) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (20) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (18) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (17) OUTPUT -> . PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS
    (15) INPUT -> . ID COMMA INPUT
    (16) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> . ID COMMA VAR
    (14) VAR -> . ID IS_VALUE EXP
    (24) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (1) empty -> .

    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ELSE            shift and go to state 16
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    FUNC            shift and go to state 20
    $end            reduce using rule 1 (empty -> .)

    MAIN_PROGRAM                   shift and go to state 1
    STRUCTURES                     shift and go to state 2
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    empty                          shift and go to state 12

state 1

    (0) S' -> MAIN_PROGRAM .



state 2

    (2) MAIN_PROGRAM -> STRUCTURES .

    $end            reduce using rule 2 (MAIN_PROGRAM -> STRUCTURES .)


state 3

    (3) STRUCTURES -> FOR_LOOP . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . empty
    (23) FOR_LOOP -> . FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (21) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (20) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (18) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (17) OUTPUT -> . PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS
    (15) INPUT -> . ID COMMA INPUT
    (16) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> . ID COMMA VAR
    (14) VAR -> . ID IS_VALUE EXP
    (24) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (1) empty -> .

    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ELSE            shift and go to state 16
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    FUNC            shift and go to state 20
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    FOR_LOOP                       shift and go to state 3
    STRUCTURES                     shift and go to state 21
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    empty                          shift and go to state 12

state 4

    (4) STRUCTURES -> DO_WHILE_LOOP . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . empty
    (23) FOR_LOOP -> . FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (21) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (20) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (18) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (17) OUTPUT -> . PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS
    (15) INPUT -> . ID COMMA INPUT
    (16) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> . ID COMMA VAR
    (14) VAR -> . ID IS_VALUE EXP
    (24) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (1) empty -> .

    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ELSE            shift and go to state 16
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    FUNC            shift and go to state 20
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    DO_WHILE_LOOP                  shift and go to state 4
    STRUCTURES                     shift and go to state 22
    FOR_LOOP                       shift and go to state 3
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    empty                          shift and go to state 12

state 5

    (5) STRUCTURES -> WHILE_LOOP . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . empty
    (23) FOR_LOOP -> . FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (21) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (20) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (18) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (17) OUTPUT -> . PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS
    (15) INPUT -> . ID COMMA INPUT
    (16) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> . ID COMMA VAR
    (14) VAR -> . ID IS_VALUE EXP
    (24) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (1) empty -> .

    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ELSE            shift and go to state 16
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    FUNC            shift and go to state 20
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    WHILE_LOOP                     shift and go to state 5
    STRUCTURES                     shift and go to state 23
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    empty                          shift and go to state 12

state 6

    (6) STRUCTURES -> ELSE_CONDITIONAL . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . empty
    (23) FOR_LOOP -> . FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (21) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (20) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (18) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (17) OUTPUT -> . PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS
    (15) INPUT -> . ID COMMA INPUT
    (16) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> . ID COMMA VAR
    (14) VAR -> . ID IS_VALUE EXP
    (24) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (1) empty -> .

    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ELSE            shift and go to state 16
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    FUNC            shift and go to state 20
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    ELSE_CONDITIONAL               shift and go to state 6
    STRUCTURES                     shift and go to state 24
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    empty                          shift and go to state 12

state 7

    (7) STRUCTURES -> IF_CONDITIONAL . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . empty
    (23) FOR_LOOP -> . FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (21) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (20) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (18) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (17) OUTPUT -> . PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS
    (15) INPUT -> . ID COMMA INPUT
    (16) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> . ID COMMA VAR
    (14) VAR -> . ID IS_VALUE EXP
    (24) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (1) empty -> .

    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ELSE            shift and go to state 16
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    FUNC            shift and go to state 20
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    IF_CONDITIONAL                 shift and go to state 7
    STRUCTURES                     shift and go to state 25
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    empty                          shift and go to state 12

state 8

    (8) STRUCTURES -> OUTPUT . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . empty
    (23) FOR_LOOP -> . FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (21) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (20) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (18) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (17) OUTPUT -> . PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS
    (15) INPUT -> . ID COMMA INPUT
    (16) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> . ID COMMA VAR
    (14) VAR -> . ID IS_VALUE EXP
    (24) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (1) empty -> .

    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ELSE            shift and go to state 16
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    FUNC            shift and go to state 20
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    OUTPUT                         shift and go to state 8
    STRUCTURES                     shift and go to state 26
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    empty                          shift and go to state 12

state 9

    (9) STRUCTURES -> INPUT . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . empty
    (23) FOR_LOOP -> . FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (21) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (20) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (18) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (17) OUTPUT -> . PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS
    (15) INPUT -> . ID COMMA INPUT
    (16) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> . ID COMMA VAR
    (14) VAR -> . ID IS_VALUE EXP
    (24) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (1) empty -> .

    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ELSE            shift and go to state 16
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    FUNC            shift and go to state 20
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    INPUT                          shift and go to state 9
    STRUCTURES                     shift and go to state 27
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    empty                          shift and go to state 12

state 10

    (10) STRUCTURES -> VAR . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . empty
    (23) FOR_LOOP -> . FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (21) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (20) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (18) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (17) OUTPUT -> . PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS
    (15) INPUT -> . ID COMMA INPUT
    (16) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> . ID COMMA VAR
    (14) VAR -> . ID IS_VALUE EXP
    (24) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (1) empty -> .

    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ELSE            shift and go to state 16
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    FUNC            shift and go to state 20
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    VAR                            shift and go to state 10
    STRUCTURES                     shift and go to state 28
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    FUNCTION                       shift and go to state 11
    empty                          shift and go to state 12

state 11

    (11) STRUCTURES -> FUNCTION . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . empty
    (23) FOR_LOOP -> . FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (21) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (20) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (18) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (17) OUTPUT -> . PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS
    (15) INPUT -> . ID COMMA INPUT
    (16) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> . ID COMMA VAR
    (14) VAR -> . ID IS_VALUE EXP
    (24) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (1) empty -> .

    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ELSE            shift and go to state 16
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    FUNC            shift and go to state 20
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    FUNCTION                       shift and go to state 11
    STRUCTURES                     shift and go to state 29
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    empty                          shift and go to state 12

state 12

    (12) STRUCTURES -> empty .

    $end            reduce using rule 12 (STRUCTURES -> empty .)
    CLOSE_BRACES    reduce using rule 12 (STRUCTURES -> empty .)


state 13

    (23) FOR_LOOP -> FOR . OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_PARENTHESIS shift and go to state 30


state 14

    (22) DO_WHILE_LOOP -> DO . OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS

    OPEN_BRACES     shift and go to state 31


state 15

    (21) WHILE_LOOP -> WHILE . OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_PARENTHESIS shift and go to state 32


state 16

    (20) ELSE_CONDITIONAL -> ELSE . OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_BRACES     shift and go to state 33


state 17

    (18) IF_CONDITIONAL -> IF . OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> IF . OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_PARENTHESIS shift and go to state 34


state 18

    (17) OUTPUT -> PRINT . OPEN_PARENTHESIS ID CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 35


state 19

    (15) INPUT -> ID . COMMA INPUT
    (16) INPUT -> ID . IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> ID . COMMA VAR
    (14) VAR -> ID . IS_VALUE EXP

    COMMA           shift and go to state 36
    IS_VALUE        shift and go to state 37


state 20

    (24) FUNCTION -> FUNC . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    ID              shift and go to state 38


state 21

    (3) STRUCTURES -> FOR_LOOP STRUCTURES .

    $end            reduce using rule 3 (STRUCTURES -> FOR_LOOP STRUCTURES .)
    CLOSE_BRACES    reduce using rule 3 (STRUCTURES -> FOR_LOOP STRUCTURES .)


state 22

    (4) STRUCTURES -> DO_WHILE_LOOP STRUCTURES .

    $end            reduce using rule 4 (STRUCTURES -> DO_WHILE_LOOP STRUCTURES .)
    CLOSE_BRACES    reduce using rule 4 (STRUCTURES -> DO_WHILE_LOOP STRUCTURES .)


state 23

    (5) STRUCTURES -> WHILE_LOOP STRUCTURES .

    $end            reduce using rule 5 (STRUCTURES -> WHILE_LOOP STRUCTURES .)
    CLOSE_BRACES    reduce using rule 5 (STRUCTURES -> WHILE_LOOP STRUCTURES .)


state 24

    (6) STRUCTURES -> ELSE_CONDITIONAL STRUCTURES .

    $end            reduce using rule 6 (STRUCTURES -> ELSE_CONDITIONAL STRUCTURES .)
    CLOSE_BRACES    reduce using rule 6 (STRUCTURES -> ELSE_CONDITIONAL STRUCTURES .)


state 25

    (7) STRUCTURES -> IF_CONDITIONAL STRUCTURES .

    $end            reduce using rule 7 (STRUCTURES -> IF_CONDITIONAL STRUCTURES .)
    CLOSE_BRACES    reduce using rule 7 (STRUCTURES -> IF_CONDITIONAL STRUCTURES .)


state 26

    (8) STRUCTURES -> OUTPUT STRUCTURES .

    $end            reduce using rule 8 (STRUCTURES -> OUTPUT STRUCTURES .)
    CLOSE_BRACES    reduce using rule 8 (STRUCTURES -> OUTPUT STRUCTURES .)


state 27

    (9) STRUCTURES -> INPUT STRUCTURES .

    $end            reduce using rule 9 (STRUCTURES -> INPUT STRUCTURES .)
    CLOSE_BRACES    reduce using rule 9 (STRUCTURES -> INPUT STRUCTURES .)


state 28

    (10) STRUCTURES -> VAR STRUCTURES .

    $end            reduce using rule 10 (STRUCTURES -> VAR STRUCTURES .)
    CLOSE_BRACES    reduce using rule 10 (STRUCTURES -> VAR STRUCTURES .)


state 29

    (11) STRUCTURES -> FUNCTION STRUCTURES .

    $end            reduce using rule 11 (STRUCTURES -> FUNCTION STRUCTURES .)
    CLOSE_BRACES    reduce using rule 11 (STRUCTURES -> FUNCTION STRUCTURES .)


state 30

    (23) FOR_LOOP -> FOR OPEN_PARENTHESIS . EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) EXP -> . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    EXP                            shift and go to state 40
    VALUE                          shift and go to state 41
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 31

    (22) DO_WHILE_LOOP -> DO OPEN_BRACES . STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . empty
    (23) FOR_LOOP -> . FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (21) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (20) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (18) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (17) OUTPUT -> . PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS
    (15) INPUT -> . ID COMMA INPUT
    (16) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> . ID COMMA VAR
    (14) VAR -> . ID IS_VALUE EXP
    (24) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (1) empty -> .

    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ELSE            shift and go to state 16
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    FUNC            shift and go to state 20
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    STRUCTURES                     shift and go to state 45
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    empty                          shift and go to state 12

state 32

    (21) WHILE_LOOP -> WHILE OPEN_PARENTHESIS . EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) EXP -> . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    EXP                            shift and go to state 46
    VALUE                          shift and go to state 41
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 33

    (20) ELSE_CONDITIONAL -> ELSE OPEN_BRACES . STRUCTURES CLOSE_BRACES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . empty
    (23) FOR_LOOP -> . FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (21) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (20) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (18) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (17) OUTPUT -> . PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS
    (15) INPUT -> . ID COMMA INPUT
    (16) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> . ID COMMA VAR
    (14) VAR -> . ID IS_VALUE EXP
    (24) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (1) empty -> .

    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ELSE            shift and go to state 16
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    FUNC            shift and go to state 20
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    STRUCTURES                     shift and go to state 47
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    empty                          shift and go to state 12

state 34

    (18) IF_CONDITIONAL -> IF OPEN_PARENTHESIS . EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> IF OPEN_PARENTHESIS . EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) EXP -> . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    EXP                            shift and go to state 48
    VALUE                          shift and go to state 41
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 35

    (17) OUTPUT -> PRINT OPEN_PARENTHESIS . ID CLOSE_PARENTHESIS

    ID              shift and go to state 49


state 36

    (15) INPUT -> ID COMMA . INPUT
    (13) VAR -> ID COMMA . VAR
    (15) INPUT -> . ID COMMA INPUT
    (16) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> . ID COMMA VAR
    (14) VAR -> . ID IS_VALUE EXP

    ID              shift and go to state 19

    INPUT                          shift and go to state 50
    VAR                            shift and go to state 51

state 37

    (16) INPUT -> ID IS_VALUE . READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> ID IS_VALUE . EXP
    (25) EXP -> . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    READ            shift and go to state 52
    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    EXP                            shift and go to state 53
    VALUE                          shift and go to state 41
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 38

    (24) FUNCTION -> FUNC ID . OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_PARENTHESIS shift and go to state 54


state 39

    (28) VALUE -> OPEN_PARENTHESIS . VALUE CLOSE_PARENTHESIS
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    VALUE                          shift and go to state 55
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 40

    (23) FOR_LOOP -> FOR OPEN_PARENTHESIS EXP . COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    COLON           shift and go to state 56


state 41

    (25) EXP -> VALUE .
    (30) EARITH -> VALUE . MULOP VALUE
    (31) EARITH -> VALUE . DIVOP VALUE
    (32) EARITH -> VALUE . SUMOP VALUE
    (33) EARITH -> VALUE . SUBOP VALUE
    (34) ELOGIC -> VALUE . EQ VALUE
    (35) ELOGIC -> VALUE . NE VALUE
    (36) ELOGIC -> VALUE . LT VALUE
    (37) ELOGIC -> VALUE . GT VALUE
    (38) ELOGIC -> VALUE . LE VALUE
    (39) ELOGIC -> VALUE . GE VALUE
    (40) ELOGIC -> VALUE . AND VALUE
    (41) ELOGIC -> VALUE . OR VALUE

    COLON           reduce using rule 25 (EXP -> VALUE .)
    CLOSE_PARENTHESIS reduce using rule 25 (EXP -> VALUE .)
    FOR             reduce using rule 25 (EXP -> VALUE .)
    DO              reduce using rule 25 (EXP -> VALUE .)
    WHILE           reduce using rule 25 (EXP -> VALUE .)
    ELSE            reduce using rule 25 (EXP -> VALUE .)
    IF              reduce using rule 25 (EXP -> VALUE .)
    PRINT           reduce using rule 25 (EXP -> VALUE .)
    ID              reduce using rule 25 (EXP -> VALUE .)
    FUNC            reduce using rule 25 (EXP -> VALUE .)
    $end            reduce using rule 25 (EXP -> VALUE .)
    CLOSE_BRACES    reduce using rule 25 (EXP -> VALUE .)
    MULOP           shift and go to state 57
    DIVOP           shift and go to state 58
    SUMOP           shift and go to state 59
    SUBOP           shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68


state 42

    (26) VALUE -> EARITH .

    MULOP           reduce using rule 26 (VALUE -> EARITH .)
    DIVOP           reduce using rule 26 (VALUE -> EARITH .)
    SUMOP           reduce using rule 26 (VALUE -> EARITH .)
    SUBOP           reduce using rule 26 (VALUE -> EARITH .)
    EQ              reduce using rule 26 (VALUE -> EARITH .)
    NE              reduce using rule 26 (VALUE -> EARITH .)
    LT              reduce using rule 26 (VALUE -> EARITH .)
    GT              reduce using rule 26 (VALUE -> EARITH .)
    LE              reduce using rule 26 (VALUE -> EARITH .)
    GE              reduce using rule 26 (VALUE -> EARITH .)
    AND             reduce using rule 26 (VALUE -> EARITH .)
    OR              reduce using rule 26 (VALUE -> EARITH .)
    COLON           reduce using rule 26 (VALUE -> EARITH .)
    CLOSE_PARENTHESIS reduce using rule 26 (VALUE -> EARITH .)
    FOR             reduce using rule 26 (VALUE -> EARITH .)
    DO              reduce using rule 26 (VALUE -> EARITH .)
    WHILE           reduce using rule 26 (VALUE -> EARITH .)
    ELSE            reduce using rule 26 (VALUE -> EARITH .)
    IF              reduce using rule 26 (VALUE -> EARITH .)
    PRINT           reduce using rule 26 (VALUE -> EARITH .)
    ID              reduce using rule 26 (VALUE -> EARITH .)
    FUNC            reduce using rule 26 (VALUE -> EARITH .)
    $end            reduce using rule 26 (VALUE -> EARITH .)
    CLOSE_BRACES    reduce using rule 26 (VALUE -> EARITH .)


state 43

    (27) VALUE -> ELOGIC .

    MULOP           reduce using rule 27 (VALUE -> ELOGIC .)
    DIVOP           reduce using rule 27 (VALUE -> ELOGIC .)
    SUMOP           reduce using rule 27 (VALUE -> ELOGIC .)
    SUBOP           reduce using rule 27 (VALUE -> ELOGIC .)
    EQ              reduce using rule 27 (VALUE -> ELOGIC .)
    NE              reduce using rule 27 (VALUE -> ELOGIC .)
    LT              reduce using rule 27 (VALUE -> ELOGIC .)
    GT              reduce using rule 27 (VALUE -> ELOGIC .)
    LE              reduce using rule 27 (VALUE -> ELOGIC .)
    GE              reduce using rule 27 (VALUE -> ELOGIC .)
    AND             reduce using rule 27 (VALUE -> ELOGIC .)
    OR              reduce using rule 27 (VALUE -> ELOGIC .)
    COLON           reduce using rule 27 (VALUE -> ELOGIC .)
    CLOSE_PARENTHESIS reduce using rule 27 (VALUE -> ELOGIC .)
    FOR             reduce using rule 27 (VALUE -> ELOGIC .)
    DO              reduce using rule 27 (VALUE -> ELOGIC .)
    WHILE           reduce using rule 27 (VALUE -> ELOGIC .)
    ELSE            reduce using rule 27 (VALUE -> ELOGIC .)
    IF              reduce using rule 27 (VALUE -> ELOGIC .)
    PRINT           reduce using rule 27 (VALUE -> ELOGIC .)
    ID              reduce using rule 27 (VALUE -> ELOGIC .)
    FUNC            reduce using rule 27 (VALUE -> ELOGIC .)
    $end            reduce using rule 27 (VALUE -> ELOGIC .)
    CLOSE_BRACES    reduce using rule 27 (VALUE -> ELOGIC .)


state 44

    (29) VALUE -> VAL .

    MULOP           reduce using rule 29 (VALUE -> VAL .)
    DIVOP           reduce using rule 29 (VALUE -> VAL .)
    SUMOP           reduce using rule 29 (VALUE -> VAL .)
    SUBOP           reduce using rule 29 (VALUE -> VAL .)
    EQ              reduce using rule 29 (VALUE -> VAL .)
    NE              reduce using rule 29 (VALUE -> VAL .)
    LT              reduce using rule 29 (VALUE -> VAL .)
    GT              reduce using rule 29 (VALUE -> VAL .)
    LE              reduce using rule 29 (VALUE -> VAL .)
    GE              reduce using rule 29 (VALUE -> VAL .)
    AND             reduce using rule 29 (VALUE -> VAL .)
    OR              reduce using rule 29 (VALUE -> VAL .)
    COLON           reduce using rule 29 (VALUE -> VAL .)
    CLOSE_PARENTHESIS reduce using rule 29 (VALUE -> VAL .)
    FOR             reduce using rule 29 (VALUE -> VAL .)
    DO              reduce using rule 29 (VALUE -> VAL .)
    WHILE           reduce using rule 29 (VALUE -> VAL .)
    ELSE            reduce using rule 29 (VALUE -> VAL .)
    IF              reduce using rule 29 (VALUE -> VAL .)
    PRINT           reduce using rule 29 (VALUE -> VAL .)
    ID              reduce using rule 29 (VALUE -> VAL .)
    FUNC            reduce using rule 29 (VALUE -> VAL .)
    $end            reduce using rule 29 (VALUE -> VAL .)
    CLOSE_BRACES    reduce using rule 29 (VALUE -> VAL .)


state 45

    (22) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES . CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS

    CLOSE_BRACES    shift and go to state 69


state 46

    (21) WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP . CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    CLOSE_PARENTHESIS shift and go to state 70


state 47

    (20) ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 71


state 48

    (18) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP . CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP . CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    CLOSE_PARENTHESIS shift and go to state 72


state 49

    (17) OUTPUT -> PRINT OPEN_PARENTHESIS ID . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 73


state 50

    (15) INPUT -> ID COMMA INPUT .

    FOR             reduce using rule 15 (INPUT -> ID COMMA INPUT .)
    DO              reduce using rule 15 (INPUT -> ID COMMA INPUT .)
    WHILE           reduce using rule 15 (INPUT -> ID COMMA INPUT .)
    ELSE            reduce using rule 15 (INPUT -> ID COMMA INPUT .)
    IF              reduce using rule 15 (INPUT -> ID COMMA INPUT .)
    PRINT           reduce using rule 15 (INPUT -> ID COMMA INPUT .)
    ID              reduce using rule 15 (INPUT -> ID COMMA INPUT .)
    FUNC            reduce using rule 15 (INPUT -> ID COMMA INPUT .)
    $end            reduce using rule 15 (INPUT -> ID COMMA INPUT .)
    CLOSE_BRACES    reduce using rule 15 (INPUT -> ID COMMA INPUT .)


state 51

    (13) VAR -> ID COMMA VAR .

    FOR             reduce using rule 13 (VAR -> ID COMMA VAR .)
    DO              reduce using rule 13 (VAR -> ID COMMA VAR .)
    WHILE           reduce using rule 13 (VAR -> ID COMMA VAR .)
    ELSE            reduce using rule 13 (VAR -> ID COMMA VAR .)
    IF              reduce using rule 13 (VAR -> ID COMMA VAR .)
    PRINT           reduce using rule 13 (VAR -> ID COMMA VAR .)
    ID              reduce using rule 13 (VAR -> ID COMMA VAR .)
    FUNC            reduce using rule 13 (VAR -> ID COMMA VAR .)
    $end            reduce using rule 13 (VAR -> ID COMMA VAR .)
    CLOSE_BRACES    reduce using rule 13 (VAR -> ID COMMA VAR .)


state 52

    (16) INPUT -> ID IS_VALUE READ . OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 74


state 53

    (14) VAR -> ID IS_VALUE EXP .

    FOR             reduce using rule 14 (VAR -> ID IS_VALUE EXP .)
    DO              reduce using rule 14 (VAR -> ID IS_VALUE EXP .)
    WHILE           reduce using rule 14 (VAR -> ID IS_VALUE EXP .)
    ELSE            reduce using rule 14 (VAR -> ID IS_VALUE EXP .)
    IF              reduce using rule 14 (VAR -> ID IS_VALUE EXP .)
    PRINT           reduce using rule 14 (VAR -> ID IS_VALUE EXP .)
    ID              reduce using rule 14 (VAR -> ID IS_VALUE EXP .)
    FUNC            reduce using rule 14 (VAR -> ID IS_VALUE EXP .)
    $end            reduce using rule 14 (VAR -> ID IS_VALUE EXP .)
    CLOSE_BRACES    reduce using rule 14 (VAR -> ID IS_VALUE EXP .)


state 54

    (24) FUNCTION -> FUNC ID OPEN_PARENTHESIS . CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    CLOSE_PARENTHESIS shift and go to state 75


state 55

    (28) VALUE -> OPEN_PARENTHESIS VALUE . CLOSE_PARENTHESIS
    (30) EARITH -> VALUE . MULOP VALUE
    (31) EARITH -> VALUE . DIVOP VALUE
    (32) EARITH -> VALUE . SUMOP VALUE
    (33) EARITH -> VALUE . SUBOP VALUE
    (34) ELOGIC -> VALUE . EQ VALUE
    (35) ELOGIC -> VALUE . NE VALUE
    (36) ELOGIC -> VALUE . LT VALUE
    (37) ELOGIC -> VALUE . GT VALUE
    (38) ELOGIC -> VALUE . LE VALUE
    (39) ELOGIC -> VALUE . GE VALUE
    (40) ELOGIC -> VALUE . AND VALUE
    (41) ELOGIC -> VALUE . OR VALUE

    CLOSE_PARENTHESIS shift and go to state 76
    MULOP           shift and go to state 57
    DIVOP           shift and go to state 58
    SUMOP           shift and go to state 59
    SUBOP           shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68


state 56

    (23) FOR_LOOP -> FOR OPEN_PARENTHESIS EXP COLON . EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) EXP -> . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    EXP                            shift and go to state 77
    VALUE                          shift and go to state 41
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 57

    (30) EARITH -> VALUE MULOP . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    VALUE                          shift and go to state 78
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 58

    (31) EARITH -> VALUE DIVOP . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    VALUE                          shift and go to state 79
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 59

    (32) EARITH -> VALUE SUMOP . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    VALUE                          shift and go to state 80
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 60

    (33) EARITH -> VALUE SUBOP . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    VALUE                          shift and go to state 81
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 61

    (34) ELOGIC -> VALUE EQ . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    VALUE                          shift and go to state 82
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 62

    (35) ELOGIC -> VALUE NE . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    VALUE                          shift and go to state 83
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 63

    (36) ELOGIC -> VALUE LT . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    VALUE                          shift and go to state 84
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 64

    (37) ELOGIC -> VALUE GT . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    VALUE                          shift and go to state 85
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 65

    (38) ELOGIC -> VALUE LE . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    VALUE                          shift and go to state 86
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 66

    (39) ELOGIC -> VALUE GE . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    VALUE                          shift and go to state 87
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 67

    (40) ELOGIC -> VALUE AND . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    VALUE                          shift and go to state 88
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 68

    (41) ELOGIC -> VALUE OR . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    VALUE                          shift and go to state 89
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 69

    (22) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS

    WHILE           shift and go to state 90


state 70

    (21) WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS . OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_BRACES     shift and go to state 91


state 71

    (20) ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .

    FOR             reduce using rule 20 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    DO              reduce using rule 20 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    WHILE           reduce using rule 20 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ELSE            reduce using rule 20 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    IF              reduce using rule 20 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    PRINT           reduce using rule 20 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ID              reduce using rule 20 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    FUNC            reduce using rule 20 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    $end            reduce using rule 20 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 20 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)


state 72

    (18) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS . OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS . OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_BRACES     shift and go to state 92


state 73

    (17) OUTPUT -> PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS .

    FOR             reduce using rule 17 (OUTPUT -> PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS .)
    DO              reduce using rule 17 (OUTPUT -> PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 17 (OUTPUT -> PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 17 (OUTPUT -> PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS .)
    IF              reduce using rule 17 (OUTPUT -> PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 17 (OUTPUT -> PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS .)
    ID              reduce using rule 17 (OUTPUT -> PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS .)
    FUNC            reduce using rule 17 (OUTPUT -> PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS .)
    $end            reduce using rule 17 (OUTPUT -> PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS .)
    CLOSE_BRACES    reduce using rule 17 (OUTPUT -> PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS .)


state 74

    (16) INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 93


state 75

    (24) FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS . OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_BRACES     shift and go to state 94


state 76

    (28) VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .

    MULOP           reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    DIVOP           reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    SUMOP           reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    SUBOP           reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    EQ              reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    NE              reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    LT              reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    GT              reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    LE              reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    GE              reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    AND             reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    OR              reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    COLON           reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    FOR             reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    DO              reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    IF              reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    ID              reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    FUNC            reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    $end            reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    CLOSE_BRACES    reduce using rule 28 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)


state 77

    (23) FOR_LOOP -> FOR OPEN_PARENTHESIS EXP COLON EXP . CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    CLOSE_PARENTHESIS shift and go to state 95


state 78

    (30) EARITH -> VALUE MULOP VALUE .
    (30) EARITH -> VALUE . MULOP VALUE
    (31) EARITH -> VALUE . DIVOP VALUE
    (32) EARITH -> VALUE . SUMOP VALUE
    (33) EARITH -> VALUE . SUBOP VALUE
    (34) ELOGIC -> VALUE . EQ VALUE
    (35) ELOGIC -> VALUE . NE VALUE
    (36) ELOGIC -> VALUE . LT VALUE
    (37) ELOGIC -> VALUE . GT VALUE
    (38) ELOGIC -> VALUE . LE VALUE
    (39) ELOGIC -> VALUE . GE VALUE
    (40) ELOGIC -> VALUE . AND VALUE
    (41) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COLON           reduce using rule 30 (EARITH -> VALUE MULOP VALUE .)
    CLOSE_PARENTHESIS reduce using rule 30 (EARITH -> VALUE MULOP VALUE .)
    FOR             reduce using rule 30 (EARITH -> VALUE MULOP VALUE .)
    DO              reduce using rule 30 (EARITH -> VALUE MULOP VALUE .)
    WHILE           reduce using rule 30 (EARITH -> VALUE MULOP VALUE .)
    ELSE            reduce using rule 30 (EARITH -> VALUE MULOP VALUE .)
    IF              reduce using rule 30 (EARITH -> VALUE MULOP VALUE .)
    PRINT           reduce using rule 30 (EARITH -> VALUE MULOP VALUE .)
    ID              reduce using rule 30 (EARITH -> VALUE MULOP VALUE .)
    FUNC            reduce using rule 30 (EARITH -> VALUE MULOP VALUE .)
    $end            reduce using rule 30 (EARITH -> VALUE MULOP VALUE .)
    CLOSE_BRACES    reduce using rule 30 (EARITH -> VALUE MULOP VALUE .)
    MULOP           shift and go to state 57
    DIVOP           shift and go to state 58
    SUMOP           shift and go to state 59
    SUBOP           shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

  ! MULOP           [ reduce using rule 30 (EARITH -> VALUE MULOP VALUE .) ]
  ! DIVOP           [ reduce using rule 30 (EARITH -> VALUE MULOP VALUE .) ]
  ! SUMOP           [ reduce using rule 30 (EARITH -> VALUE MULOP VALUE .) ]
  ! SUBOP           [ reduce using rule 30 (EARITH -> VALUE MULOP VALUE .) ]
  ! EQ              [ reduce using rule 30 (EARITH -> VALUE MULOP VALUE .) ]
  ! NE              [ reduce using rule 30 (EARITH -> VALUE MULOP VALUE .) ]
  ! LT              [ reduce using rule 30 (EARITH -> VALUE MULOP VALUE .) ]
  ! GT              [ reduce using rule 30 (EARITH -> VALUE MULOP VALUE .) ]
  ! LE              [ reduce using rule 30 (EARITH -> VALUE MULOP VALUE .) ]
  ! GE              [ reduce using rule 30 (EARITH -> VALUE MULOP VALUE .) ]
  ! AND             [ reduce using rule 30 (EARITH -> VALUE MULOP VALUE .) ]
  ! OR              [ reduce using rule 30 (EARITH -> VALUE MULOP VALUE .) ]


state 79

    (31) EARITH -> VALUE DIVOP VALUE .
    (30) EARITH -> VALUE . MULOP VALUE
    (31) EARITH -> VALUE . DIVOP VALUE
    (32) EARITH -> VALUE . SUMOP VALUE
    (33) EARITH -> VALUE . SUBOP VALUE
    (34) ELOGIC -> VALUE . EQ VALUE
    (35) ELOGIC -> VALUE . NE VALUE
    (36) ELOGIC -> VALUE . LT VALUE
    (37) ELOGIC -> VALUE . GT VALUE
    (38) ELOGIC -> VALUE . LE VALUE
    (39) ELOGIC -> VALUE . GE VALUE
    (40) ELOGIC -> VALUE . AND VALUE
    (41) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COLON           reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .)
    CLOSE_PARENTHESIS reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .)
    FOR             reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .)
    DO              reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .)
    WHILE           reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .)
    ELSE            reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .)
    IF              reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .)
    PRINT           reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .)
    ID              reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .)
    FUNC            reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .)
    $end            reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .)
    CLOSE_BRACES    reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .)
    MULOP           shift and go to state 57
    DIVOP           shift and go to state 58
    SUMOP           shift and go to state 59
    SUBOP           shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

  ! MULOP           [ reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .) ]
  ! DIVOP           [ reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .) ]
  ! SUMOP           [ reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .) ]
  ! SUBOP           [ reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .) ]
  ! EQ              [ reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .) ]
  ! NE              [ reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .) ]
  ! LT              [ reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .) ]
  ! GT              [ reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .) ]
  ! LE              [ reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .) ]
  ! GE              [ reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .) ]
  ! AND             [ reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .) ]
  ! OR              [ reduce using rule 31 (EARITH -> VALUE DIVOP VALUE .) ]


state 80

    (32) EARITH -> VALUE SUMOP VALUE .
    (30) EARITH -> VALUE . MULOP VALUE
    (31) EARITH -> VALUE . DIVOP VALUE
    (32) EARITH -> VALUE . SUMOP VALUE
    (33) EARITH -> VALUE . SUBOP VALUE
    (34) ELOGIC -> VALUE . EQ VALUE
    (35) ELOGIC -> VALUE . NE VALUE
    (36) ELOGIC -> VALUE . LT VALUE
    (37) ELOGIC -> VALUE . GT VALUE
    (38) ELOGIC -> VALUE . LE VALUE
    (39) ELOGIC -> VALUE . GE VALUE
    (40) ELOGIC -> VALUE . AND VALUE
    (41) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COLON           reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .)
    CLOSE_PARENTHESIS reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .)
    FOR             reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .)
    DO              reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .)
    WHILE           reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .)
    ELSE            reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .)
    IF              reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .)
    PRINT           reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .)
    ID              reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .)
    FUNC            reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .)
    $end            reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .)
    CLOSE_BRACES    reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .)
    MULOP           shift and go to state 57
    DIVOP           shift and go to state 58
    SUMOP           shift and go to state 59
    SUBOP           shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

  ! MULOP           [ reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .) ]
  ! DIVOP           [ reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .) ]
  ! SUMOP           [ reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .) ]
  ! SUBOP           [ reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .) ]
  ! EQ              [ reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .) ]
  ! NE              [ reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .) ]
  ! LT              [ reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .) ]
  ! GT              [ reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .) ]
  ! LE              [ reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .) ]
  ! GE              [ reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .) ]
  ! AND             [ reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .) ]
  ! OR              [ reduce using rule 32 (EARITH -> VALUE SUMOP VALUE .) ]


state 81

    (33) EARITH -> VALUE SUBOP VALUE .
    (30) EARITH -> VALUE . MULOP VALUE
    (31) EARITH -> VALUE . DIVOP VALUE
    (32) EARITH -> VALUE . SUMOP VALUE
    (33) EARITH -> VALUE . SUBOP VALUE
    (34) ELOGIC -> VALUE . EQ VALUE
    (35) ELOGIC -> VALUE . NE VALUE
    (36) ELOGIC -> VALUE . LT VALUE
    (37) ELOGIC -> VALUE . GT VALUE
    (38) ELOGIC -> VALUE . LE VALUE
    (39) ELOGIC -> VALUE . GE VALUE
    (40) ELOGIC -> VALUE . AND VALUE
    (41) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COLON           reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .)
    CLOSE_PARENTHESIS reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .)
    FOR             reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .)
    DO              reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .)
    WHILE           reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .)
    ELSE            reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .)
    IF              reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .)
    PRINT           reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .)
    ID              reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .)
    FUNC            reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .)
    $end            reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .)
    CLOSE_BRACES    reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .)
    MULOP           shift and go to state 57
    DIVOP           shift and go to state 58
    SUMOP           shift and go to state 59
    SUBOP           shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

  ! MULOP           [ reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .) ]
  ! DIVOP           [ reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .) ]
  ! SUMOP           [ reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .) ]
  ! SUBOP           [ reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .) ]
  ! EQ              [ reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .) ]
  ! NE              [ reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .) ]
  ! LT              [ reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .) ]
  ! GT              [ reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .) ]
  ! LE              [ reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .) ]
  ! GE              [ reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .) ]
  ! AND             [ reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .) ]
  ! OR              [ reduce using rule 33 (EARITH -> VALUE SUBOP VALUE .) ]


state 82

    (34) ELOGIC -> VALUE EQ VALUE .
    (30) EARITH -> VALUE . MULOP VALUE
    (31) EARITH -> VALUE . DIVOP VALUE
    (32) EARITH -> VALUE . SUMOP VALUE
    (33) EARITH -> VALUE . SUBOP VALUE
    (34) ELOGIC -> VALUE . EQ VALUE
    (35) ELOGIC -> VALUE . NE VALUE
    (36) ELOGIC -> VALUE . LT VALUE
    (37) ELOGIC -> VALUE . GT VALUE
    (38) ELOGIC -> VALUE . LE VALUE
    (39) ELOGIC -> VALUE . GE VALUE
    (40) ELOGIC -> VALUE . AND VALUE
    (41) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COLON           reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .)
    CLOSE_PARENTHESIS reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .)
    FOR             reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .)
    DO              reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .)
    WHILE           reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .)
    ELSE            reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .)
    IF              reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .)
    PRINT           reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .)
    ID              reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .)
    FUNC            reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .)
    $end            reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .)
    CLOSE_BRACES    reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .)
    MULOP           shift and go to state 57
    DIVOP           shift and go to state 58
    SUMOP           shift and go to state 59
    SUBOP           shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

  ! MULOP           [ reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .) ]
  ! DIVOP           [ reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .) ]
  ! SUMOP           [ reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .) ]
  ! SUBOP           [ reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .) ]
  ! EQ              [ reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .) ]
  ! NE              [ reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .) ]
  ! LT              [ reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .) ]
  ! GT              [ reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .) ]
  ! LE              [ reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .) ]
  ! GE              [ reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .) ]
  ! AND             [ reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .) ]
  ! OR              [ reduce using rule 34 (ELOGIC -> VALUE EQ VALUE .) ]


state 83

    (35) ELOGIC -> VALUE NE VALUE .
    (30) EARITH -> VALUE . MULOP VALUE
    (31) EARITH -> VALUE . DIVOP VALUE
    (32) EARITH -> VALUE . SUMOP VALUE
    (33) EARITH -> VALUE . SUBOP VALUE
    (34) ELOGIC -> VALUE . EQ VALUE
    (35) ELOGIC -> VALUE . NE VALUE
    (36) ELOGIC -> VALUE . LT VALUE
    (37) ELOGIC -> VALUE . GT VALUE
    (38) ELOGIC -> VALUE . LE VALUE
    (39) ELOGIC -> VALUE . GE VALUE
    (40) ELOGIC -> VALUE . AND VALUE
    (41) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COLON           reduce using rule 35 (ELOGIC -> VALUE NE VALUE .)
    CLOSE_PARENTHESIS reduce using rule 35 (ELOGIC -> VALUE NE VALUE .)
    FOR             reduce using rule 35 (ELOGIC -> VALUE NE VALUE .)
    DO              reduce using rule 35 (ELOGIC -> VALUE NE VALUE .)
    WHILE           reduce using rule 35 (ELOGIC -> VALUE NE VALUE .)
    ELSE            reduce using rule 35 (ELOGIC -> VALUE NE VALUE .)
    IF              reduce using rule 35 (ELOGIC -> VALUE NE VALUE .)
    PRINT           reduce using rule 35 (ELOGIC -> VALUE NE VALUE .)
    ID              reduce using rule 35 (ELOGIC -> VALUE NE VALUE .)
    FUNC            reduce using rule 35 (ELOGIC -> VALUE NE VALUE .)
    $end            reduce using rule 35 (ELOGIC -> VALUE NE VALUE .)
    CLOSE_BRACES    reduce using rule 35 (ELOGIC -> VALUE NE VALUE .)
    MULOP           shift and go to state 57
    DIVOP           shift and go to state 58
    SUMOP           shift and go to state 59
    SUBOP           shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

  ! MULOP           [ reduce using rule 35 (ELOGIC -> VALUE NE VALUE .) ]
  ! DIVOP           [ reduce using rule 35 (ELOGIC -> VALUE NE VALUE .) ]
  ! SUMOP           [ reduce using rule 35 (ELOGIC -> VALUE NE VALUE .) ]
  ! SUBOP           [ reduce using rule 35 (ELOGIC -> VALUE NE VALUE .) ]
  ! EQ              [ reduce using rule 35 (ELOGIC -> VALUE NE VALUE .) ]
  ! NE              [ reduce using rule 35 (ELOGIC -> VALUE NE VALUE .) ]
  ! LT              [ reduce using rule 35 (ELOGIC -> VALUE NE VALUE .) ]
  ! GT              [ reduce using rule 35 (ELOGIC -> VALUE NE VALUE .) ]
  ! LE              [ reduce using rule 35 (ELOGIC -> VALUE NE VALUE .) ]
  ! GE              [ reduce using rule 35 (ELOGIC -> VALUE NE VALUE .) ]
  ! AND             [ reduce using rule 35 (ELOGIC -> VALUE NE VALUE .) ]
  ! OR              [ reduce using rule 35 (ELOGIC -> VALUE NE VALUE .) ]


state 84

    (36) ELOGIC -> VALUE LT VALUE .
    (30) EARITH -> VALUE . MULOP VALUE
    (31) EARITH -> VALUE . DIVOP VALUE
    (32) EARITH -> VALUE . SUMOP VALUE
    (33) EARITH -> VALUE . SUBOP VALUE
    (34) ELOGIC -> VALUE . EQ VALUE
    (35) ELOGIC -> VALUE . NE VALUE
    (36) ELOGIC -> VALUE . LT VALUE
    (37) ELOGIC -> VALUE . GT VALUE
    (38) ELOGIC -> VALUE . LE VALUE
    (39) ELOGIC -> VALUE . GE VALUE
    (40) ELOGIC -> VALUE . AND VALUE
    (41) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COLON           reduce using rule 36 (ELOGIC -> VALUE LT VALUE .)
    CLOSE_PARENTHESIS reduce using rule 36 (ELOGIC -> VALUE LT VALUE .)
    FOR             reduce using rule 36 (ELOGIC -> VALUE LT VALUE .)
    DO              reduce using rule 36 (ELOGIC -> VALUE LT VALUE .)
    WHILE           reduce using rule 36 (ELOGIC -> VALUE LT VALUE .)
    ELSE            reduce using rule 36 (ELOGIC -> VALUE LT VALUE .)
    IF              reduce using rule 36 (ELOGIC -> VALUE LT VALUE .)
    PRINT           reduce using rule 36 (ELOGIC -> VALUE LT VALUE .)
    ID              reduce using rule 36 (ELOGIC -> VALUE LT VALUE .)
    FUNC            reduce using rule 36 (ELOGIC -> VALUE LT VALUE .)
    $end            reduce using rule 36 (ELOGIC -> VALUE LT VALUE .)
    CLOSE_BRACES    reduce using rule 36 (ELOGIC -> VALUE LT VALUE .)
    MULOP           shift and go to state 57
    DIVOP           shift and go to state 58
    SUMOP           shift and go to state 59
    SUBOP           shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

  ! MULOP           [ reduce using rule 36 (ELOGIC -> VALUE LT VALUE .) ]
  ! DIVOP           [ reduce using rule 36 (ELOGIC -> VALUE LT VALUE .) ]
  ! SUMOP           [ reduce using rule 36 (ELOGIC -> VALUE LT VALUE .) ]
  ! SUBOP           [ reduce using rule 36 (ELOGIC -> VALUE LT VALUE .) ]
  ! EQ              [ reduce using rule 36 (ELOGIC -> VALUE LT VALUE .) ]
  ! NE              [ reduce using rule 36 (ELOGIC -> VALUE LT VALUE .) ]
  ! LT              [ reduce using rule 36 (ELOGIC -> VALUE LT VALUE .) ]
  ! GT              [ reduce using rule 36 (ELOGIC -> VALUE LT VALUE .) ]
  ! LE              [ reduce using rule 36 (ELOGIC -> VALUE LT VALUE .) ]
  ! GE              [ reduce using rule 36 (ELOGIC -> VALUE LT VALUE .) ]
  ! AND             [ reduce using rule 36 (ELOGIC -> VALUE LT VALUE .) ]
  ! OR              [ reduce using rule 36 (ELOGIC -> VALUE LT VALUE .) ]


state 85

    (37) ELOGIC -> VALUE GT VALUE .
    (30) EARITH -> VALUE . MULOP VALUE
    (31) EARITH -> VALUE . DIVOP VALUE
    (32) EARITH -> VALUE . SUMOP VALUE
    (33) EARITH -> VALUE . SUBOP VALUE
    (34) ELOGIC -> VALUE . EQ VALUE
    (35) ELOGIC -> VALUE . NE VALUE
    (36) ELOGIC -> VALUE . LT VALUE
    (37) ELOGIC -> VALUE . GT VALUE
    (38) ELOGIC -> VALUE . LE VALUE
    (39) ELOGIC -> VALUE . GE VALUE
    (40) ELOGIC -> VALUE . AND VALUE
    (41) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COLON           reduce using rule 37 (ELOGIC -> VALUE GT VALUE .)
    CLOSE_PARENTHESIS reduce using rule 37 (ELOGIC -> VALUE GT VALUE .)
    FOR             reduce using rule 37 (ELOGIC -> VALUE GT VALUE .)
    DO              reduce using rule 37 (ELOGIC -> VALUE GT VALUE .)
    WHILE           reduce using rule 37 (ELOGIC -> VALUE GT VALUE .)
    ELSE            reduce using rule 37 (ELOGIC -> VALUE GT VALUE .)
    IF              reduce using rule 37 (ELOGIC -> VALUE GT VALUE .)
    PRINT           reduce using rule 37 (ELOGIC -> VALUE GT VALUE .)
    ID              reduce using rule 37 (ELOGIC -> VALUE GT VALUE .)
    FUNC            reduce using rule 37 (ELOGIC -> VALUE GT VALUE .)
    $end            reduce using rule 37 (ELOGIC -> VALUE GT VALUE .)
    CLOSE_BRACES    reduce using rule 37 (ELOGIC -> VALUE GT VALUE .)
    MULOP           shift and go to state 57
    DIVOP           shift and go to state 58
    SUMOP           shift and go to state 59
    SUBOP           shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

  ! MULOP           [ reduce using rule 37 (ELOGIC -> VALUE GT VALUE .) ]
  ! DIVOP           [ reduce using rule 37 (ELOGIC -> VALUE GT VALUE .) ]
  ! SUMOP           [ reduce using rule 37 (ELOGIC -> VALUE GT VALUE .) ]
  ! SUBOP           [ reduce using rule 37 (ELOGIC -> VALUE GT VALUE .) ]
  ! EQ              [ reduce using rule 37 (ELOGIC -> VALUE GT VALUE .) ]
  ! NE              [ reduce using rule 37 (ELOGIC -> VALUE GT VALUE .) ]
  ! LT              [ reduce using rule 37 (ELOGIC -> VALUE GT VALUE .) ]
  ! GT              [ reduce using rule 37 (ELOGIC -> VALUE GT VALUE .) ]
  ! LE              [ reduce using rule 37 (ELOGIC -> VALUE GT VALUE .) ]
  ! GE              [ reduce using rule 37 (ELOGIC -> VALUE GT VALUE .) ]
  ! AND             [ reduce using rule 37 (ELOGIC -> VALUE GT VALUE .) ]
  ! OR              [ reduce using rule 37 (ELOGIC -> VALUE GT VALUE .) ]


state 86

    (38) ELOGIC -> VALUE LE VALUE .
    (30) EARITH -> VALUE . MULOP VALUE
    (31) EARITH -> VALUE . DIVOP VALUE
    (32) EARITH -> VALUE . SUMOP VALUE
    (33) EARITH -> VALUE . SUBOP VALUE
    (34) ELOGIC -> VALUE . EQ VALUE
    (35) ELOGIC -> VALUE . NE VALUE
    (36) ELOGIC -> VALUE . LT VALUE
    (37) ELOGIC -> VALUE . GT VALUE
    (38) ELOGIC -> VALUE . LE VALUE
    (39) ELOGIC -> VALUE . GE VALUE
    (40) ELOGIC -> VALUE . AND VALUE
    (41) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COLON           reduce using rule 38 (ELOGIC -> VALUE LE VALUE .)
    CLOSE_PARENTHESIS reduce using rule 38 (ELOGIC -> VALUE LE VALUE .)
    FOR             reduce using rule 38 (ELOGIC -> VALUE LE VALUE .)
    DO              reduce using rule 38 (ELOGIC -> VALUE LE VALUE .)
    WHILE           reduce using rule 38 (ELOGIC -> VALUE LE VALUE .)
    ELSE            reduce using rule 38 (ELOGIC -> VALUE LE VALUE .)
    IF              reduce using rule 38 (ELOGIC -> VALUE LE VALUE .)
    PRINT           reduce using rule 38 (ELOGIC -> VALUE LE VALUE .)
    ID              reduce using rule 38 (ELOGIC -> VALUE LE VALUE .)
    FUNC            reduce using rule 38 (ELOGIC -> VALUE LE VALUE .)
    $end            reduce using rule 38 (ELOGIC -> VALUE LE VALUE .)
    CLOSE_BRACES    reduce using rule 38 (ELOGIC -> VALUE LE VALUE .)
    MULOP           shift and go to state 57
    DIVOP           shift and go to state 58
    SUMOP           shift and go to state 59
    SUBOP           shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

  ! MULOP           [ reduce using rule 38 (ELOGIC -> VALUE LE VALUE .) ]
  ! DIVOP           [ reduce using rule 38 (ELOGIC -> VALUE LE VALUE .) ]
  ! SUMOP           [ reduce using rule 38 (ELOGIC -> VALUE LE VALUE .) ]
  ! SUBOP           [ reduce using rule 38 (ELOGIC -> VALUE LE VALUE .) ]
  ! EQ              [ reduce using rule 38 (ELOGIC -> VALUE LE VALUE .) ]
  ! NE              [ reduce using rule 38 (ELOGIC -> VALUE LE VALUE .) ]
  ! LT              [ reduce using rule 38 (ELOGIC -> VALUE LE VALUE .) ]
  ! GT              [ reduce using rule 38 (ELOGIC -> VALUE LE VALUE .) ]
  ! LE              [ reduce using rule 38 (ELOGIC -> VALUE LE VALUE .) ]
  ! GE              [ reduce using rule 38 (ELOGIC -> VALUE LE VALUE .) ]
  ! AND             [ reduce using rule 38 (ELOGIC -> VALUE LE VALUE .) ]
  ! OR              [ reduce using rule 38 (ELOGIC -> VALUE LE VALUE .) ]


state 87

    (39) ELOGIC -> VALUE GE VALUE .
    (30) EARITH -> VALUE . MULOP VALUE
    (31) EARITH -> VALUE . DIVOP VALUE
    (32) EARITH -> VALUE . SUMOP VALUE
    (33) EARITH -> VALUE . SUBOP VALUE
    (34) ELOGIC -> VALUE . EQ VALUE
    (35) ELOGIC -> VALUE . NE VALUE
    (36) ELOGIC -> VALUE . LT VALUE
    (37) ELOGIC -> VALUE . GT VALUE
    (38) ELOGIC -> VALUE . LE VALUE
    (39) ELOGIC -> VALUE . GE VALUE
    (40) ELOGIC -> VALUE . AND VALUE
    (41) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COLON           reduce using rule 39 (ELOGIC -> VALUE GE VALUE .)
    CLOSE_PARENTHESIS reduce using rule 39 (ELOGIC -> VALUE GE VALUE .)
    FOR             reduce using rule 39 (ELOGIC -> VALUE GE VALUE .)
    DO              reduce using rule 39 (ELOGIC -> VALUE GE VALUE .)
    WHILE           reduce using rule 39 (ELOGIC -> VALUE GE VALUE .)
    ELSE            reduce using rule 39 (ELOGIC -> VALUE GE VALUE .)
    IF              reduce using rule 39 (ELOGIC -> VALUE GE VALUE .)
    PRINT           reduce using rule 39 (ELOGIC -> VALUE GE VALUE .)
    ID              reduce using rule 39 (ELOGIC -> VALUE GE VALUE .)
    FUNC            reduce using rule 39 (ELOGIC -> VALUE GE VALUE .)
    $end            reduce using rule 39 (ELOGIC -> VALUE GE VALUE .)
    CLOSE_BRACES    reduce using rule 39 (ELOGIC -> VALUE GE VALUE .)
    MULOP           shift and go to state 57
    DIVOP           shift and go to state 58
    SUMOP           shift and go to state 59
    SUBOP           shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

  ! MULOP           [ reduce using rule 39 (ELOGIC -> VALUE GE VALUE .) ]
  ! DIVOP           [ reduce using rule 39 (ELOGIC -> VALUE GE VALUE .) ]
  ! SUMOP           [ reduce using rule 39 (ELOGIC -> VALUE GE VALUE .) ]
  ! SUBOP           [ reduce using rule 39 (ELOGIC -> VALUE GE VALUE .) ]
  ! EQ              [ reduce using rule 39 (ELOGIC -> VALUE GE VALUE .) ]
  ! NE              [ reduce using rule 39 (ELOGIC -> VALUE GE VALUE .) ]
  ! LT              [ reduce using rule 39 (ELOGIC -> VALUE GE VALUE .) ]
  ! GT              [ reduce using rule 39 (ELOGIC -> VALUE GE VALUE .) ]
  ! LE              [ reduce using rule 39 (ELOGIC -> VALUE GE VALUE .) ]
  ! GE              [ reduce using rule 39 (ELOGIC -> VALUE GE VALUE .) ]
  ! AND             [ reduce using rule 39 (ELOGIC -> VALUE GE VALUE .) ]
  ! OR              [ reduce using rule 39 (ELOGIC -> VALUE GE VALUE .) ]


state 88

    (40) ELOGIC -> VALUE AND VALUE .
    (30) EARITH -> VALUE . MULOP VALUE
    (31) EARITH -> VALUE . DIVOP VALUE
    (32) EARITH -> VALUE . SUMOP VALUE
    (33) EARITH -> VALUE . SUBOP VALUE
    (34) ELOGIC -> VALUE . EQ VALUE
    (35) ELOGIC -> VALUE . NE VALUE
    (36) ELOGIC -> VALUE . LT VALUE
    (37) ELOGIC -> VALUE . GT VALUE
    (38) ELOGIC -> VALUE . LE VALUE
    (39) ELOGIC -> VALUE . GE VALUE
    (40) ELOGIC -> VALUE . AND VALUE
    (41) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COLON           reduce using rule 40 (ELOGIC -> VALUE AND VALUE .)
    CLOSE_PARENTHESIS reduce using rule 40 (ELOGIC -> VALUE AND VALUE .)
    FOR             reduce using rule 40 (ELOGIC -> VALUE AND VALUE .)
    DO              reduce using rule 40 (ELOGIC -> VALUE AND VALUE .)
    WHILE           reduce using rule 40 (ELOGIC -> VALUE AND VALUE .)
    ELSE            reduce using rule 40 (ELOGIC -> VALUE AND VALUE .)
    IF              reduce using rule 40 (ELOGIC -> VALUE AND VALUE .)
    PRINT           reduce using rule 40 (ELOGIC -> VALUE AND VALUE .)
    ID              reduce using rule 40 (ELOGIC -> VALUE AND VALUE .)
    FUNC            reduce using rule 40 (ELOGIC -> VALUE AND VALUE .)
    $end            reduce using rule 40 (ELOGIC -> VALUE AND VALUE .)
    CLOSE_BRACES    reduce using rule 40 (ELOGIC -> VALUE AND VALUE .)
    MULOP           shift and go to state 57
    DIVOP           shift and go to state 58
    SUMOP           shift and go to state 59
    SUBOP           shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

  ! MULOP           [ reduce using rule 40 (ELOGIC -> VALUE AND VALUE .) ]
  ! DIVOP           [ reduce using rule 40 (ELOGIC -> VALUE AND VALUE .) ]
  ! SUMOP           [ reduce using rule 40 (ELOGIC -> VALUE AND VALUE .) ]
  ! SUBOP           [ reduce using rule 40 (ELOGIC -> VALUE AND VALUE .) ]
  ! EQ              [ reduce using rule 40 (ELOGIC -> VALUE AND VALUE .) ]
  ! NE              [ reduce using rule 40 (ELOGIC -> VALUE AND VALUE .) ]
  ! LT              [ reduce using rule 40 (ELOGIC -> VALUE AND VALUE .) ]
  ! GT              [ reduce using rule 40 (ELOGIC -> VALUE AND VALUE .) ]
  ! LE              [ reduce using rule 40 (ELOGIC -> VALUE AND VALUE .) ]
  ! GE              [ reduce using rule 40 (ELOGIC -> VALUE AND VALUE .) ]
  ! AND             [ reduce using rule 40 (ELOGIC -> VALUE AND VALUE .) ]
  ! OR              [ reduce using rule 40 (ELOGIC -> VALUE AND VALUE .) ]


state 89

    (41) ELOGIC -> VALUE OR VALUE .
    (30) EARITH -> VALUE . MULOP VALUE
    (31) EARITH -> VALUE . DIVOP VALUE
    (32) EARITH -> VALUE . SUMOP VALUE
    (33) EARITH -> VALUE . SUBOP VALUE
    (34) ELOGIC -> VALUE . EQ VALUE
    (35) ELOGIC -> VALUE . NE VALUE
    (36) ELOGIC -> VALUE . LT VALUE
    (37) ELOGIC -> VALUE . GT VALUE
    (38) ELOGIC -> VALUE . LE VALUE
    (39) ELOGIC -> VALUE . GE VALUE
    (40) ELOGIC -> VALUE . AND VALUE
    (41) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COLON           reduce using rule 41 (ELOGIC -> VALUE OR VALUE .)
    CLOSE_PARENTHESIS reduce using rule 41 (ELOGIC -> VALUE OR VALUE .)
    FOR             reduce using rule 41 (ELOGIC -> VALUE OR VALUE .)
    DO              reduce using rule 41 (ELOGIC -> VALUE OR VALUE .)
    WHILE           reduce using rule 41 (ELOGIC -> VALUE OR VALUE .)
    ELSE            reduce using rule 41 (ELOGIC -> VALUE OR VALUE .)
    IF              reduce using rule 41 (ELOGIC -> VALUE OR VALUE .)
    PRINT           reduce using rule 41 (ELOGIC -> VALUE OR VALUE .)
    ID              reduce using rule 41 (ELOGIC -> VALUE OR VALUE .)
    FUNC            reduce using rule 41 (ELOGIC -> VALUE OR VALUE .)
    $end            reduce using rule 41 (ELOGIC -> VALUE OR VALUE .)
    CLOSE_BRACES    reduce using rule 41 (ELOGIC -> VALUE OR VALUE .)
    MULOP           shift and go to state 57
    DIVOP           shift and go to state 58
    SUMOP           shift and go to state 59
    SUBOP           shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

  ! MULOP           [ reduce using rule 41 (ELOGIC -> VALUE OR VALUE .) ]
  ! DIVOP           [ reduce using rule 41 (ELOGIC -> VALUE OR VALUE .) ]
  ! SUMOP           [ reduce using rule 41 (ELOGIC -> VALUE OR VALUE .) ]
  ! SUBOP           [ reduce using rule 41 (ELOGIC -> VALUE OR VALUE .) ]
  ! EQ              [ reduce using rule 41 (ELOGIC -> VALUE OR VALUE .) ]
  ! NE              [ reduce using rule 41 (ELOGIC -> VALUE OR VALUE .) ]
  ! LT              [ reduce using rule 41 (ELOGIC -> VALUE OR VALUE .) ]
  ! GT              [ reduce using rule 41 (ELOGIC -> VALUE OR VALUE .) ]
  ! LE              [ reduce using rule 41 (ELOGIC -> VALUE OR VALUE .) ]
  ! GE              [ reduce using rule 41 (ELOGIC -> VALUE OR VALUE .) ]
  ! AND             [ reduce using rule 41 (ELOGIC -> VALUE OR VALUE .) ]
  ! OR              [ reduce using rule 41 (ELOGIC -> VALUE OR VALUE .) ]


state 90

    (22) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE . OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 96


state 91

    (21) WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES . STRUCTURES CLOSE_BRACES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . empty
    (23) FOR_LOOP -> . FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (21) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (20) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (18) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (17) OUTPUT -> . PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS
    (15) INPUT -> . ID COMMA INPUT
    (16) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> . ID COMMA VAR
    (14) VAR -> . ID IS_VALUE EXP
    (24) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (1) empty -> .

    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ELSE            shift and go to state 16
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    FUNC            shift and go to state 20
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    STRUCTURES                     shift and go to state 97
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    empty                          shift and go to state 12

state 92

    (18) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES . STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES . STRUCTURES CLOSE_BRACES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . empty
    (23) FOR_LOOP -> . FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (21) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (20) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (18) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (17) OUTPUT -> . PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS
    (15) INPUT -> . ID COMMA INPUT
    (16) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> . ID COMMA VAR
    (14) VAR -> . ID IS_VALUE EXP
    (24) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (1) empty -> .

    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ELSE            shift and go to state 16
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    FUNC            shift and go to state 20
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    STRUCTURES                     shift and go to state 98
    ELSE_CONDITIONAL               shift and go to state 6
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    empty                          shift and go to state 12

state 93

    (16) INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .

    FOR             reduce using rule 16 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    DO              reduce using rule 16 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 16 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 16 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    IF              reduce using rule 16 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 16 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    ID              reduce using rule 16 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    FUNC            reduce using rule 16 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    $end            reduce using rule 16 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CLOSE_BRACES    reduce using rule 16 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)


state 94

    (24) FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES . STRUCTURES CLOSE_BRACES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . empty
    (23) FOR_LOOP -> . FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (21) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (20) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (18) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (17) OUTPUT -> . PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS
    (15) INPUT -> . ID COMMA INPUT
    (16) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> . ID COMMA VAR
    (14) VAR -> . ID IS_VALUE EXP
    (24) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (1) empty -> .

    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ELSE            shift and go to state 16
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    FUNC            shift and go to state 20
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    STRUCTURES                     shift and go to state 99
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    empty                          shift and go to state 12

state 95

    (23) FOR_LOOP -> FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS . OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_BRACES     shift and go to state 100


state 96

    (22) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS . EXP CLOSE_PARENTHESIS
    (25) EXP -> . VALUE
    (26) VALUE -> . EARITH
    (27) VALUE -> . ELOGIC
    (28) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (29) VALUE -> . VAL
    (30) EARITH -> . VALUE MULOP VALUE
    (31) EARITH -> . VALUE DIVOP VALUE
    (32) EARITH -> . VALUE SUMOP VALUE
    (33) EARITH -> . VALUE SUBOP VALUE
    (34) ELOGIC -> . VALUE EQ VALUE
    (35) ELOGIC -> . VALUE NE VALUE
    (36) ELOGIC -> . VALUE LT VALUE
    (37) ELOGIC -> . VALUE GT VALUE
    (38) ELOGIC -> . VALUE LE VALUE
    (39) ELOGIC -> . VALUE GE VALUE
    (40) ELOGIC -> . VALUE AND VALUE
    (41) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 39
    VAL             shift and go to state 44

    EXP                            shift and go to state 101
    VALUE                          shift and go to state 41
    EARITH                         shift and go to state 42
    ELOGIC                         shift and go to state 43

state 97

    (21) WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 102


state 98

    (18) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES . CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 103


state 99

    (24) FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 104


state 100

    (23) FOR_LOOP -> FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES . STRUCTURES CLOSE_BRACES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . empty
    (23) FOR_LOOP -> . FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (22) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (21) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (20) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (18) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (17) OUTPUT -> . PRINT OPEN_PARENTHESIS ID CLOSE_PARENTHESIS
    (15) INPUT -> . ID COMMA INPUT
    (16) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (13) VAR -> . ID COMMA VAR
    (14) VAR -> . ID IS_VALUE EXP
    (24) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (1) empty -> .

    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ELSE            shift and go to state 16
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    FUNC            shift and go to state 20
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    STRUCTURES                     shift and go to state 105
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    empty                          shift and go to state 12

state 101

    (22) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 106


state 102

    (21) WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .

    FOR             reduce using rule 21 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    DO              reduce using rule 21 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    WHILE           reduce using rule 21 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ELSE            reduce using rule 21 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    IF              reduce using rule 21 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    PRINT           reduce using rule 21 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ID              reduce using rule 21 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    FUNC            reduce using rule 21 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    $end            reduce using rule 21 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 21 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)


state 103

    (18) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES . ELSE_CONDITIONAL
    (19) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .
    (20) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES

  ! shift/reduce conflict for ELSE resolved as shift
    FOR             reduce using rule 19 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    DO              reduce using rule 19 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    WHILE           reduce using rule 19 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    IF              reduce using rule 19 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    PRINT           reduce using rule 19 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ID              reduce using rule 19 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    FUNC            reduce using rule 19 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    $end            reduce using rule 19 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 19 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ELSE            shift and go to state 16

  ! ELSE            [ reduce using rule 19 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .) ]

    ELSE_CONDITIONAL               shift and go to state 107

state 104

    (24) FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .

    FOR             reduce using rule 24 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    DO              reduce using rule 24 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    WHILE           reduce using rule 24 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ELSE            reduce using rule 24 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    IF              reduce using rule 24 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    PRINT           reduce using rule 24 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ID              reduce using rule 24 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    FUNC            reduce using rule 24 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    $end            reduce using rule 24 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 24 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)


state 105

    (23) FOR_LOOP -> FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 108


state 106

    (22) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .

    FOR             reduce using rule 22 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    DO              reduce using rule 22 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 22 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 22 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    IF              reduce using rule 22 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 22 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    ID              reduce using rule 22 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    FUNC            reduce using rule 22 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    $end            reduce using rule 22 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    CLOSE_BRACES    reduce using rule 22 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)


state 107

    (18) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .

    FOR             reduce using rule 18 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    DO              reduce using rule 18 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    WHILE           reduce using rule 18 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    ELSE            reduce using rule 18 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    IF              reduce using rule 18 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    PRINT           reduce using rule 18 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    ID              reduce using rule 18 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    FUNC            reduce using rule 18 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    $end            reduce using rule 18 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    CLOSE_BRACES    reduce using rule 18 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)


state 108

    (23) FOR_LOOP -> FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .

    FOR             reduce using rule 23 (FOR_LOOP -> FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    DO              reduce using rule 23 (FOR_LOOP -> FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    WHILE           reduce using rule 23 (FOR_LOOP -> FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ELSE            reduce using rule 23 (FOR_LOOP -> FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    IF              reduce using rule 23 (FOR_LOOP -> FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    PRINT           reduce using rule 23 (FOR_LOOP -> FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ID              reduce using rule 23 (FOR_LOOP -> FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    FUNC            reduce using rule 23 (FOR_LOOP -> FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    $end            reduce using rule 23 (FOR_LOOP -> FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 23 (FOR_LOOP -> FOR OPEN_PARENTHESIS EXP COLON EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MULOP in state 78 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 78 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 78 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 78 resolved as shift
WARNING: shift/reduce conflict for EQ in state 78 resolved as shift
WARNING: shift/reduce conflict for NE in state 78 resolved as shift
WARNING: shift/reduce conflict for LT in state 78 resolved as shift
WARNING: shift/reduce conflict for GT in state 78 resolved as shift
WARNING: shift/reduce conflict for LE in state 78 resolved as shift
WARNING: shift/reduce conflict for GE in state 78 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 79 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 79 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 79 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 79 resolved as shift
WARNING: shift/reduce conflict for EQ in state 79 resolved as shift
WARNING: shift/reduce conflict for NE in state 79 resolved as shift
WARNING: shift/reduce conflict for LT in state 79 resolved as shift
WARNING: shift/reduce conflict for GT in state 79 resolved as shift
WARNING: shift/reduce conflict for LE in state 79 resolved as shift
WARNING: shift/reduce conflict for GE in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 80 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 80 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 80 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 80 resolved as shift
WARNING: shift/reduce conflict for EQ in state 80 resolved as shift
WARNING: shift/reduce conflict for NE in state 80 resolved as shift
WARNING: shift/reduce conflict for LT in state 80 resolved as shift
WARNING: shift/reduce conflict for GT in state 80 resolved as shift
WARNING: shift/reduce conflict for LE in state 80 resolved as shift
WARNING: shift/reduce conflict for GE in state 80 resolved as shift
WARNING: shift/reduce conflict for AND in state 80 resolved as shift
WARNING: shift/reduce conflict for OR in state 80 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 81 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 81 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 81 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 81 resolved as shift
WARNING: shift/reduce conflict for EQ in state 81 resolved as shift
WARNING: shift/reduce conflict for NE in state 81 resolved as shift
WARNING: shift/reduce conflict for LT in state 81 resolved as shift
WARNING: shift/reduce conflict for GT in state 81 resolved as shift
WARNING: shift/reduce conflict for LE in state 81 resolved as shift
WARNING: shift/reduce conflict for GE in state 81 resolved as shift
WARNING: shift/reduce conflict for AND in state 81 resolved as shift
WARNING: shift/reduce conflict for OR in state 81 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 82 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 82 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 82 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 82 resolved as shift
WARNING: shift/reduce conflict for EQ in state 82 resolved as shift
WARNING: shift/reduce conflict for NE in state 82 resolved as shift
WARNING: shift/reduce conflict for LT in state 82 resolved as shift
WARNING: shift/reduce conflict for GT in state 82 resolved as shift
WARNING: shift/reduce conflict for LE in state 82 resolved as shift
WARNING: shift/reduce conflict for GE in state 82 resolved as shift
WARNING: shift/reduce conflict for AND in state 82 resolved as shift
WARNING: shift/reduce conflict for OR in state 82 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 83 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 83 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 83 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 83 resolved as shift
WARNING: shift/reduce conflict for EQ in state 83 resolved as shift
WARNING: shift/reduce conflict for NE in state 83 resolved as shift
WARNING: shift/reduce conflict for LT in state 83 resolved as shift
WARNING: shift/reduce conflict for GT in state 83 resolved as shift
WARNING: shift/reduce conflict for LE in state 83 resolved as shift
WARNING: shift/reduce conflict for GE in state 83 resolved as shift
WARNING: shift/reduce conflict for AND in state 83 resolved as shift
WARNING: shift/reduce conflict for OR in state 83 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 84 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 84 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 84 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 84 resolved as shift
WARNING: shift/reduce conflict for EQ in state 84 resolved as shift
WARNING: shift/reduce conflict for NE in state 84 resolved as shift
WARNING: shift/reduce conflict for LT in state 84 resolved as shift
WARNING: shift/reduce conflict for GT in state 84 resolved as shift
WARNING: shift/reduce conflict for LE in state 84 resolved as shift
WARNING: shift/reduce conflict for GE in state 84 resolved as shift
WARNING: shift/reduce conflict for AND in state 84 resolved as shift
WARNING: shift/reduce conflict for OR in state 84 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 85 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 85 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 85 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 85 resolved as shift
WARNING: shift/reduce conflict for EQ in state 85 resolved as shift
WARNING: shift/reduce conflict for NE in state 85 resolved as shift
WARNING: shift/reduce conflict for LT in state 85 resolved as shift
WARNING: shift/reduce conflict for GT in state 85 resolved as shift
WARNING: shift/reduce conflict for LE in state 85 resolved as shift
WARNING: shift/reduce conflict for GE in state 85 resolved as shift
WARNING: shift/reduce conflict for AND in state 85 resolved as shift
WARNING: shift/reduce conflict for OR in state 85 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 86 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 86 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 86 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 86 resolved as shift
WARNING: shift/reduce conflict for EQ in state 86 resolved as shift
WARNING: shift/reduce conflict for NE in state 86 resolved as shift
WARNING: shift/reduce conflict for LT in state 86 resolved as shift
WARNING: shift/reduce conflict for GT in state 86 resolved as shift
WARNING: shift/reduce conflict for LE in state 86 resolved as shift
WARNING: shift/reduce conflict for GE in state 86 resolved as shift
WARNING: shift/reduce conflict for AND in state 86 resolved as shift
WARNING: shift/reduce conflict for OR in state 86 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 87 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 87 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 87 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 87 resolved as shift
WARNING: shift/reduce conflict for EQ in state 87 resolved as shift
WARNING: shift/reduce conflict for NE in state 87 resolved as shift
WARNING: shift/reduce conflict for LT in state 87 resolved as shift
WARNING: shift/reduce conflict for GT in state 87 resolved as shift
WARNING: shift/reduce conflict for LE in state 87 resolved as shift
WARNING: shift/reduce conflict for GE in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for OR in state 87 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 88 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 88 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 88 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 88 resolved as shift
WARNING: shift/reduce conflict for EQ in state 88 resolved as shift
WARNING: shift/reduce conflict for NE in state 88 resolved as shift
WARNING: shift/reduce conflict for LT in state 88 resolved as shift
WARNING: shift/reduce conflict for GT in state 88 resolved as shift
WARNING: shift/reduce conflict for LE in state 88 resolved as shift
WARNING: shift/reduce conflict for GE in state 88 resolved as shift
WARNING: shift/reduce conflict for AND in state 88 resolved as shift
WARNING: shift/reduce conflict for OR in state 88 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 89 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 89 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 89 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 89 resolved as shift
WARNING: shift/reduce conflict for EQ in state 89 resolved as shift
WARNING: shift/reduce conflict for NE in state 89 resolved as shift
WARNING: shift/reduce conflict for LT in state 89 resolved as shift
WARNING: shift/reduce conflict for GT in state 89 resolved as shift
WARNING: shift/reduce conflict for LE in state 89 resolved as shift
WARNING: shift/reduce conflict for GE in state 89 resolved as shift
WARNING: shift/reduce conflict for AND in state 89 resolved as shift
WARNING: shift/reduce conflict for OR in state 89 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 103 resolved as shift
