Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> MAIN_PROGRAM
Rule 1     empty -> <empty>
Rule 2     MAIN_PROGRAM -> STRUCTURES
Rule 3     STRUCTURES -> FOR_LOOP STRUCTURES
Rule 4     STRUCTURES -> DO_WHILE_LOOP STRUCTURES
Rule 5     STRUCTURES -> WHILE_LOOP STRUCTURES
Rule 6     STRUCTURES -> ELSE_CONDITIONAL STRUCTURES
Rule 7     STRUCTURES -> IF_CONDITIONAL STRUCTURES
Rule 8     STRUCTURES -> OUTPUT STRUCTURES
Rule 9     STRUCTURES -> INPUT STRUCTURES
Rule 10    STRUCTURES -> VAR STRUCTURES
Rule 11    STRUCTURES -> FUNCTION STRUCTURES
Rule 12    STRUCTURES -> FUNC_CALL STRUCTURES
Rule 13    STRUCTURES -> empty
Rule 14    VAR -> ID COMMA VAR
Rule 15    VAR -> ID IS_VALUE EXP
Rule 16    VAR -> ID IS_VALUE MATRIX
Rule 17    INPUT -> ID COMMA INPUT
Rule 18    INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
Rule 19    OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
Rule 20    OUTPUT -> PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
Rule 21    IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
Rule 22    IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
Rule 23    ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
Rule 24    WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
Rule 25    DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
Rule 26    FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
Rule 27    FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
Rule 28    NON_FUNCTION -> FOR_LOOP NON_FUNCTION
Rule 29    NON_FUNCTION -> DO_WHILE_LOOP NON_FUNCTION
Rule 30    NON_FUNCTION -> WHILE_LOOP NON_FUNCTION
Rule 31    NON_FUNCTION -> ELSE_CONDITIONAL NON_FUNCTION
Rule 32    NON_FUNCTION -> IF_CONDITIONAL NON_FUNCTION
Rule 33    NON_FUNCTION -> OUTPUT NON_FUNCTION
Rule 34    NON_FUNCTION -> INPUT NON_FUNCTION
Rule 35    NON_FUNCTION -> VAR NON_FUNCTION
Rule 36    NON_FUNCTION -> FUNC_CALL NON_FUNCTION
Rule 37    NON_FUNCTION -> empty
Rule 38    FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
Rule 39    EXP -> VALUE
Rule 40    VALUE -> EARITH
Rule 41    VALUE -> ELOGIC
Rule 42    VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
Rule 43    VALUE -> VAL
Rule 44    VALUE -> ID
Rule 45    VALUE -> MATRIX_VAL
Rule 46    EARITH -> VALUE MULOP VALUE
Rule 47    EARITH -> VALUE DIVOP VALUE
Rule 48    EARITH -> VALUE SUMOP VALUE
Rule 49    EARITH -> VALUE SUBOP VALUE
Rule 50    ELOGIC -> VALUE EQ VALUE
Rule 51    ELOGIC -> VALUE NE VALUE
Rule 52    ELOGIC -> VALUE LT VALUE
Rule 53    ELOGIC -> VALUE GT VALUE
Rule 54    ELOGIC -> VALUE LE VALUE
Rule 55    ELOGIC -> VALUE GE VALUE
Rule 56    ELOGIC -> VALUE AND VALUE
Rule 57    ELOGIC -> VALUE OR VALUE

Terminals, with rules where they appear

AND                  : 56
CLOSE_BRACES         : 21 22 23 24 25 26 27
CLOSE_PARENTHESIS    : 18 19 20 21 22 24 25 26 27 38 42
COMMA                : 14 17
DIVOP                : 47
DO                   : 25
ELSE                 : 23
EQ                   : 50
FOR                  : 26
FUNC                 : 27
GE                   : 55
GT                   : 53
ID                   : 14 15 16 17 18 27 38 44
IF                   : 21 22
IS_VALUE             : 15 16 18
LE                   : 54
LT                   : 52
MATRIX               : 16
MATRIX_VAL           : 45
MULOP                : 46
NE                   : 51
OPEN_BRACES          : 21 22 23 24 25 26 27
OPEN_PARENTHESIS     : 18 19 20 21 22 24 25 26 27 38 42
OR                   : 57
PRINT                : 19 20
READ                 : 18
SEQUENCE             : 26
STRING               : 20
SUBOP                : 49
SUMOP                : 48
VAL                  : 43
WHILE                : 24 25
error                : 

Nonterminals, with rules where they appear

DO_WHILE_LOOP        : 4 29
EARITH               : 40
ELOGIC               : 41
ELSE_CONDITIONAL     : 6 21 31
EXP                  : 15 19 21 22 24 25
FOR_LOOP             : 3 28
FUNCTION             : 11
FUNC_CALL            : 12 36
IF_CONDITIONAL       : 7 32
INPUT                : 9 17 34
MAIN_PROGRAM         : 0
NON_FUNCTION         : 27 28 29 30 31 32 33 34 35 36
OUTPUT               : 8 33
STRUCTURES           : 2 3 4 5 6 7 8 9 10 11 12 21 22 23 24 25 26
VALUE                : 39 42 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57
VAR                  : 10 14 35
WHILE_LOOP           : 5 30
empty                : 13 37

Parsing method: LALR

state 0

    (0) S' -> . MAIN_PROGRAM
    (2) MAIN_PROGRAM -> . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (27) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    FUNC            shift and go to state 21
    $end            reduce using rule 1 (empty -> .)

    MAIN_PROGRAM                   shift and go to state 1
    STRUCTURES                     shift and go to state 2
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 1

    (0) S' -> MAIN_PROGRAM .



state 2

    (2) MAIN_PROGRAM -> STRUCTURES .

    $end            reduce using rule 2 (MAIN_PROGRAM -> STRUCTURES .)


state 3

    (3) STRUCTURES -> FOR_LOOP . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (27) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    FUNC            shift and go to state 21
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    FOR_LOOP                       shift and go to state 3
    STRUCTURES                     shift and go to state 22
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 4

    (4) STRUCTURES -> DO_WHILE_LOOP . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (27) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    FUNC            shift and go to state 21
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    DO_WHILE_LOOP                  shift and go to state 4
    STRUCTURES                     shift and go to state 23
    FOR_LOOP                       shift and go to state 3
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 5

    (5) STRUCTURES -> WHILE_LOOP . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (27) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    FUNC            shift and go to state 21
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    WHILE_LOOP                     shift and go to state 5
    STRUCTURES                     shift and go to state 24
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 6

    (6) STRUCTURES -> ELSE_CONDITIONAL . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (27) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    FUNC            shift and go to state 21
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    ELSE_CONDITIONAL               shift and go to state 6
    STRUCTURES                     shift and go to state 25
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 7

    (7) STRUCTURES -> IF_CONDITIONAL . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (27) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    FUNC            shift and go to state 21
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    IF_CONDITIONAL                 shift and go to state 7
    STRUCTURES                     shift and go to state 26
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 8

    (8) STRUCTURES -> OUTPUT . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (27) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    FUNC            shift and go to state 21
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    OUTPUT                         shift and go to state 8
    STRUCTURES                     shift and go to state 27
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 9

    (9) STRUCTURES -> INPUT . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (27) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    FUNC            shift and go to state 21
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    INPUT                          shift and go to state 9
    STRUCTURES                     shift and go to state 28
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 10

    (10) STRUCTURES -> VAR . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (27) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    FUNC            shift and go to state 21
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    VAR                            shift and go to state 10
    STRUCTURES                     shift and go to state 29
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 11

    (11) STRUCTURES -> FUNCTION . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (27) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    FUNC            shift and go to state 21
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    FUNCTION                       shift and go to state 11
    STRUCTURES                     shift and go to state 30
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 12

    (12) STRUCTURES -> FUNC_CALL . STRUCTURES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (27) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    FUNC            shift and go to state 21
    $end            reduce using rule 1 (empty -> .)
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    FUNC_CALL                      shift and go to state 12
    STRUCTURES                     shift and go to state 31
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    empty                          shift and go to state 13

state 13

    (13) STRUCTURES -> empty .

    $end            reduce using rule 13 (STRUCTURES -> empty .)
    CLOSE_BRACES    reduce using rule 13 (STRUCTURES -> empty .)


state 14

    (26) FOR_LOOP -> FOR . OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_PARENTHESIS shift and go to state 32


state 15

    (25) DO_WHILE_LOOP -> DO . OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS

    OPEN_BRACES     shift and go to state 33


state 16

    (24) WHILE_LOOP -> WHILE . OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_PARENTHESIS shift and go to state 34


state 17

    (23) ELSE_CONDITIONAL -> ELSE . OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_BRACES     shift and go to state 35


state 18

    (21) IF_CONDITIONAL -> IF . OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> IF . OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_PARENTHESIS shift and go to state 36


state 19

    (19) OUTPUT -> PRINT . OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> PRINT . OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 37


state 20

    (17) INPUT -> ID . COMMA INPUT
    (18) INPUT -> ID . IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> ID . COMMA VAR
    (15) VAR -> ID . IS_VALUE EXP
    (16) VAR -> ID . IS_VALUE MATRIX
    (38) FUNC_CALL -> ID . OPEN_PARENTHESIS CLOSE_PARENTHESIS

    COMMA           shift and go to state 38
    IS_VALUE        shift and go to state 39
    OPEN_PARENTHESIS shift and go to state 40


state 21

    (27) FUNCTION -> FUNC . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES

    ID              shift and go to state 41


state 22

    (3) STRUCTURES -> FOR_LOOP STRUCTURES .

    $end            reduce using rule 3 (STRUCTURES -> FOR_LOOP STRUCTURES .)
    CLOSE_BRACES    reduce using rule 3 (STRUCTURES -> FOR_LOOP STRUCTURES .)


state 23

    (4) STRUCTURES -> DO_WHILE_LOOP STRUCTURES .

    $end            reduce using rule 4 (STRUCTURES -> DO_WHILE_LOOP STRUCTURES .)
    CLOSE_BRACES    reduce using rule 4 (STRUCTURES -> DO_WHILE_LOOP STRUCTURES .)


state 24

    (5) STRUCTURES -> WHILE_LOOP STRUCTURES .

    $end            reduce using rule 5 (STRUCTURES -> WHILE_LOOP STRUCTURES .)
    CLOSE_BRACES    reduce using rule 5 (STRUCTURES -> WHILE_LOOP STRUCTURES .)


state 25

    (6) STRUCTURES -> ELSE_CONDITIONAL STRUCTURES .

    $end            reduce using rule 6 (STRUCTURES -> ELSE_CONDITIONAL STRUCTURES .)
    CLOSE_BRACES    reduce using rule 6 (STRUCTURES -> ELSE_CONDITIONAL STRUCTURES .)


state 26

    (7) STRUCTURES -> IF_CONDITIONAL STRUCTURES .

    $end            reduce using rule 7 (STRUCTURES -> IF_CONDITIONAL STRUCTURES .)
    CLOSE_BRACES    reduce using rule 7 (STRUCTURES -> IF_CONDITIONAL STRUCTURES .)


state 27

    (8) STRUCTURES -> OUTPUT STRUCTURES .

    $end            reduce using rule 8 (STRUCTURES -> OUTPUT STRUCTURES .)
    CLOSE_BRACES    reduce using rule 8 (STRUCTURES -> OUTPUT STRUCTURES .)


state 28

    (9) STRUCTURES -> INPUT STRUCTURES .

    $end            reduce using rule 9 (STRUCTURES -> INPUT STRUCTURES .)
    CLOSE_BRACES    reduce using rule 9 (STRUCTURES -> INPUT STRUCTURES .)


state 29

    (10) STRUCTURES -> VAR STRUCTURES .

    $end            reduce using rule 10 (STRUCTURES -> VAR STRUCTURES .)
    CLOSE_BRACES    reduce using rule 10 (STRUCTURES -> VAR STRUCTURES .)


state 30

    (11) STRUCTURES -> FUNCTION STRUCTURES .

    $end            reduce using rule 11 (STRUCTURES -> FUNCTION STRUCTURES .)
    CLOSE_BRACES    reduce using rule 11 (STRUCTURES -> FUNCTION STRUCTURES .)


state 31

    (12) STRUCTURES -> FUNC_CALL STRUCTURES .

    $end            reduce using rule 12 (STRUCTURES -> FUNC_CALL STRUCTURES .)
    CLOSE_BRACES    reduce using rule 12 (STRUCTURES -> FUNC_CALL STRUCTURES .)


state 32

    (26) FOR_LOOP -> FOR OPEN_PARENTHESIS . SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    SEQUENCE        shift and go to state 42


state 33

    (25) DO_WHILE_LOOP -> DO OPEN_BRACES . STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (27) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    FUNC            shift and go to state 21
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    STRUCTURES                     shift and go to state 43
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 34

    (24) WHILE_LOOP -> WHILE OPEN_PARENTHESIS . EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (39) EXP -> . VALUE
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    EXP                            shift and go to state 45
    VALUE                          shift and go to state 46
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 35

    (23) ELSE_CONDITIONAL -> ELSE OPEN_BRACES . STRUCTURES CLOSE_BRACES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (27) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    FUNC            shift and go to state 21
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    STRUCTURES                     shift and go to state 52
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 36

    (21) IF_CONDITIONAL -> IF OPEN_PARENTHESIS . EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> IF OPEN_PARENTHESIS . EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (39) EXP -> . VALUE
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    EXP                            shift and go to state 53
    VALUE                          shift and go to state 46
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 37

    (19) OUTPUT -> PRINT OPEN_PARENTHESIS . EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> PRINT OPEN_PARENTHESIS . STRING CLOSE_PARENTHESIS
    (39) EXP -> . VALUE
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    STRING          shift and go to state 55
    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    EXP                            shift and go to state 54
    VALUE                          shift and go to state 46
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 38

    (17) INPUT -> ID COMMA . INPUT
    (14) VAR -> ID COMMA . VAR
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX

    ID              shift and go to state 56

    INPUT                          shift and go to state 57
    VAR                            shift and go to state 58

state 39

    (18) INPUT -> ID IS_VALUE . READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (15) VAR -> ID IS_VALUE . EXP
    (16) VAR -> ID IS_VALUE . MATRIX
    (39) EXP -> . VALUE
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    READ            shift and go to state 59
    MATRIX          shift and go to state 61
    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    EXP                            shift and go to state 60
    VALUE                          shift and go to state 46
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 40

    (38) FUNC_CALL -> ID OPEN_PARENTHESIS . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 62


state 41

    (27) FUNCTION -> FUNC ID . OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES

    OPEN_PARENTHESIS shift and go to state 63


state 42

    (26) FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE . CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    CLOSE_PARENTHESIS shift and go to state 64


state 43

    (25) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES . CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS

    CLOSE_BRACES    shift and go to state 65


state 44

    (42) VALUE -> OPEN_PARENTHESIS . VALUE CLOSE_PARENTHESIS
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    VALUE                          shift and go to state 66
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 45

    (24) WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP . CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    CLOSE_PARENTHESIS shift and go to state 67


state 46

    (39) EXP -> VALUE .
    (46) EARITH -> VALUE . MULOP VALUE
    (47) EARITH -> VALUE . DIVOP VALUE
    (48) EARITH -> VALUE . SUMOP VALUE
    (49) EARITH -> VALUE . SUBOP VALUE
    (50) ELOGIC -> VALUE . EQ VALUE
    (51) ELOGIC -> VALUE . NE VALUE
    (52) ELOGIC -> VALUE . LT VALUE
    (53) ELOGIC -> VALUE . GT VALUE
    (54) ELOGIC -> VALUE . LE VALUE
    (55) ELOGIC -> VALUE . GE VALUE
    (56) ELOGIC -> VALUE . AND VALUE
    (57) ELOGIC -> VALUE . OR VALUE

    CLOSE_PARENTHESIS reduce using rule 39 (EXP -> VALUE .)
    FOR             reduce using rule 39 (EXP -> VALUE .)
    DO              reduce using rule 39 (EXP -> VALUE .)
    WHILE           reduce using rule 39 (EXP -> VALUE .)
    ELSE            reduce using rule 39 (EXP -> VALUE .)
    IF              reduce using rule 39 (EXP -> VALUE .)
    PRINT           reduce using rule 39 (EXP -> VALUE .)
    ID              reduce using rule 39 (EXP -> VALUE .)
    FUNC            reduce using rule 39 (EXP -> VALUE .)
    $end            reduce using rule 39 (EXP -> VALUE .)
    CLOSE_BRACES    reduce using rule 39 (EXP -> VALUE .)
    MULOP           shift and go to state 68
    DIVOP           shift and go to state 69
    SUMOP           shift and go to state 70
    SUBOP           shift and go to state 71
    EQ              shift and go to state 72
    NE              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LE              shift and go to state 76
    GE              shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79


state 47

    (40) VALUE -> EARITH .

    MULOP           reduce using rule 40 (VALUE -> EARITH .)
    DIVOP           reduce using rule 40 (VALUE -> EARITH .)
    SUMOP           reduce using rule 40 (VALUE -> EARITH .)
    SUBOP           reduce using rule 40 (VALUE -> EARITH .)
    EQ              reduce using rule 40 (VALUE -> EARITH .)
    NE              reduce using rule 40 (VALUE -> EARITH .)
    LT              reduce using rule 40 (VALUE -> EARITH .)
    GT              reduce using rule 40 (VALUE -> EARITH .)
    LE              reduce using rule 40 (VALUE -> EARITH .)
    GE              reduce using rule 40 (VALUE -> EARITH .)
    AND             reduce using rule 40 (VALUE -> EARITH .)
    OR              reduce using rule 40 (VALUE -> EARITH .)
    CLOSE_PARENTHESIS reduce using rule 40 (VALUE -> EARITH .)
    FOR             reduce using rule 40 (VALUE -> EARITH .)
    DO              reduce using rule 40 (VALUE -> EARITH .)
    WHILE           reduce using rule 40 (VALUE -> EARITH .)
    ELSE            reduce using rule 40 (VALUE -> EARITH .)
    IF              reduce using rule 40 (VALUE -> EARITH .)
    PRINT           reduce using rule 40 (VALUE -> EARITH .)
    ID              reduce using rule 40 (VALUE -> EARITH .)
    FUNC            reduce using rule 40 (VALUE -> EARITH .)
    $end            reduce using rule 40 (VALUE -> EARITH .)
    CLOSE_BRACES    reduce using rule 40 (VALUE -> EARITH .)


state 48

    (41) VALUE -> ELOGIC .

    MULOP           reduce using rule 41 (VALUE -> ELOGIC .)
    DIVOP           reduce using rule 41 (VALUE -> ELOGIC .)
    SUMOP           reduce using rule 41 (VALUE -> ELOGIC .)
    SUBOP           reduce using rule 41 (VALUE -> ELOGIC .)
    EQ              reduce using rule 41 (VALUE -> ELOGIC .)
    NE              reduce using rule 41 (VALUE -> ELOGIC .)
    LT              reduce using rule 41 (VALUE -> ELOGIC .)
    GT              reduce using rule 41 (VALUE -> ELOGIC .)
    LE              reduce using rule 41 (VALUE -> ELOGIC .)
    GE              reduce using rule 41 (VALUE -> ELOGIC .)
    AND             reduce using rule 41 (VALUE -> ELOGIC .)
    OR              reduce using rule 41 (VALUE -> ELOGIC .)
    CLOSE_PARENTHESIS reduce using rule 41 (VALUE -> ELOGIC .)
    FOR             reduce using rule 41 (VALUE -> ELOGIC .)
    DO              reduce using rule 41 (VALUE -> ELOGIC .)
    WHILE           reduce using rule 41 (VALUE -> ELOGIC .)
    ELSE            reduce using rule 41 (VALUE -> ELOGIC .)
    IF              reduce using rule 41 (VALUE -> ELOGIC .)
    PRINT           reduce using rule 41 (VALUE -> ELOGIC .)
    ID              reduce using rule 41 (VALUE -> ELOGIC .)
    FUNC            reduce using rule 41 (VALUE -> ELOGIC .)
    $end            reduce using rule 41 (VALUE -> ELOGIC .)
    CLOSE_BRACES    reduce using rule 41 (VALUE -> ELOGIC .)


state 49

    (43) VALUE -> VAL .

    MULOP           reduce using rule 43 (VALUE -> VAL .)
    DIVOP           reduce using rule 43 (VALUE -> VAL .)
    SUMOP           reduce using rule 43 (VALUE -> VAL .)
    SUBOP           reduce using rule 43 (VALUE -> VAL .)
    EQ              reduce using rule 43 (VALUE -> VAL .)
    NE              reduce using rule 43 (VALUE -> VAL .)
    LT              reduce using rule 43 (VALUE -> VAL .)
    GT              reduce using rule 43 (VALUE -> VAL .)
    LE              reduce using rule 43 (VALUE -> VAL .)
    GE              reduce using rule 43 (VALUE -> VAL .)
    AND             reduce using rule 43 (VALUE -> VAL .)
    OR              reduce using rule 43 (VALUE -> VAL .)
    CLOSE_PARENTHESIS reduce using rule 43 (VALUE -> VAL .)
    FOR             reduce using rule 43 (VALUE -> VAL .)
    DO              reduce using rule 43 (VALUE -> VAL .)
    WHILE           reduce using rule 43 (VALUE -> VAL .)
    ELSE            reduce using rule 43 (VALUE -> VAL .)
    IF              reduce using rule 43 (VALUE -> VAL .)
    PRINT           reduce using rule 43 (VALUE -> VAL .)
    ID              reduce using rule 43 (VALUE -> VAL .)
    FUNC            reduce using rule 43 (VALUE -> VAL .)
    $end            reduce using rule 43 (VALUE -> VAL .)
    CLOSE_BRACES    reduce using rule 43 (VALUE -> VAL .)


state 50

    (44) VALUE -> ID .

    MULOP           reduce using rule 44 (VALUE -> ID .)
    DIVOP           reduce using rule 44 (VALUE -> ID .)
    SUMOP           reduce using rule 44 (VALUE -> ID .)
    SUBOP           reduce using rule 44 (VALUE -> ID .)
    EQ              reduce using rule 44 (VALUE -> ID .)
    NE              reduce using rule 44 (VALUE -> ID .)
    LT              reduce using rule 44 (VALUE -> ID .)
    GT              reduce using rule 44 (VALUE -> ID .)
    LE              reduce using rule 44 (VALUE -> ID .)
    GE              reduce using rule 44 (VALUE -> ID .)
    AND             reduce using rule 44 (VALUE -> ID .)
    OR              reduce using rule 44 (VALUE -> ID .)
    CLOSE_PARENTHESIS reduce using rule 44 (VALUE -> ID .)
    FOR             reduce using rule 44 (VALUE -> ID .)
    DO              reduce using rule 44 (VALUE -> ID .)
    WHILE           reduce using rule 44 (VALUE -> ID .)
    ELSE            reduce using rule 44 (VALUE -> ID .)
    IF              reduce using rule 44 (VALUE -> ID .)
    PRINT           reduce using rule 44 (VALUE -> ID .)
    ID              reduce using rule 44 (VALUE -> ID .)
    FUNC            reduce using rule 44 (VALUE -> ID .)
    $end            reduce using rule 44 (VALUE -> ID .)
    CLOSE_BRACES    reduce using rule 44 (VALUE -> ID .)


state 51

    (45) VALUE -> MATRIX_VAL .

    MULOP           reduce using rule 45 (VALUE -> MATRIX_VAL .)
    DIVOP           reduce using rule 45 (VALUE -> MATRIX_VAL .)
    SUMOP           reduce using rule 45 (VALUE -> MATRIX_VAL .)
    SUBOP           reduce using rule 45 (VALUE -> MATRIX_VAL .)
    EQ              reduce using rule 45 (VALUE -> MATRIX_VAL .)
    NE              reduce using rule 45 (VALUE -> MATRIX_VAL .)
    LT              reduce using rule 45 (VALUE -> MATRIX_VAL .)
    GT              reduce using rule 45 (VALUE -> MATRIX_VAL .)
    LE              reduce using rule 45 (VALUE -> MATRIX_VAL .)
    GE              reduce using rule 45 (VALUE -> MATRIX_VAL .)
    AND             reduce using rule 45 (VALUE -> MATRIX_VAL .)
    OR              reduce using rule 45 (VALUE -> MATRIX_VAL .)
    CLOSE_PARENTHESIS reduce using rule 45 (VALUE -> MATRIX_VAL .)
    FOR             reduce using rule 45 (VALUE -> MATRIX_VAL .)
    DO              reduce using rule 45 (VALUE -> MATRIX_VAL .)
    WHILE           reduce using rule 45 (VALUE -> MATRIX_VAL .)
    ELSE            reduce using rule 45 (VALUE -> MATRIX_VAL .)
    IF              reduce using rule 45 (VALUE -> MATRIX_VAL .)
    PRINT           reduce using rule 45 (VALUE -> MATRIX_VAL .)
    ID              reduce using rule 45 (VALUE -> MATRIX_VAL .)
    FUNC            reduce using rule 45 (VALUE -> MATRIX_VAL .)
    $end            reduce using rule 45 (VALUE -> MATRIX_VAL .)
    CLOSE_BRACES    reduce using rule 45 (VALUE -> MATRIX_VAL .)


state 52

    (23) ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 80


state 53

    (21) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP . CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP . CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES

    CLOSE_PARENTHESIS shift and go to state 81


state 54

    (19) OUTPUT -> PRINT OPEN_PARENTHESIS EXP . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 82


state 55

    (20) OUTPUT -> PRINT OPEN_PARENTHESIS STRING . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 83


state 56

    (17) INPUT -> ID . COMMA INPUT
    (18) INPUT -> ID . IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> ID . COMMA VAR
    (15) VAR -> ID . IS_VALUE EXP
    (16) VAR -> ID . IS_VALUE MATRIX

    COMMA           shift and go to state 38
    IS_VALUE        shift and go to state 39


state 57

    (17) INPUT -> ID COMMA INPUT .

    FOR             reduce using rule 17 (INPUT -> ID COMMA INPUT .)
    DO              reduce using rule 17 (INPUT -> ID COMMA INPUT .)
    WHILE           reduce using rule 17 (INPUT -> ID COMMA INPUT .)
    ELSE            reduce using rule 17 (INPUT -> ID COMMA INPUT .)
    IF              reduce using rule 17 (INPUT -> ID COMMA INPUT .)
    PRINT           reduce using rule 17 (INPUT -> ID COMMA INPUT .)
    ID              reduce using rule 17 (INPUT -> ID COMMA INPUT .)
    FUNC            reduce using rule 17 (INPUT -> ID COMMA INPUT .)
    $end            reduce using rule 17 (INPUT -> ID COMMA INPUT .)
    CLOSE_BRACES    reduce using rule 17 (INPUT -> ID COMMA INPUT .)


state 58

    (14) VAR -> ID COMMA VAR .

    FOR             reduce using rule 14 (VAR -> ID COMMA VAR .)
    DO              reduce using rule 14 (VAR -> ID COMMA VAR .)
    WHILE           reduce using rule 14 (VAR -> ID COMMA VAR .)
    ELSE            reduce using rule 14 (VAR -> ID COMMA VAR .)
    IF              reduce using rule 14 (VAR -> ID COMMA VAR .)
    PRINT           reduce using rule 14 (VAR -> ID COMMA VAR .)
    ID              reduce using rule 14 (VAR -> ID COMMA VAR .)
    FUNC            reduce using rule 14 (VAR -> ID COMMA VAR .)
    $end            reduce using rule 14 (VAR -> ID COMMA VAR .)
    CLOSE_BRACES    reduce using rule 14 (VAR -> ID COMMA VAR .)


state 59

    (18) INPUT -> ID IS_VALUE READ . OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 84


state 60

    (15) VAR -> ID IS_VALUE EXP .

    FOR             reduce using rule 15 (VAR -> ID IS_VALUE EXP .)
    DO              reduce using rule 15 (VAR -> ID IS_VALUE EXP .)
    WHILE           reduce using rule 15 (VAR -> ID IS_VALUE EXP .)
    ELSE            reduce using rule 15 (VAR -> ID IS_VALUE EXP .)
    IF              reduce using rule 15 (VAR -> ID IS_VALUE EXP .)
    PRINT           reduce using rule 15 (VAR -> ID IS_VALUE EXP .)
    ID              reduce using rule 15 (VAR -> ID IS_VALUE EXP .)
    FUNC            reduce using rule 15 (VAR -> ID IS_VALUE EXP .)
    $end            reduce using rule 15 (VAR -> ID IS_VALUE EXP .)
    CLOSE_BRACES    reduce using rule 15 (VAR -> ID IS_VALUE EXP .)


state 61

    (16) VAR -> ID IS_VALUE MATRIX .

    FOR             reduce using rule 16 (VAR -> ID IS_VALUE MATRIX .)
    DO              reduce using rule 16 (VAR -> ID IS_VALUE MATRIX .)
    WHILE           reduce using rule 16 (VAR -> ID IS_VALUE MATRIX .)
    ELSE            reduce using rule 16 (VAR -> ID IS_VALUE MATRIX .)
    IF              reduce using rule 16 (VAR -> ID IS_VALUE MATRIX .)
    PRINT           reduce using rule 16 (VAR -> ID IS_VALUE MATRIX .)
    ID              reduce using rule 16 (VAR -> ID IS_VALUE MATRIX .)
    FUNC            reduce using rule 16 (VAR -> ID IS_VALUE MATRIX .)
    $end            reduce using rule 16 (VAR -> ID IS_VALUE MATRIX .)
    CLOSE_BRACES    reduce using rule 16 (VAR -> ID IS_VALUE MATRIX .)


state 62

    (38) FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .

    FOR             reduce using rule 38 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    DO              reduce using rule 38 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 38 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 38 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    IF              reduce using rule 38 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 38 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    ID              reduce using rule 38 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    FUNC            reduce using rule 38 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    $end            reduce using rule 38 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CLOSE_BRACES    reduce using rule 38 (FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS .)


state 63

    (27) FUNCTION -> FUNC ID OPEN_PARENTHESIS . CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES

    CLOSE_PARENTHESIS shift and go to state 85


state 64

    (26) FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS . OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_BRACES     shift and go to state 86


state 65

    (25) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS

    WHILE           shift and go to state 87


state 66

    (42) VALUE -> OPEN_PARENTHESIS VALUE . CLOSE_PARENTHESIS
    (46) EARITH -> VALUE . MULOP VALUE
    (47) EARITH -> VALUE . DIVOP VALUE
    (48) EARITH -> VALUE . SUMOP VALUE
    (49) EARITH -> VALUE . SUBOP VALUE
    (50) ELOGIC -> VALUE . EQ VALUE
    (51) ELOGIC -> VALUE . NE VALUE
    (52) ELOGIC -> VALUE . LT VALUE
    (53) ELOGIC -> VALUE . GT VALUE
    (54) ELOGIC -> VALUE . LE VALUE
    (55) ELOGIC -> VALUE . GE VALUE
    (56) ELOGIC -> VALUE . AND VALUE
    (57) ELOGIC -> VALUE . OR VALUE

    CLOSE_PARENTHESIS shift and go to state 88
    MULOP           shift and go to state 68
    DIVOP           shift and go to state 69
    SUMOP           shift and go to state 70
    SUBOP           shift and go to state 71
    EQ              shift and go to state 72
    NE              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LE              shift and go to state 76
    GE              shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79


state 67

    (24) WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS . OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_BRACES     shift and go to state 89


state 68

    (46) EARITH -> VALUE MULOP . VALUE
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    VALUE                          shift and go to state 90
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 69

    (47) EARITH -> VALUE DIVOP . VALUE
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    VALUE                          shift and go to state 91
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 70

    (48) EARITH -> VALUE SUMOP . VALUE
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    VALUE                          shift and go to state 92
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 71

    (49) EARITH -> VALUE SUBOP . VALUE
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    VALUE                          shift and go to state 93
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 72

    (50) ELOGIC -> VALUE EQ . VALUE
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    VALUE                          shift and go to state 94
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 73

    (51) ELOGIC -> VALUE NE . VALUE
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    VALUE                          shift and go to state 95
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 74

    (52) ELOGIC -> VALUE LT . VALUE
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    VALUE                          shift and go to state 96
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 75

    (53) ELOGIC -> VALUE GT . VALUE
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    VALUE                          shift and go to state 97
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 76

    (54) ELOGIC -> VALUE LE . VALUE
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    VALUE                          shift and go to state 98
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 77

    (55) ELOGIC -> VALUE GE . VALUE
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    VALUE                          shift and go to state 99
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 78

    (56) ELOGIC -> VALUE AND . VALUE
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    VALUE                          shift and go to state 100
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 79

    (57) ELOGIC -> VALUE OR . VALUE
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    VALUE                          shift and go to state 101
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 80

    (23) ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .

    FOR             reduce using rule 23 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    DO              reduce using rule 23 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    WHILE           reduce using rule 23 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ELSE            reduce using rule 23 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    IF              reduce using rule 23 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    PRINT           reduce using rule 23 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ID              reduce using rule 23 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    FUNC            reduce using rule 23 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    $end            reduce using rule 23 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 23 (ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES .)


state 81

    (21) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS . OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS . OPEN_BRACES STRUCTURES CLOSE_BRACES

    OPEN_BRACES     shift and go to state 102


state 82

    (19) OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .

    FOR             reduce using rule 19 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    DO              reduce using rule 19 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 19 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 19 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    IF              reduce using rule 19 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 19 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    ID              reduce using rule 19 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    FUNC            reduce using rule 19 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    $end            reduce using rule 19 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    CLOSE_BRACES    reduce using rule 19 (OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)


state 83

    (20) OUTPUT -> PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS .

    FOR             reduce using rule 20 (OUTPUT -> PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS .)
    DO              reduce using rule 20 (OUTPUT -> PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 20 (OUTPUT -> PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 20 (OUTPUT -> PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS .)
    IF              reduce using rule 20 (OUTPUT -> PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 20 (OUTPUT -> PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS .)
    ID              reduce using rule 20 (OUTPUT -> PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS .)
    FUNC            reduce using rule 20 (OUTPUT -> PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS .)
    $end            reduce using rule 20 (OUTPUT -> PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS .)
    CLOSE_BRACES    reduce using rule 20 (OUTPUT -> PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS .)


state 84

    (18) INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 103


state 85

    (27) FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS . OPEN_BRACES NON_FUNCTION CLOSE_BRACES

    OPEN_BRACES     shift and go to state 104


state 86

    (26) FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES . STRUCTURES CLOSE_BRACES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (27) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    FUNC            shift and go to state 21
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    STRUCTURES                     shift and go to state 105
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 87

    (25) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE . OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 106


state 88

    (42) VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .

    MULOP           reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    DIVOP           reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    SUMOP           reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    SUBOP           reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    EQ              reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    NE              reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    LT              reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    GT              reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    LE              reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    GE              reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    AND             reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    OR              reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    FOR             reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    DO              reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    IF              reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    ID              reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    FUNC            reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    $end            reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)
    CLOSE_BRACES    reduce using rule 42 (VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS .)


state 89

    (24) WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES . STRUCTURES CLOSE_BRACES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (27) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    FUNC            shift and go to state 21
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    STRUCTURES                     shift and go to state 107
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    ELSE_CONDITIONAL               shift and go to state 6
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 90

    (46) EARITH -> VALUE MULOP VALUE .
    (46) EARITH -> VALUE . MULOP VALUE
    (47) EARITH -> VALUE . DIVOP VALUE
    (48) EARITH -> VALUE . SUMOP VALUE
    (49) EARITH -> VALUE . SUBOP VALUE
    (50) ELOGIC -> VALUE . EQ VALUE
    (51) ELOGIC -> VALUE . NE VALUE
    (52) ELOGIC -> VALUE . LT VALUE
    (53) ELOGIC -> VALUE . GT VALUE
    (54) ELOGIC -> VALUE . LE VALUE
    (55) ELOGIC -> VALUE . GE VALUE
    (56) ELOGIC -> VALUE . AND VALUE
    (57) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 46 (EARITH -> VALUE MULOP VALUE .)
    FOR             reduce using rule 46 (EARITH -> VALUE MULOP VALUE .)
    DO              reduce using rule 46 (EARITH -> VALUE MULOP VALUE .)
    WHILE           reduce using rule 46 (EARITH -> VALUE MULOP VALUE .)
    ELSE            reduce using rule 46 (EARITH -> VALUE MULOP VALUE .)
    IF              reduce using rule 46 (EARITH -> VALUE MULOP VALUE .)
    PRINT           reduce using rule 46 (EARITH -> VALUE MULOP VALUE .)
    ID              reduce using rule 46 (EARITH -> VALUE MULOP VALUE .)
    FUNC            reduce using rule 46 (EARITH -> VALUE MULOP VALUE .)
    $end            reduce using rule 46 (EARITH -> VALUE MULOP VALUE .)
    CLOSE_BRACES    reduce using rule 46 (EARITH -> VALUE MULOP VALUE .)
    MULOP           shift and go to state 68
    DIVOP           shift and go to state 69
    SUMOP           shift and go to state 70
    SUBOP           shift and go to state 71
    EQ              shift and go to state 72
    NE              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LE              shift and go to state 76
    GE              shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79

  ! MULOP           [ reduce using rule 46 (EARITH -> VALUE MULOP VALUE .) ]
  ! DIVOP           [ reduce using rule 46 (EARITH -> VALUE MULOP VALUE .) ]
  ! SUMOP           [ reduce using rule 46 (EARITH -> VALUE MULOP VALUE .) ]
  ! SUBOP           [ reduce using rule 46 (EARITH -> VALUE MULOP VALUE .) ]
  ! EQ              [ reduce using rule 46 (EARITH -> VALUE MULOP VALUE .) ]
  ! NE              [ reduce using rule 46 (EARITH -> VALUE MULOP VALUE .) ]
  ! LT              [ reduce using rule 46 (EARITH -> VALUE MULOP VALUE .) ]
  ! GT              [ reduce using rule 46 (EARITH -> VALUE MULOP VALUE .) ]
  ! LE              [ reduce using rule 46 (EARITH -> VALUE MULOP VALUE .) ]
  ! GE              [ reduce using rule 46 (EARITH -> VALUE MULOP VALUE .) ]
  ! AND             [ reduce using rule 46 (EARITH -> VALUE MULOP VALUE .) ]
  ! OR              [ reduce using rule 46 (EARITH -> VALUE MULOP VALUE .) ]


state 91

    (47) EARITH -> VALUE DIVOP VALUE .
    (46) EARITH -> VALUE . MULOP VALUE
    (47) EARITH -> VALUE . DIVOP VALUE
    (48) EARITH -> VALUE . SUMOP VALUE
    (49) EARITH -> VALUE . SUBOP VALUE
    (50) ELOGIC -> VALUE . EQ VALUE
    (51) ELOGIC -> VALUE . NE VALUE
    (52) ELOGIC -> VALUE . LT VALUE
    (53) ELOGIC -> VALUE . GT VALUE
    (54) ELOGIC -> VALUE . LE VALUE
    (55) ELOGIC -> VALUE . GE VALUE
    (56) ELOGIC -> VALUE . AND VALUE
    (57) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .)
    FOR             reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .)
    DO              reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .)
    WHILE           reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .)
    ELSE            reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .)
    IF              reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .)
    PRINT           reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .)
    ID              reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .)
    FUNC            reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .)
    $end            reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .)
    CLOSE_BRACES    reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .)
    MULOP           shift and go to state 68
    DIVOP           shift and go to state 69
    SUMOP           shift and go to state 70
    SUBOP           shift and go to state 71
    EQ              shift and go to state 72
    NE              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LE              shift and go to state 76
    GE              shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79

  ! MULOP           [ reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .) ]
  ! DIVOP           [ reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .) ]
  ! SUMOP           [ reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .) ]
  ! SUBOP           [ reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .) ]
  ! EQ              [ reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .) ]
  ! NE              [ reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .) ]
  ! LT              [ reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .) ]
  ! GT              [ reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .) ]
  ! LE              [ reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .) ]
  ! GE              [ reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .) ]
  ! AND             [ reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .) ]
  ! OR              [ reduce using rule 47 (EARITH -> VALUE DIVOP VALUE .) ]


state 92

    (48) EARITH -> VALUE SUMOP VALUE .
    (46) EARITH -> VALUE . MULOP VALUE
    (47) EARITH -> VALUE . DIVOP VALUE
    (48) EARITH -> VALUE . SUMOP VALUE
    (49) EARITH -> VALUE . SUBOP VALUE
    (50) ELOGIC -> VALUE . EQ VALUE
    (51) ELOGIC -> VALUE . NE VALUE
    (52) ELOGIC -> VALUE . LT VALUE
    (53) ELOGIC -> VALUE . GT VALUE
    (54) ELOGIC -> VALUE . LE VALUE
    (55) ELOGIC -> VALUE . GE VALUE
    (56) ELOGIC -> VALUE . AND VALUE
    (57) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .)
    FOR             reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .)
    DO              reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .)
    WHILE           reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .)
    ELSE            reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .)
    IF              reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .)
    PRINT           reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .)
    ID              reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .)
    FUNC            reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .)
    $end            reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .)
    CLOSE_BRACES    reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .)
    MULOP           shift and go to state 68
    DIVOP           shift and go to state 69
    SUMOP           shift and go to state 70
    SUBOP           shift and go to state 71
    EQ              shift and go to state 72
    NE              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LE              shift and go to state 76
    GE              shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79

  ! MULOP           [ reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .) ]
  ! DIVOP           [ reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .) ]
  ! SUMOP           [ reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .) ]
  ! SUBOP           [ reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .) ]
  ! EQ              [ reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .) ]
  ! NE              [ reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .) ]
  ! LT              [ reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .) ]
  ! GT              [ reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .) ]
  ! LE              [ reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .) ]
  ! GE              [ reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .) ]
  ! AND             [ reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .) ]
  ! OR              [ reduce using rule 48 (EARITH -> VALUE SUMOP VALUE .) ]


state 93

    (49) EARITH -> VALUE SUBOP VALUE .
    (46) EARITH -> VALUE . MULOP VALUE
    (47) EARITH -> VALUE . DIVOP VALUE
    (48) EARITH -> VALUE . SUMOP VALUE
    (49) EARITH -> VALUE . SUBOP VALUE
    (50) ELOGIC -> VALUE . EQ VALUE
    (51) ELOGIC -> VALUE . NE VALUE
    (52) ELOGIC -> VALUE . LT VALUE
    (53) ELOGIC -> VALUE . GT VALUE
    (54) ELOGIC -> VALUE . LE VALUE
    (55) ELOGIC -> VALUE . GE VALUE
    (56) ELOGIC -> VALUE . AND VALUE
    (57) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .)
    FOR             reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .)
    DO              reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .)
    WHILE           reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .)
    ELSE            reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .)
    IF              reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .)
    PRINT           reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .)
    ID              reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .)
    FUNC            reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .)
    $end            reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .)
    CLOSE_BRACES    reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .)
    MULOP           shift and go to state 68
    DIVOP           shift and go to state 69
    SUMOP           shift and go to state 70
    SUBOP           shift and go to state 71
    EQ              shift and go to state 72
    NE              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LE              shift and go to state 76
    GE              shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79

  ! MULOP           [ reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .) ]
  ! DIVOP           [ reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .) ]
  ! SUMOP           [ reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .) ]
  ! SUBOP           [ reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .) ]
  ! EQ              [ reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .) ]
  ! NE              [ reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .) ]
  ! LT              [ reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .) ]
  ! GT              [ reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .) ]
  ! LE              [ reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .) ]
  ! GE              [ reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .) ]
  ! AND             [ reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .) ]
  ! OR              [ reduce using rule 49 (EARITH -> VALUE SUBOP VALUE .) ]


state 94

    (50) ELOGIC -> VALUE EQ VALUE .
    (46) EARITH -> VALUE . MULOP VALUE
    (47) EARITH -> VALUE . DIVOP VALUE
    (48) EARITH -> VALUE . SUMOP VALUE
    (49) EARITH -> VALUE . SUBOP VALUE
    (50) ELOGIC -> VALUE . EQ VALUE
    (51) ELOGIC -> VALUE . NE VALUE
    (52) ELOGIC -> VALUE . LT VALUE
    (53) ELOGIC -> VALUE . GT VALUE
    (54) ELOGIC -> VALUE . LE VALUE
    (55) ELOGIC -> VALUE . GE VALUE
    (56) ELOGIC -> VALUE . AND VALUE
    (57) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .)
    FOR             reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .)
    DO              reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .)
    WHILE           reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .)
    ELSE            reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .)
    IF              reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .)
    PRINT           reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .)
    ID              reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .)
    FUNC            reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .)
    $end            reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .)
    CLOSE_BRACES    reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .)
    MULOP           shift and go to state 68
    DIVOP           shift and go to state 69
    SUMOP           shift and go to state 70
    SUBOP           shift and go to state 71
    EQ              shift and go to state 72
    NE              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LE              shift and go to state 76
    GE              shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79

  ! MULOP           [ reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .) ]
  ! DIVOP           [ reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .) ]
  ! SUMOP           [ reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .) ]
  ! SUBOP           [ reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .) ]
  ! EQ              [ reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .) ]
  ! NE              [ reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .) ]
  ! LT              [ reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .) ]
  ! GT              [ reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .) ]
  ! LE              [ reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .) ]
  ! GE              [ reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .) ]
  ! AND             [ reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .) ]
  ! OR              [ reduce using rule 50 (ELOGIC -> VALUE EQ VALUE .) ]


state 95

    (51) ELOGIC -> VALUE NE VALUE .
    (46) EARITH -> VALUE . MULOP VALUE
    (47) EARITH -> VALUE . DIVOP VALUE
    (48) EARITH -> VALUE . SUMOP VALUE
    (49) EARITH -> VALUE . SUBOP VALUE
    (50) ELOGIC -> VALUE . EQ VALUE
    (51) ELOGIC -> VALUE . NE VALUE
    (52) ELOGIC -> VALUE . LT VALUE
    (53) ELOGIC -> VALUE . GT VALUE
    (54) ELOGIC -> VALUE . LE VALUE
    (55) ELOGIC -> VALUE . GE VALUE
    (56) ELOGIC -> VALUE . AND VALUE
    (57) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 51 (ELOGIC -> VALUE NE VALUE .)
    FOR             reduce using rule 51 (ELOGIC -> VALUE NE VALUE .)
    DO              reduce using rule 51 (ELOGIC -> VALUE NE VALUE .)
    WHILE           reduce using rule 51 (ELOGIC -> VALUE NE VALUE .)
    ELSE            reduce using rule 51 (ELOGIC -> VALUE NE VALUE .)
    IF              reduce using rule 51 (ELOGIC -> VALUE NE VALUE .)
    PRINT           reduce using rule 51 (ELOGIC -> VALUE NE VALUE .)
    ID              reduce using rule 51 (ELOGIC -> VALUE NE VALUE .)
    FUNC            reduce using rule 51 (ELOGIC -> VALUE NE VALUE .)
    $end            reduce using rule 51 (ELOGIC -> VALUE NE VALUE .)
    CLOSE_BRACES    reduce using rule 51 (ELOGIC -> VALUE NE VALUE .)
    MULOP           shift and go to state 68
    DIVOP           shift and go to state 69
    SUMOP           shift and go to state 70
    SUBOP           shift and go to state 71
    EQ              shift and go to state 72
    NE              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LE              shift and go to state 76
    GE              shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79

  ! MULOP           [ reduce using rule 51 (ELOGIC -> VALUE NE VALUE .) ]
  ! DIVOP           [ reduce using rule 51 (ELOGIC -> VALUE NE VALUE .) ]
  ! SUMOP           [ reduce using rule 51 (ELOGIC -> VALUE NE VALUE .) ]
  ! SUBOP           [ reduce using rule 51 (ELOGIC -> VALUE NE VALUE .) ]
  ! EQ              [ reduce using rule 51 (ELOGIC -> VALUE NE VALUE .) ]
  ! NE              [ reduce using rule 51 (ELOGIC -> VALUE NE VALUE .) ]
  ! LT              [ reduce using rule 51 (ELOGIC -> VALUE NE VALUE .) ]
  ! GT              [ reduce using rule 51 (ELOGIC -> VALUE NE VALUE .) ]
  ! LE              [ reduce using rule 51 (ELOGIC -> VALUE NE VALUE .) ]
  ! GE              [ reduce using rule 51 (ELOGIC -> VALUE NE VALUE .) ]
  ! AND             [ reduce using rule 51 (ELOGIC -> VALUE NE VALUE .) ]
  ! OR              [ reduce using rule 51 (ELOGIC -> VALUE NE VALUE .) ]


state 96

    (52) ELOGIC -> VALUE LT VALUE .
    (46) EARITH -> VALUE . MULOP VALUE
    (47) EARITH -> VALUE . DIVOP VALUE
    (48) EARITH -> VALUE . SUMOP VALUE
    (49) EARITH -> VALUE . SUBOP VALUE
    (50) ELOGIC -> VALUE . EQ VALUE
    (51) ELOGIC -> VALUE . NE VALUE
    (52) ELOGIC -> VALUE . LT VALUE
    (53) ELOGIC -> VALUE . GT VALUE
    (54) ELOGIC -> VALUE . LE VALUE
    (55) ELOGIC -> VALUE . GE VALUE
    (56) ELOGIC -> VALUE . AND VALUE
    (57) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 52 (ELOGIC -> VALUE LT VALUE .)
    FOR             reduce using rule 52 (ELOGIC -> VALUE LT VALUE .)
    DO              reduce using rule 52 (ELOGIC -> VALUE LT VALUE .)
    WHILE           reduce using rule 52 (ELOGIC -> VALUE LT VALUE .)
    ELSE            reduce using rule 52 (ELOGIC -> VALUE LT VALUE .)
    IF              reduce using rule 52 (ELOGIC -> VALUE LT VALUE .)
    PRINT           reduce using rule 52 (ELOGIC -> VALUE LT VALUE .)
    ID              reduce using rule 52 (ELOGIC -> VALUE LT VALUE .)
    FUNC            reduce using rule 52 (ELOGIC -> VALUE LT VALUE .)
    $end            reduce using rule 52 (ELOGIC -> VALUE LT VALUE .)
    CLOSE_BRACES    reduce using rule 52 (ELOGIC -> VALUE LT VALUE .)
    MULOP           shift and go to state 68
    DIVOP           shift and go to state 69
    SUMOP           shift and go to state 70
    SUBOP           shift and go to state 71
    EQ              shift and go to state 72
    NE              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LE              shift and go to state 76
    GE              shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79

  ! MULOP           [ reduce using rule 52 (ELOGIC -> VALUE LT VALUE .) ]
  ! DIVOP           [ reduce using rule 52 (ELOGIC -> VALUE LT VALUE .) ]
  ! SUMOP           [ reduce using rule 52 (ELOGIC -> VALUE LT VALUE .) ]
  ! SUBOP           [ reduce using rule 52 (ELOGIC -> VALUE LT VALUE .) ]
  ! EQ              [ reduce using rule 52 (ELOGIC -> VALUE LT VALUE .) ]
  ! NE              [ reduce using rule 52 (ELOGIC -> VALUE LT VALUE .) ]
  ! LT              [ reduce using rule 52 (ELOGIC -> VALUE LT VALUE .) ]
  ! GT              [ reduce using rule 52 (ELOGIC -> VALUE LT VALUE .) ]
  ! LE              [ reduce using rule 52 (ELOGIC -> VALUE LT VALUE .) ]
  ! GE              [ reduce using rule 52 (ELOGIC -> VALUE LT VALUE .) ]
  ! AND             [ reduce using rule 52 (ELOGIC -> VALUE LT VALUE .) ]
  ! OR              [ reduce using rule 52 (ELOGIC -> VALUE LT VALUE .) ]


state 97

    (53) ELOGIC -> VALUE GT VALUE .
    (46) EARITH -> VALUE . MULOP VALUE
    (47) EARITH -> VALUE . DIVOP VALUE
    (48) EARITH -> VALUE . SUMOP VALUE
    (49) EARITH -> VALUE . SUBOP VALUE
    (50) ELOGIC -> VALUE . EQ VALUE
    (51) ELOGIC -> VALUE . NE VALUE
    (52) ELOGIC -> VALUE . LT VALUE
    (53) ELOGIC -> VALUE . GT VALUE
    (54) ELOGIC -> VALUE . LE VALUE
    (55) ELOGIC -> VALUE . GE VALUE
    (56) ELOGIC -> VALUE . AND VALUE
    (57) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 53 (ELOGIC -> VALUE GT VALUE .)
    FOR             reduce using rule 53 (ELOGIC -> VALUE GT VALUE .)
    DO              reduce using rule 53 (ELOGIC -> VALUE GT VALUE .)
    WHILE           reduce using rule 53 (ELOGIC -> VALUE GT VALUE .)
    ELSE            reduce using rule 53 (ELOGIC -> VALUE GT VALUE .)
    IF              reduce using rule 53 (ELOGIC -> VALUE GT VALUE .)
    PRINT           reduce using rule 53 (ELOGIC -> VALUE GT VALUE .)
    ID              reduce using rule 53 (ELOGIC -> VALUE GT VALUE .)
    FUNC            reduce using rule 53 (ELOGIC -> VALUE GT VALUE .)
    $end            reduce using rule 53 (ELOGIC -> VALUE GT VALUE .)
    CLOSE_BRACES    reduce using rule 53 (ELOGIC -> VALUE GT VALUE .)
    MULOP           shift and go to state 68
    DIVOP           shift and go to state 69
    SUMOP           shift and go to state 70
    SUBOP           shift and go to state 71
    EQ              shift and go to state 72
    NE              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LE              shift and go to state 76
    GE              shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79

  ! MULOP           [ reduce using rule 53 (ELOGIC -> VALUE GT VALUE .) ]
  ! DIVOP           [ reduce using rule 53 (ELOGIC -> VALUE GT VALUE .) ]
  ! SUMOP           [ reduce using rule 53 (ELOGIC -> VALUE GT VALUE .) ]
  ! SUBOP           [ reduce using rule 53 (ELOGIC -> VALUE GT VALUE .) ]
  ! EQ              [ reduce using rule 53 (ELOGIC -> VALUE GT VALUE .) ]
  ! NE              [ reduce using rule 53 (ELOGIC -> VALUE GT VALUE .) ]
  ! LT              [ reduce using rule 53 (ELOGIC -> VALUE GT VALUE .) ]
  ! GT              [ reduce using rule 53 (ELOGIC -> VALUE GT VALUE .) ]
  ! LE              [ reduce using rule 53 (ELOGIC -> VALUE GT VALUE .) ]
  ! GE              [ reduce using rule 53 (ELOGIC -> VALUE GT VALUE .) ]
  ! AND             [ reduce using rule 53 (ELOGIC -> VALUE GT VALUE .) ]
  ! OR              [ reduce using rule 53 (ELOGIC -> VALUE GT VALUE .) ]


state 98

    (54) ELOGIC -> VALUE LE VALUE .
    (46) EARITH -> VALUE . MULOP VALUE
    (47) EARITH -> VALUE . DIVOP VALUE
    (48) EARITH -> VALUE . SUMOP VALUE
    (49) EARITH -> VALUE . SUBOP VALUE
    (50) ELOGIC -> VALUE . EQ VALUE
    (51) ELOGIC -> VALUE . NE VALUE
    (52) ELOGIC -> VALUE . LT VALUE
    (53) ELOGIC -> VALUE . GT VALUE
    (54) ELOGIC -> VALUE . LE VALUE
    (55) ELOGIC -> VALUE . GE VALUE
    (56) ELOGIC -> VALUE . AND VALUE
    (57) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 54 (ELOGIC -> VALUE LE VALUE .)
    FOR             reduce using rule 54 (ELOGIC -> VALUE LE VALUE .)
    DO              reduce using rule 54 (ELOGIC -> VALUE LE VALUE .)
    WHILE           reduce using rule 54 (ELOGIC -> VALUE LE VALUE .)
    ELSE            reduce using rule 54 (ELOGIC -> VALUE LE VALUE .)
    IF              reduce using rule 54 (ELOGIC -> VALUE LE VALUE .)
    PRINT           reduce using rule 54 (ELOGIC -> VALUE LE VALUE .)
    ID              reduce using rule 54 (ELOGIC -> VALUE LE VALUE .)
    FUNC            reduce using rule 54 (ELOGIC -> VALUE LE VALUE .)
    $end            reduce using rule 54 (ELOGIC -> VALUE LE VALUE .)
    CLOSE_BRACES    reduce using rule 54 (ELOGIC -> VALUE LE VALUE .)
    MULOP           shift and go to state 68
    DIVOP           shift and go to state 69
    SUMOP           shift and go to state 70
    SUBOP           shift and go to state 71
    EQ              shift and go to state 72
    NE              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LE              shift and go to state 76
    GE              shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79

  ! MULOP           [ reduce using rule 54 (ELOGIC -> VALUE LE VALUE .) ]
  ! DIVOP           [ reduce using rule 54 (ELOGIC -> VALUE LE VALUE .) ]
  ! SUMOP           [ reduce using rule 54 (ELOGIC -> VALUE LE VALUE .) ]
  ! SUBOP           [ reduce using rule 54 (ELOGIC -> VALUE LE VALUE .) ]
  ! EQ              [ reduce using rule 54 (ELOGIC -> VALUE LE VALUE .) ]
  ! NE              [ reduce using rule 54 (ELOGIC -> VALUE LE VALUE .) ]
  ! LT              [ reduce using rule 54 (ELOGIC -> VALUE LE VALUE .) ]
  ! GT              [ reduce using rule 54 (ELOGIC -> VALUE LE VALUE .) ]
  ! LE              [ reduce using rule 54 (ELOGIC -> VALUE LE VALUE .) ]
  ! GE              [ reduce using rule 54 (ELOGIC -> VALUE LE VALUE .) ]
  ! AND             [ reduce using rule 54 (ELOGIC -> VALUE LE VALUE .) ]
  ! OR              [ reduce using rule 54 (ELOGIC -> VALUE LE VALUE .) ]


state 99

    (55) ELOGIC -> VALUE GE VALUE .
    (46) EARITH -> VALUE . MULOP VALUE
    (47) EARITH -> VALUE . DIVOP VALUE
    (48) EARITH -> VALUE . SUMOP VALUE
    (49) EARITH -> VALUE . SUBOP VALUE
    (50) ELOGIC -> VALUE . EQ VALUE
    (51) ELOGIC -> VALUE . NE VALUE
    (52) ELOGIC -> VALUE . LT VALUE
    (53) ELOGIC -> VALUE . GT VALUE
    (54) ELOGIC -> VALUE . LE VALUE
    (55) ELOGIC -> VALUE . GE VALUE
    (56) ELOGIC -> VALUE . AND VALUE
    (57) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 55 (ELOGIC -> VALUE GE VALUE .)
    FOR             reduce using rule 55 (ELOGIC -> VALUE GE VALUE .)
    DO              reduce using rule 55 (ELOGIC -> VALUE GE VALUE .)
    WHILE           reduce using rule 55 (ELOGIC -> VALUE GE VALUE .)
    ELSE            reduce using rule 55 (ELOGIC -> VALUE GE VALUE .)
    IF              reduce using rule 55 (ELOGIC -> VALUE GE VALUE .)
    PRINT           reduce using rule 55 (ELOGIC -> VALUE GE VALUE .)
    ID              reduce using rule 55 (ELOGIC -> VALUE GE VALUE .)
    FUNC            reduce using rule 55 (ELOGIC -> VALUE GE VALUE .)
    $end            reduce using rule 55 (ELOGIC -> VALUE GE VALUE .)
    CLOSE_BRACES    reduce using rule 55 (ELOGIC -> VALUE GE VALUE .)
    MULOP           shift and go to state 68
    DIVOP           shift and go to state 69
    SUMOP           shift and go to state 70
    SUBOP           shift and go to state 71
    EQ              shift and go to state 72
    NE              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LE              shift and go to state 76
    GE              shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79

  ! MULOP           [ reduce using rule 55 (ELOGIC -> VALUE GE VALUE .) ]
  ! DIVOP           [ reduce using rule 55 (ELOGIC -> VALUE GE VALUE .) ]
  ! SUMOP           [ reduce using rule 55 (ELOGIC -> VALUE GE VALUE .) ]
  ! SUBOP           [ reduce using rule 55 (ELOGIC -> VALUE GE VALUE .) ]
  ! EQ              [ reduce using rule 55 (ELOGIC -> VALUE GE VALUE .) ]
  ! NE              [ reduce using rule 55 (ELOGIC -> VALUE GE VALUE .) ]
  ! LT              [ reduce using rule 55 (ELOGIC -> VALUE GE VALUE .) ]
  ! GT              [ reduce using rule 55 (ELOGIC -> VALUE GE VALUE .) ]
  ! LE              [ reduce using rule 55 (ELOGIC -> VALUE GE VALUE .) ]
  ! GE              [ reduce using rule 55 (ELOGIC -> VALUE GE VALUE .) ]
  ! AND             [ reduce using rule 55 (ELOGIC -> VALUE GE VALUE .) ]
  ! OR              [ reduce using rule 55 (ELOGIC -> VALUE GE VALUE .) ]


state 100

    (56) ELOGIC -> VALUE AND VALUE .
    (46) EARITH -> VALUE . MULOP VALUE
    (47) EARITH -> VALUE . DIVOP VALUE
    (48) EARITH -> VALUE . SUMOP VALUE
    (49) EARITH -> VALUE . SUBOP VALUE
    (50) ELOGIC -> VALUE . EQ VALUE
    (51) ELOGIC -> VALUE . NE VALUE
    (52) ELOGIC -> VALUE . LT VALUE
    (53) ELOGIC -> VALUE . GT VALUE
    (54) ELOGIC -> VALUE . LE VALUE
    (55) ELOGIC -> VALUE . GE VALUE
    (56) ELOGIC -> VALUE . AND VALUE
    (57) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 56 (ELOGIC -> VALUE AND VALUE .)
    FOR             reduce using rule 56 (ELOGIC -> VALUE AND VALUE .)
    DO              reduce using rule 56 (ELOGIC -> VALUE AND VALUE .)
    WHILE           reduce using rule 56 (ELOGIC -> VALUE AND VALUE .)
    ELSE            reduce using rule 56 (ELOGIC -> VALUE AND VALUE .)
    IF              reduce using rule 56 (ELOGIC -> VALUE AND VALUE .)
    PRINT           reduce using rule 56 (ELOGIC -> VALUE AND VALUE .)
    ID              reduce using rule 56 (ELOGIC -> VALUE AND VALUE .)
    FUNC            reduce using rule 56 (ELOGIC -> VALUE AND VALUE .)
    $end            reduce using rule 56 (ELOGIC -> VALUE AND VALUE .)
    CLOSE_BRACES    reduce using rule 56 (ELOGIC -> VALUE AND VALUE .)
    MULOP           shift and go to state 68
    DIVOP           shift and go to state 69
    SUMOP           shift and go to state 70
    SUBOP           shift and go to state 71
    EQ              shift and go to state 72
    NE              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LE              shift and go to state 76
    GE              shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79

  ! MULOP           [ reduce using rule 56 (ELOGIC -> VALUE AND VALUE .) ]
  ! DIVOP           [ reduce using rule 56 (ELOGIC -> VALUE AND VALUE .) ]
  ! SUMOP           [ reduce using rule 56 (ELOGIC -> VALUE AND VALUE .) ]
  ! SUBOP           [ reduce using rule 56 (ELOGIC -> VALUE AND VALUE .) ]
  ! EQ              [ reduce using rule 56 (ELOGIC -> VALUE AND VALUE .) ]
  ! NE              [ reduce using rule 56 (ELOGIC -> VALUE AND VALUE .) ]
  ! LT              [ reduce using rule 56 (ELOGIC -> VALUE AND VALUE .) ]
  ! GT              [ reduce using rule 56 (ELOGIC -> VALUE AND VALUE .) ]
  ! LE              [ reduce using rule 56 (ELOGIC -> VALUE AND VALUE .) ]
  ! GE              [ reduce using rule 56 (ELOGIC -> VALUE AND VALUE .) ]
  ! AND             [ reduce using rule 56 (ELOGIC -> VALUE AND VALUE .) ]
  ! OR              [ reduce using rule 56 (ELOGIC -> VALUE AND VALUE .) ]


state 101

    (57) ELOGIC -> VALUE OR VALUE .
    (46) EARITH -> VALUE . MULOP VALUE
    (47) EARITH -> VALUE . DIVOP VALUE
    (48) EARITH -> VALUE . SUMOP VALUE
    (49) EARITH -> VALUE . SUBOP VALUE
    (50) ELOGIC -> VALUE . EQ VALUE
    (51) ELOGIC -> VALUE . NE VALUE
    (52) ELOGIC -> VALUE . LT VALUE
    (53) ELOGIC -> VALUE . GT VALUE
    (54) ELOGIC -> VALUE . LE VALUE
    (55) ELOGIC -> VALUE . GE VALUE
    (56) ELOGIC -> VALUE . AND VALUE
    (57) ELOGIC -> VALUE . OR VALUE

  ! shift/reduce conflict for MULOP resolved as shift
  ! shift/reduce conflict for DIVOP resolved as shift
  ! shift/reduce conflict for SUMOP resolved as shift
  ! shift/reduce conflict for SUBOP resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS reduce using rule 57 (ELOGIC -> VALUE OR VALUE .)
    FOR             reduce using rule 57 (ELOGIC -> VALUE OR VALUE .)
    DO              reduce using rule 57 (ELOGIC -> VALUE OR VALUE .)
    WHILE           reduce using rule 57 (ELOGIC -> VALUE OR VALUE .)
    ELSE            reduce using rule 57 (ELOGIC -> VALUE OR VALUE .)
    IF              reduce using rule 57 (ELOGIC -> VALUE OR VALUE .)
    PRINT           reduce using rule 57 (ELOGIC -> VALUE OR VALUE .)
    ID              reduce using rule 57 (ELOGIC -> VALUE OR VALUE .)
    FUNC            reduce using rule 57 (ELOGIC -> VALUE OR VALUE .)
    $end            reduce using rule 57 (ELOGIC -> VALUE OR VALUE .)
    CLOSE_BRACES    reduce using rule 57 (ELOGIC -> VALUE OR VALUE .)
    MULOP           shift and go to state 68
    DIVOP           shift and go to state 69
    SUMOP           shift and go to state 70
    SUBOP           shift and go to state 71
    EQ              shift and go to state 72
    NE              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LE              shift and go to state 76
    GE              shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79

  ! MULOP           [ reduce using rule 57 (ELOGIC -> VALUE OR VALUE .) ]
  ! DIVOP           [ reduce using rule 57 (ELOGIC -> VALUE OR VALUE .) ]
  ! SUMOP           [ reduce using rule 57 (ELOGIC -> VALUE OR VALUE .) ]
  ! SUBOP           [ reduce using rule 57 (ELOGIC -> VALUE OR VALUE .) ]
  ! EQ              [ reduce using rule 57 (ELOGIC -> VALUE OR VALUE .) ]
  ! NE              [ reduce using rule 57 (ELOGIC -> VALUE OR VALUE .) ]
  ! LT              [ reduce using rule 57 (ELOGIC -> VALUE OR VALUE .) ]
  ! GT              [ reduce using rule 57 (ELOGIC -> VALUE OR VALUE .) ]
  ! LE              [ reduce using rule 57 (ELOGIC -> VALUE OR VALUE .) ]
  ! GE              [ reduce using rule 57 (ELOGIC -> VALUE OR VALUE .) ]
  ! AND             [ reduce using rule 57 (ELOGIC -> VALUE OR VALUE .) ]
  ! OR              [ reduce using rule 57 (ELOGIC -> VALUE OR VALUE .) ]


state 102

    (21) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES . STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES . STRUCTURES CLOSE_BRACES
    (3) STRUCTURES -> . FOR_LOOP STRUCTURES
    (4) STRUCTURES -> . DO_WHILE_LOOP STRUCTURES
    (5) STRUCTURES -> . WHILE_LOOP STRUCTURES
    (6) STRUCTURES -> . ELSE_CONDITIONAL STRUCTURES
    (7) STRUCTURES -> . IF_CONDITIONAL STRUCTURES
    (8) STRUCTURES -> . OUTPUT STRUCTURES
    (9) STRUCTURES -> . INPUT STRUCTURES
    (10) STRUCTURES -> . VAR STRUCTURES
    (11) STRUCTURES -> . FUNCTION STRUCTURES
    (12) STRUCTURES -> . FUNC_CALL STRUCTURES
    (13) STRUCTURES -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (27) FUNCTION -> . FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    FUNC            shift and go to state 21
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    STRUCTURES                     shift and go to state 108
    ELSE_CONDITIONAL               shift and go to state 6
    FOR_LOOP                       shift and go to state 3
    DO_WHILE_LOOP                  shift and go to state 4
    WHILE_LOOP                     shift and go to state 5
    IF_CONDITIONAL                 shift and go to state 7
    OUTPUT                         shift and go to state 8
    INPUT                          shift and go to state 9
    VAR                            shift and go to state 10
    FUNCTION                       shift and go to state 11
    FUNC_CALL                      shift and go to state 12
    empty                          shift and go to state 13

state 103

    (18) INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .

    FOR             reduce using rule 18 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    DO              reduce using rule 18 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 18 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 18 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    IF              reduce using rule 18 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 18 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    ID              reduce using rule 18 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    FUNC            reduce using rule 18 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    $end            reduce using rule 18 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CLOSE_BRACES    reduce using rule 18 (INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS .)


state 104

    (27) FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES . NON_FUNCTION CLOSE_BRACES
    (28) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (29) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (30) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (32) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (33) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (34) NON_FUNCTION -> . INPUT NON_FUNCTION
    (35) NON_FUNCTION -> . VAR NON_FUNCTION
    (36) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (37) NON_FUNCTION -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    NON_FUNCTION                   shift and go to state 109
    FOR_LOOP                       shift and go to state 110
    DO_WHILE_LOOP                  shift and go to state 111
    WHILE_LOOP                     shift and go to state 112
    ELSE_CONDITIONAL               shift and go to state 113
    IF_CONDITIONAL                 shift and go to state 114
    OUTPUT                         shift and go to state 115
    INPUT                          shift and go to state 116
    VAR                            shift and go to state 117
    FUNC_CALL                      shift and go to state 118
    empty                          shift and go to state 119

state 105

    (26) FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 120


state 106

    (25) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS . EXP CLOSE_PARENTHESIS
    (39) EXP -> . VALUE
    (40) VALUE -> . EARITH
    (41) VALUE -> . ELOGIC
    (42) VALUE -> . OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS
    (43) VALUE -> . VAL
    (44) VALUE -> . ID
    (45) VALUE -> . MATRIX_VAL
    (46) EARITH -> . VALUE MULOP VALUE
    (47) EARITH -> . VALUE DIVOP VALUE
    (48) EARITH -> . VALUE SUMOP VALUE
    (49) EARITH -> . VALUE SUBOP VALUE
    (50) ELOGIC -> . VALUE EQ VALUE
    (51) ELOGIC -> . VALUE NE VALUE
    (52) ELOGIC -> . VALUE LT VALUE
    (53) ELOGIC -> . VALUE GT VALUE
    (54) ELOGIC -> . VALUE LE VALUE
    (55) ELOGIC -> . VALUE GE VALUE
    (56) ELOGIC -> . VALUE AND VALUE
    (57) ELOGIC -> . VALUE OR VALUE

    OPEN_PARENTHESIS shift and go to state 44
    VAL             shift and go to state 49
    ID              shift and go to state 50
    MATRIX_VAL      shift and go to state 51

    EXP                            shift and go to state 121
    VALUE                          shift and go to state 46
    EARITH                         shift and go to state 47
    ELOGIC                         shift and go to state 48

state 107

    (24) WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 122


state 108

    (21) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES . CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 123


state 109

    (27) FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 124


state 110

    (28) NON_FUNCTION -> FOR_LOOP . NON_FUNCTION
    (28) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (29) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (30) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (32) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (33) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (34) NON_FUNCTION -> . INPUT NON_FUNCTION
    (35) NON_FUNCTION -> . VAR NON_FUNCTION
    (36) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (37) NON_FUNCTION -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    FOR_LOOP                       shift and go to state 110
    NON_FUNCTION                   shift and go to state 125
    DO_WHILE_LOOP                  shift and go to state 111
    WHILE_LOOP                     shift and go to state 112
    ELSE_CONDITIONAL               shift and go to state 113
    IF_CONDITIONAL                 shift and go to state 114
    OUTPUT                         shift and go to state 115
    INPUT                          shift and go to state 116
    VAR                            shift and go to state 117
    FUNC_CALL                      shift and go to state 118
    empty                          shift and go to state 119

state 111

    (29) NON_FUNCTION -> DO_WHILE_LOOP . NON_FUNCTION
    (28) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (29) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (30) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (32) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (33) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (34) NON_FUNCTION -> . INPUT NON_FUNCTION
    (35) NON_FUNCTION -> . VAR NON_FUNCTION
    (36) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (37) NON_FUNCTION -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    DO_WHILE_LOOP                  shift and go to state 111
    NON_FUNCTION                   shift and go to state 126
    FOR_LOOP                       shift and go to state 110
    WHILE_LOOP                     shift and go to state 112
    ELSE_CONDITIONAL               shift and go to state 113
    IF_CONDITIONAL                 shift and go to state 114
    OUTPUT                         shift and go to state 115
    INPUT                          shift and go to state 116
    VAR                            shift and go to state 117
    FUNC_CALL                      shift and go to state 118
    empty                          shift and go to state 119

state 112

    (30) NON_FUNCTION -> WHILE_LOOP . NON_FUNCTION
    (28) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (29) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (30) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (32) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (33) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (34) NON_FUNCTION -> . INPUT NON_FUNCTION
    (35) NON_FUNCTION -> . VAR NON_FUNCTION
    (36) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (37) NON_FUNCTION -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    WHILE_LOOP                     shift and go to state 112
    NON_FUNCTION                   shift and go to state 127
    FOR_LOOP                       shift and go to state 110
    DO_WHILE_LOOP                  shift and go to state 111
    ELSE_CONDITIONAL               shift and go to state 113
    IF_CONDITIONAL                 shift and go to state 114
    OUTPUT                         shift and go to state 115
    INPUT                          shift and go to state 116
    VAR                            shift and go to state 117
    FUNC_CALL                      shift and go to state 118
    empty                          shift and go to state 119

state 113

    (31) NON_FUNCTION -> ELSE_CONDITIONAL . NON_FUNCTION
    (28) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (29) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (30) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (32) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (33) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (34) NON_FUNCTION -> . INPUT NON_FUNCTION
    (35) NON_FUNCTION -> . VAR NON_FUNCTION
    (36) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (37) NON_FUNCTION -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    ELSE_CONDITIONAL               shift and go to state 113
    NON_FUNCTION                   shift and go to state 128
    FOR_LOOP                       shift and go to state 110
    DO_WHILE_LOOP                  shift and go to state 111
    WHILE_LOOP                     shift and go to state 112
    IF_CONDITIONAL                 shift and go to state 114
    OUTPUT                         shift and go to state 115
    INPUT                          shift and go to state 116
    VAR                            shift and go to state 117
    FUNC_CALL                      shift and go to state 118
    empty                          shift and go to state 119

state 114

    (32) NON_FUNCTION -> IF_CONDITIONAL . NON_FUNCTION
    (28) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (29) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (30) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (32) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (33) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (34) NON_FUNCTION -> . INPUT NON_FUNCTION
    (35) NON_FUNCTION -> . VAR NON_FUNCTION
    (36) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (37) NON_FUNCTION -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    IF_CONDITIONAL                 shift and go to state 114
    NON_FUNCTION                   shift and go to state 129
    FOR_LOOP                       shift and go to state 110
    DO_WHILE_LOOP                  shift and go to state 111
    WHILE_LOOP                     shift and go to state 112
    ELSE_CONDITIONAL               shift and go to state 113
    OUTPUT                         shift and go to state 115
    INPUT                          shift and go to state 116
    VAR                            shift and go to state 117
    FUNC_CALL                      shift and go to state 118
    empty                          shift and go to state 119

state 115

    (33) NON_FUNCTION -> OUTPUT . NON_FUNCTION
    (28) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (29) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (30) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (32) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (33) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (34) NON_FUNCTION -> . INPUT NON_FUNCTION
    (35) NON_FUNCTION -> . VAR NON_FUNCTION
    (36) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (37) NON_FUNCTION -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    OUTPUT                         shift and go to state 115
    NON_FUNCTION                   shift and go to state 130
    FOR_LOOP                       shift and go to state 110
    DO_WHILE_LOOP                  shift and go to state 111
    WHILE_LOOP                     shift and go to state 112
    ELSE_CONDITIONAL               shift and go to state 113
    IF_CONDITIONAL                 shift and go to state 114
    INPUT                          shift and go to state 116
    VAR                            shift and go to state 117
    FUNC_CALL                      shift and go to state 118
    empty                          shift and go to state 119

state 116

    (34) NON_FUNCTION -> INPUT . NON_FUNCTION
    (28) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (29) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (30) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (32) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (33) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (34) NON_FUNCTION -> . INPUT NON_FUNCTION
    (35) NON_FUNCTION -> . VAR NON_FUNCTION
    (36) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (37) NON_FUNCTION -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    INPUT                          shift and go to state 116
    NON_FUNCTION                   shift and go to state 131
    FOR_LOOP                       shift and go to state 110
    DO_WHILE_LOOP                  shift and go to state 111
    WHILE_LOOP                     shift and go to state 112
    ELSE_CONDITIONAL               shift and go to state 113
    IF_CONDITIONAL                 shift and go to state 114
    OUTPUT                         shift and go to state 115
    VAR                            shift and go to state 117
    FUNC_CALL                      shift and go to state 118
    empty                          shift and go to state 119

state 117

    (35) NON_FUNCTION -> VAR . NON_FUNCTION
    (28) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (29) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (30) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (32) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (33) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (34) NON_FUNCTION -> . INPUT NON_FUNCTION
    (35) NON_FUNCTION -> . VAR NON_FUNCTION
    (36) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (37) NON_FUNCTION -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    VAR                            shift and go to state 117
    NON_FUNCTION                   shift and go to state 132
    FOR_LOOP                       shift and go to state 110
    DO_WHILE_LOOP                  shift and go to state 111
    WHILE_LOOP                     shift and go to state 112
    ELSE_CONDITIONAL               shift and go to state 113
    IF_CONDITIONAL                 shift and go to state 114
    OUTPUT                         shift and go to state 115
    INPUT                          shift and go to state 116
    FUNC_CALL                      shift and go to state 118
    empty                          shift and go to state 119

state 118

    (36) NON_FUNCTION -> FUNC_CALL . NON_FUNCTION
    (28) NON_FUNCTION -> . FOR_LOOP NON_FUNCTION
    (29) NON_FUNCTION -> . DO_WHILE_LOOP NON_FUNCTION
    (30) NON_FUNCTION -> . WHILE_LOOP NON_FUNCTION
    (31) NON_FUNCTION -> . ELSE_CONDITIONAL NON_FUNCTION
    (32) NON_FUNCTION -> . IF_CONDITIONAL NON_FUNCTION
    (33) NON_FUNCTION -> . OUTPUT NON_FUNCTION
    (34) NON_FUNCTION -> . INPUT NON_FUNCTION
    (35) NON_FUNCTION -> . VAR NON_FUNCTION
    (36) NON_FUNCTION -> . FUNC_CALL NON_FUNCTION
    (37) NON_FUNCTION -> . empty
    (26) FOR_LOOP -> . FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (25) DO_WHILE_LOOP -> . DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (24) WHILE_LOOP -> . WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES
    (21) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> . IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES
    (19) OUTPUT -> . PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS
    (20) OUTPUT -> . PRINT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS
    (17) INPUT -> . ID COMMA INPUT
    (18) INPUT -> . ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (14) VAR -> . ID COMMA VAR
    (15) VAR -> . ID IS_VALUE EXP
    (16) VAR -> . ID IS_VALUE MATRIX
    (38) FUNC_CALL -> . ID OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (1) empty -> .

    FOR             shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    ELSE            shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    ID              shift and go to state 20
    CLOSE_BRACES    reduce using rule 1 (empty -> .)

    FUNC_CALL                      shift and go to state 118
    NON_FUNCTION                   shift and go to state 133
    FOR_LOOP                       shift and go to state 110
    DO_WHILE_LOOP                  shift and go to state 111
    WHILE_LOOP                     shift and go to state 112
    ELSE_CONDITIONAL               shift and go to state 113
    IF_CONDITIONAL                 shift and go to state 114
    OUTPUT                         shift and go to state 115
    INPUT                          shift and go to state 116
    VAR                            shift and go to state 117
    empty                          shift and go to state 119

state 119

    (37) NON_FUNCTION -> empty .

    CLOSE_BRACES    reduce using rule 37 (NON_FUNCTION -> empty .)


state 120

    (26) FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .

    FOR             reduce using rule 26 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    DO              reduce using rule 26 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    WHILE           reduce using rule 26 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ELSE            reduce using rule 26 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    IF              reduce using rule 26 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    PRINT           reduce using rule 26 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ID              reduce using rule 26 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    FUNC            reduce using rule 26 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    $end            reduce using rule 26 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 26 (FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)


state 121

    (25) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 134


state 122

    (24) WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .

    FOR             reduce using rule 24 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    DO              reduce using rule 24 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    WHILE           reduce using rule 24 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ELSE            reduce using rule 24 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    IF              reduce using rule 24 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    PRINT           reduce using rule 24 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ID              reduce using rule 24 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    FUNC            reduce using rule 24 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    $end            reduce using rule 24 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 24 (WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)


state 123

    (21) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES . ELSE_CONDITIONAL
    (22) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .
    (23) ELSE_CONDITIONAL -> . ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES

  ! shift/reduce conflict for ELSE resolved as shift
    FOR             reduce using rule 22 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    DO              reduce using rule 22 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    WHILE           reduce using rule 22 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    IF              reduce using rule 22 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    PRINT           reduce using rule 22 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ID              reduce using rule 22 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    FUNC            reduce using rule 22 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    $end            reduce using rule 22 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 22 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .)
    ELSE            shift and go to state 17

  ! ELSE            [ reduce using rule 22 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES .) ]

    ELSE_CONDITIONAL               shift and go to state 135

state 124

    (27) FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .

    FOR             reduce using rule 27 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    DO              reduce using rule 27 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    WHILE           reduce using rule 27 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    ELSE            reduce using rule 27 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    IF              reduce using rule 27 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    PRINT           reduce using rule 27 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    ID              reduce using rule 27 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    FUNC            reduce using rule 27 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    $end            reduce using rule 27 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 27 (FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES .)


state 125

    (28) NON_FUNCTION -> FOR_LOOP NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 28 (NON_FUNCTION -> FOR_LOOP NON_FUNCTION .)


state 126

    (29) NON_FUNCTION -> DO_WHILE_LOOP NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 29 (NON_FUNCTION -> DO_WHILE_LOOP NON_FUNCTION .)


state 127

    (30) NON_FUNCTION -> WHILE_LOOP NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 30 (NON_FUNCTION -> WHILE_LOOP NON_FUNCTION .)


state 128

    (31) NON_FUNCTION -> ELSE_CONDITIONAL NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 31 (NON_FUNCTION -> ELSE_CONDITIONAL NON_FUNCTION .)


state 129

    (32) NON_FUNCTION -> IF_CONDITIONAL NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 32 (NON_FUNCTION -> IF_CONDITIONAL NON_FUNCTION .)


state 130

    (33) NON_FUNCTION -> OUTPUT NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 33 (NON_FUNCTION -> OUTPUT NON_FUNCTION .)


state 131

    (34) NON_FUNCTION -> INPUT NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 34 (NON_FUNCTION -> INPUT NON_FUNCTION .)


state 132

    (35) NON_FUNCTION -> VAR NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 35 (NON_FUNCTION -> VAR NON_FUNCTION .)


state 133

    (36) NON_FUNCTION -> FUNC_CALL NON_FUNCTION .

    CLOSE_BRACES    reduce using rule 36 (NON_FUNCTION -> FUNC_CALL NON_FUNCTION .)


state 134

    (25) DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .

    FOR             reduce using rule 25 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    DO              reduce using rule 25 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    WHILE           reduce using rule 25 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 25 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    IF              reduce using rule 25 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    PRINT           reduce using rule 25 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    ID              reduce using rule 25 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    FUNC            reduce using rule 25 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    $end            reduce using rule 25 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)
    CLOSE_BRACES    reduce using rule 25 (DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS .)


state 135

    (21) IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .

    FOR             reduce using rule 21 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    DO              reduce using rule 21 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    WHILE           reduce using rule 21 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    ELSE            reduce using rule 21 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    IF              reduce using rule 21 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    PRINT           reduce using rule 21 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    ID              reduce using rule 21 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    FUNC            reduce using rule 21 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    $end            reduce using rule 21 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)
    CLOSE_BRACES    reduce using rule 21 (IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MULOP in state 90 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 90 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 90 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 90 resolved as shift
WARNING: shift/reduce conflict for EQ in state 90 resolved as shift
WARNING: shift/reduce conflict for NE in state 90 resolved as shift
WARNING: shift/reduce conflict for LT in state 90 resolved as shift
WARNING: shift/reduce conflict for GT in state 90 resolved as shift
WARNING: shift/reduce conflict for LE in state 90 resolved as shift
WARNING: shift/reduce conflict for GE in state 90 resolved as shift
WARNING: shift/reduce conflict for AND in state 90 resolved as shift
WARNING: shift/reduce conflict for OR in state 90 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 91 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 91 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 91 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 91 resolved as shift
WARNING: shift/reduce conflict for EQ in state 91 resolved as shift
WARNING: shift/reduce conflict for NE in state 91 resolved as shift
WARNING: shift/reduce conflict for LT in state 91 resolved as shift
WARNING: shift/reduce conflict for GT in state 91 resolved as shift
WARNING: shift/reduce conflict for LE in state 91 resolved as shift
WARNING: shift/reduce conflict for GE in state 91 resolved as shift
WARNING: shift/reduce conflict for AND in state 91 resolved as shift
WARNING: shift/reduce conflict for OR in state 91 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 92 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 92 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 92 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 92 resolved as shift
WARNING: shift/reduce conflict for EQ in state 92 resolved as shift
WARNING: shift/reduce conflict for NE in state 92 resolved as shift
WARNING: shift/reduce conflict for LT in state 92 resolved as shift
WARNING: shift/reduce conflict for GT in state 92 resolved as shift
WARNING: shift/reduce conflict for LE in state 92 resolved as shift
WARNING: shift/reduce conflict for GE in state 92 resolved as shift
WARNING: shift/reduce conflict for AND in state 92 resolved as shift
WARNING: shift/reduce conflict for OR in state 92 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 93 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 93 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 93 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 93 resolved as shift
WARNING: shift/reduce conflict for EQ in state 93 resolved as shift
WARNING: shift/reduce conflict for NE in state 93 resolved as shift
WARNING: shift/reduce conflict for LT in state 93 resolved as shift
WARNING: shift/reduce conflict for GT in state 93 resolved as shift
WARNING: shift/reduce conflict for LE in state 93 resolved as shift
WARNING: shift/reduce conflict for GE in state 93 resolved as shift
WARNING: shift/reduce conflict for AND in state 93 resolved as shift
WARNING: shift/reduce conflict for OR in state 93 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 94 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 94 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 94 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 94 resolved as shift
WARNING: shift/reduce conflict for EQ in state 94 resolved as shift
WARNING: shift/reduce conflict for NE in state 94 resolved as shift
WARNING: shift/reduce conflict for LT in state 94 resolved as shift
WARNING: shift/reduce conflict for GT in state 94 resolved as shift
WARNING: shift/reduce conflict for LE in state 94 resolved as shift
WARNING: shift/reduce conflict for GE in state 94 resolved as shift
WARNING: shift/reduce conflict for AND in state 94 resolved as shift
WARNING: shift/reduce conflict for OR in state 94 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 95 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 95 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 95 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 95 resolved as shift
WARNING: shift/reduce conflict for EQ in state 95 resolved as shift
WARNING: shift/reduce conflict for NE in state 95 resolved as shift
WARNING: shift/reduce conflict for LT in state 95 resolved as shift
WARNING: shift/reduce conflict for GT in state 95 resolved as shift
WARNING: shift/reduce conflict for LE in state 95 resolved as shift
WARNING: shift/reduce conflict for GE in state 95 resolved as shift
WARNING: shift/reduce conflict for AND in state 95 resolved as shift
WARNING: shift/reduce conflict for OR in state 95 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 96 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 96 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 96 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 96 resolved as shift
WARNING: shift/reduce conflict for EQ in state 96 resolved as shift
WARNING: shift/reduce conflict for NE in state 96 resolved as shift
WARNING: shift/reduce conflict for LT in state 96 resolved as shift
WARNING: shift/reduce conflict for GT in state 96 resolved as shift
WARNING: shift/reduce conflict for LE in state 96 resolved as shift
WARNING: shift/reduce conflict for GE in state 96 resolved as shift
WARNING: shift/reduce conflict for AND in state 96 resolved as shift
WARNING: shift/reduce conflict for OR in state 96 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 97 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 97 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 97 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 97 resolved as shift
WARNING: shift/reduce conflict for EQ in state 97 resolved as shift
WARNING: shift/reduce conflict for NE in state 97 resolved as shift
WARNING: shift/reduce conflict for LT in state 97 resolved as shift
WARNING: shift/reduce conflict for GT in state 97 resolved as shift
WARNING: shift/reduce conflict for LE in state 97 resolved as shift
WARNING: shift/reduce conflict for GE in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 98 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 98 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 98 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 98 resolved as shift
WARNING: shift/reduce conflict for EQ in state 98 resolved as shift
WARNING: shift/reduce conflict for NE in state 98 resolved as shift
WARNING: shift/reduce conflict for LT in state 98 resolved as shift
WARNING: shift/reduce conflict for GT in state 98 resolved as shift
WARNING: shift/reduce conflict for LE in state 98 resolved as shift
WARNING: shift/reduce conflict for GE in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 99 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 99 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 99 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 99 resolved as shift
WARNING: shift/reduce conflict for EQ in state 99 resolved as shift
WARNING: shift/reduce conflict for NE in state 99 resolved as shift
WARNING: shift/reduce conflict for LT in state 99 resolved as shift
WARNING: shift/reduce conflict for GT in state 99 resolved as shift
WARNING: shift/reduce conflict for LE in state 99 resolved as shift
WARNING: shift/reduce conflict for GE in state 99 resolved as shift
WARNING: shift/reduce conflict for AND in state 99 resolved as shift
WARNING: shift/reduce conflict for OR in state 99 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 100 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 100 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 100 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 100 resolved as shift
WARNING: shift/reduce conflict for EQ in state 100 resolved as shift
WARNING: shift/reduce conflict for NE in state 100 resolved as shift
WARNING: shift/reduce conflict for LT in state 100 resolved as shift
WARNING: shift/reduce conflict for GT in state 100 resolved as shift
WARNING: shift/reduce conflict for LE in state 100 resolved as shift
WARNING: shift/reduce conflict for GE in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 100 resolved as shift
WARNING: shift/reduce conflict for OR in state 100 resolved as shift
WARNING: shift/reduce conflict for MULOP in state 101 resolved as shift
WARNING: shift/reduce conflict for DIVOP in state 101 resolved as shift
WARNING: shift/reduce conflict for SUMOP in state 101 resolved as shift
WARNING: shift/reduce conflict for SUBOP in state 101 resolved as shift
WARNING: shift/reduce conflict for EQ in state 101 resolved as shift
WARNING: shift/reduce conflict for NE in state 101 resolved as shift
WARNING: shift/reduce conflict for LT in state 101 resolved as shift
WARNING: shift/reduce conflict for GT in state 101 resolved as shift
WARNING: shift/reduce conflict for LE in state 101 resolved as shift
WARNING: shift/reduce conflict for GE in state 101 resolved as shift
WARNING: shift/reduce conflict for AND in state 101 resolved as shift
WARNING: shift/reduce conflict for OR in state 101 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 123 resolved as shift
