
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'MAIN_PROGRAMAND CLOSE_BRACES CLOSE_PARENTHESIS COMMA DIVOP DO ELSE EQ FOR FUNC GE GT ID IF IS_VALUE LE LT MATRIX MATRIX_VAL MULOP NE OPEN_BRACES OPEN_PARENTHESIS OR PRINT READ SEQUENCE STRING SUBOP SUMOP VAL WHILEempty :\n    MAIN_PROGRAM : STRUCTURES\n    \n    STRUCTURES  : FOR_LOOP STRUCTURES\n                | DO_WHILE_LOOP STRUCTURES\n                | WHILE_LOOP STRUCTURES\n                | ELSE_CONDITIONAL STRUCTURES\n                | IF_CONDITIONAL STRUCTURES\n                | OUTPUT STRUCTURES\n                | INPUT STRUCTURES\n                | VAR STRUCTURES\n                | FUNCTION STRUCTURES\n                | FUNC_CALL STRUCTURES\n                | empty\n    \n    VAR : ID COMMA VAR\n        | MATRIX_VAL COMMA VAR\n        | ID IS_VALUE EXP\n        | MATRIX_VAL IS_VALUE EXP\n    \n    INPUT \t: ID COMMA INPUT\n            | MATRIX_VAL COMMA INPUT\n            | ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS\n            | MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS\n    \n    OUTPUT  : PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS\n    \n    IF_CONDITIONAL  : IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL\n                    | IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES\n    \n    ELSE_CONDITIONAL : ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES\n    \n    WHILE_LOOP : WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES\n    \n    DO_WHILE_LOOP : DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS\n    \n    FOR_LOOP : FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES\n    \n    FUNCTION : FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES\n    \n    NON_FUNCTION    : FOR_LOOP NON_FUNCTION\n                    | DO_WHILE_LOOP NON_FUNCTION\n                    | WHILE_LOOP NON_FUNCTION\n                    | ELSE_CONDITIONAL NON_FUNCTION\n                    | IF_CONDITIONAL NON_FUNCTION\n                    | OUTPUT NON_FUNCTION\n                    | INPUT NON_FUNCTION\n                    | VAR NON_FUNCTION\n                    | FUNC_CALL NON_FUNCTION\n                    | empty\n    \n    FUNC_CALL   : ID OPEN_PARENTHESIS CLOSE_PARENTHESIS\n    \n    EXP\t: VALUE\n    \n    VALUE\t: EARITH\n            | ELOGIC\n            | OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS\n            | VAL\n            | ID\n            | MATRIX_VAL\n            | STRING\n            | MATRIX\n            | SEQUENCE\n    \n    EARITH \t: VALUE MULOP VALUE\n            | VALUE DIVOP VALUE\n            | VALUE SUMOP VALUE\n            | VALUE SUBOP VALUE\n    \n    ELOGIC\t: VALUE EQ VALUE\n            | VALUE NE VALUE\n            | VALUE LT VALUE\n            | VALUE GT VALUE\n            | VALUE LE VALUE\n            | VALUE GE VALUE\n            | VALUE AND VALUE\n            | VALUE OR VALUE\n    '
    
_lr_action_items = {'FOR':([0,3,4,5,6,7,8,9,10,11,12,34,36,49,50,51,52,53,54,55,56,57,62,63,65,66,67,68,70,88,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,119,120,121,122,123,124,125,126,127,129,131,132,133,143,144,],[14,14,14,14,14,14,14,14,14,14,14,14,14,-41,-42,-43,-45,-46,-47,-48,-49,-50,-18,-14,-16,-40,-19,-15,-17,-25,-22,14,-44,14,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,14,-20,-21,14,14,14,14,14,14,14,14,14,14,-28,-26,-24,-29,-27,-23,]),'DO':([0,3,4,5,6,7,8,9,10,11,12,34,36,49,50,51,52,53,54,55,56,57,62,63,65,66,67,68,70,88,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,119,120,121,122,123,124,125,126,127,129,131,132,133,143,144,],[15,15,15,15,15,15,15,15,15,15,15,15,15,-41,-42,-43,-45,-46,-47,-48,-49,-50,-18,-14,-16,-40,-19,-15,-17,-25,-22,15,-44,15,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,15,-20,-21,15,15,15,15,15,15,15,15,15,15,-28,-26,-24,-29,-27,-23,]),'WHILE':([0,3,4,5,6,7,8,9,10,11,12,34,36,49,50,51,52,53,54,55,56,57,62,63,65,66,67,68,70,73,88,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,119,120,121,122,123,124,125,126,127,129,131,132,133,143,144,],[16,16,16,16,16,16,16,16,16,16,16,16,16,-41,-42,-43,-45,-46,-47,-48,-49,-50,-18,-14,-16,-40,-19,-15,-17,95,-25,-22,16,-44,16,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,16,-20,-21,16,16,16,16,16,16,16,16,16,16,-28,-26,-24,-29,-27,-23,]),'ELSE':([0,3,4,5,6,7,8,9,10,11,12,34,36,49,50,51,52,53,54,55,56,57,62,63,65,66,67,68,70,88,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,119,120,121,122,123,124,125,126,127,129,131,132,133,143,144,],[17,17,17,17,17,17,17,17,17,17,17,17,17,-41,-42,-43,-45,-46,-47,-48,-49,-50,-18,-14,-16,-40,-19,-15,-17,-25,-22,17,-44,17,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,17,-20,-21,17,17,17,17,17,17,17,17,17,17,-28,-26,17,-29,-27,-23,]),'IF':([0,3,4,5,6,7,8,9,10,11,12,34,36,49,50,51,52,53,54,55,56,57,62,63,65,66,67,68,70,88,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,119,120,121,122,123,124,125,126,127,129,131,132,133,143,144,],[18,18,18,18,18,18,18,18,18,18,18,18,18,-41,-42,-43,-45,-46,-47,-48,-49,-50,-18,-14,-16,-40,-19,-15,-17,-25,-22,18,-44,18,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,18,-20,-21,18,18,18,18,18,18,18,18,18,18,-28,-26,-24,-29,-27,-23,]),'PRINT':([0,3,4,5,6,7,8,9,10,11,12,34,36,49,50,51,52,53,54,55,56,57,62,63,65,66,67,68,70,88,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,119,120,121,122,123,124,125,126,127,129,131,132,133,143,144,],[19,19,19,19,19,19,19,19,19,19,19,19,19,-41,-42,-43,-45,-46,-47,-48,-49,-50,-18,-14,-16,-40,-19,-15,-17,-25,-22,19,-44,19,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,19,-20,-21,19,19,19,19,19,19,19,19,19,19,-28,-26,-24,-29,-27,-23,]),'ID':([0,3,4,5,6,7,8,9,10,11,12,22,34,35,36,37,38,39,40,42,43,47,49,50,51,52,53,54,55,56,57,62,63,65,66,67,68,70,76,77,78,79,80,81,82,83,84,85,86,87,88,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,119,120,121,122,123,124,125,126,127,129,131,132,133,143,144,],[20,20,20,20,20,20,20,20,20,20,20,44,20,53,20,53,53,61,53,61,53,53,-41,-42,-43,-45,-46,-47,-48,-49,-50,-18,-14,-16,-40,-19,-15,-17,53,53,53,53,53,53,53,53,53,53,53,53,-25,-22,20,-44,20,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,20,-20,-21,20,53,20,20,20,20,20,20,20,20,20,-28,-26,-24,-29,-27,-23,]),'MATRIX_VAL':([0,3,4,5,6,7,8,9,10,11,12,34,35,36,37,38,39,40,42,43,47,49,50,51,52,53,54,55,56,57,62,63,65,66,67,68,70,76,77,78,79,80,81,82,83,84,85,86,87,88,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,119,120,121,122,123,124,125,126,127,129,131,132,133,143,144,],[21,21,21,21,21,21,21,21,21,21,21,21,54,21,54,54,21,54,21,54,54,-41,-42,-43,-45,-46,-47,-48,-49,-50,-18,-14,-16,-40,-19,-15,-17,54,54,54,54,54,54,54,54,54,54,54,54,-25,-22,21,-44,21,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,21,-20,-21,21,54,21,21,21,21,21,21,21,21,21,-28,-26,-24,-29,-27,-23,]),'FUNC':([0,3,4,5,6,7,8,9,10,11,12,34,36,49,50,51,52,53,54,55,56,57,62,63,65,66,67,68,70,88,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,129,131,132,133,143,144,],[22,22,22,22,22,22,22,22,22,22,22,22,22,-41,-42,-43,-45,-46,-47,-48,-49,-50,-18,-14,-16,-40,-19,-15,-17,-25,-22,22,-44,22,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,22,-20,-21,-28,-26,-24,-29,-27,-23,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,23,24,25,26,27,28,29,30,31,32,49,50,51,52,53,54,55,56,57,62,63,65,66,67,68,70,88,90,96,98,99,100,101,102,103,104,105,106,107,108,109,111,112,129,131,132,133,143,144,],[-1,0,-2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-13,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-41,-42,-43,-45,-46,-47,-48,-49,-50,-18,-14,-16,-40,-19,-15,-17,-25,-22,-44,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-20,-21,-28,-26,-24,-29,-27,-23,]),'CLOSE_BRACES':([3,4,5,6,7,8,9,10,11,12,13,23,24,25,26,27,28,29,30,31,32,34,36,46,49,50,51,52,53,54,55,56,57,58,62,63,65,66,67,68,70,88,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,137,138,139,140,141,142,143,144,],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-13,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-1,-1,73,-41,-42,-43,-45,-46,-47,-48,-49,-50,88,-18,-14,-16,-40,-19,-15,-17,-25,-22,-1,-44,-1,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-1,-20,-21,-1,129,131,132,133,-1,-1,-1,-1,-1,-1,-1,-1,-1,-39,-28,-26,-24,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-27,-23,]),'OPEN_PARENTHESIS':([14,16,18,19,20,35,37,38,40,43,44,47,64,69,76,77,78,79,80,81,82,83,84,85,86,87,95,115,],[33,35,37,38,41,47,47,47,47,47,71,47,91,92,47,47,47,47,47,47,47,47,47,47,47,47,115,47,]),'OPEN_BRACES':([15,17,72,75,89,93,],[34,36,94,97,110,113,]),'COMMA':([20,21,61,],[39,42,39,]),'IS_VALUE':([20,21,61,],[40,43,40,]),'SEQUENCE':([33,35,37,38,40,43,47,76,77,78,79,80,81,82,83,84,85,86,87,115,],[45,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'VAL':([35,37,38,40,43,47,76,77,78,79,80,81,82,83,84,85,86,87,115,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'STRING':([35,37,38,40,43,47,76,77,78,79,80,81,82,83,84,85,86,87,115,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'MATRIX':([35,37,38,40,43,47,76,77,78,79,80,81,82,83,84,85,86,87,115,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'READ':([40,43,],[64,69,]),'CLOSE_PARENTHESIS':([41,45,48,49,50,51,52,53,54,55,56,57,59,60,71,74,91,92,96,98,99,100,101,102,103,104,105,106,107,108,109,130,],[66,72,75,-41,-42,-43,-45,-46,-47,-48,-49,-50,89,90,93,96,111,112,-44,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,143,]),'MULOP':([49,50,51,52,53,54,55,56,57,74,96,98,99,100,101,102,103,104,105,106,107,108,109,],[76,-42,-43,-45,-46,-47,-48,-49,-50,76,-44,76,76,76,76,76,76,76,76,76,76,76,76,]),'DIVOP':([49,50,51,52,53,54,55,56,57,74,96,98,99,100,101,102,103,104,105,106,107,108,109,],[77,-42,-43,-45,-46,-47,-48,-49,-50,77,-44,77,77,77,77,77,77,77,77,77,77,77,77,]),'SUMOP':([49,50,51,52,53,54,55,56,57,74,96,98,99,100,101,102,103,104,105,106,107,108,109,],[78,-42,-43,-45,-46,-47,-48,-49,-50,78,-44,78,78,78,78,78,78,78,78,78,78,78,78,]),'SUBOP':([49,50,51,52,53,54,55,56,57,74,96,98,99,100,101,102,103,104,105,106,107,108,109,],[79,-42,-43,-45,-46,-47,-48,-49,-50,79,-44,79,79,79,79,79,79,79,79,79,79,79,79,]),'EQ':([49,50,51,52,53,54,55,56,57,74,96,98,99,100,101,102,103,104,105,106,107,108,109,],[80,-42,-43,-45,-46,-47,-48,-49,-50,80,-44,80,80,80,80,80,80,80,80,80,80,80,80,]),'NE':([49,50,51,52,53,54,55,56,57,74,96,98,99,100,101,102,103,104,105,106,107,108,109,],[81,-42,-43,-45,-46,-47,-48,-49,-50,81,-44,81,81,81,81,81,81,81,81,81,81,81,81,]),'LT':([49,50,51,52,53,54,55,56,57,74,96,98,99,100,101,102,103,104,105,106,107,108,109,],[82,-42,-43,-45,-46,-47,-48,-49,-50,82,-44,82,82,82,82,82,82,82,82,82,82,82,82,]),'GT':([49,50,51,52,53,54,55,56,57,74,96,98,99,100,101,102,103,104,105,106,107,108,109,],[83,-42,-43,-45,-46,-47,-48,-49,-50,83,-44,83,83,83,83,83,83,83,83,83,83,83,83,]),'LE':([49,50,51,52,53,54,55,56,57,74,96,98,99,100,101,102,103,104,105,106,107,108,109,],[84,-42,-43,-45,-46,-47,-48,-49,-50,84,-44,84,84,84,84,84,84,84,84,84,84,84,84,]),'GE':([49,50,51,52,53,54,55,56,57,74,96,98,99,100,101,102,103,104,105,106,107,108,109,],[85,-42,-43,-45,-46,-47,-48,-49,-50,85,-44,85,85,85,85,85,85,85,85,85,85,85,85,]),'AND':([49,50,51,52,53,54,55,56,57,74,96,98,99,100,101,102,103,104,105,106,107,108,109,],[86,-42,-43,-45,-46,-47,-48,-49,-50,86,-44,86,86,86,86,86,86,86,86,86,86,86,86,]),'OR':([49,50,51,52,53,54,55,56,57,74,96,98,99,100,101,102,103,104,105,106,107,108,109,],[87,-42,-43,-45,-46,-47,-48,-49,-50,87,-44,87,87,87,87,87,87,87,87,87,87,87,87,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MAIN_PROGRAM':([0,],[1,]),'STRUCTURES':([0,3,4,5,6,7,8,9,10,11,12,34,36,94,97,110,],[2,23,24,25,26,27,28,29,30,31,32,46,58,114,116,117,]),'FOR_LOOP':([0,3,4,5,6,7,8,9,10,11,12,34,36,94,97,110,113,119,120,121,122,123,124,125,126,127,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,119,119,119,119,119,119,119,119,119,119,]),'DO_WHILE_LOOP':([0,3,4,5,6,7,8,9,10,11,12,34,36,94,97,110,113,119,120,121,122,123,124,125,126,127,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,120,120,120,120,120,120,120,120,120,120,]),'WHILE_LOOP':([0,3,4,5,6,7,8,9,10,11,12,34,36,94,97,110,113,119,120,121,122,123,124,125,126,127,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,121,121,121,121,121,121,121,121,121,121,]),'ELSE_CONDITIONAL':([0,3,4,5,6,7,8,9,10,11,12,34,36,94,97,110,113,119,120,121,122,123,124,125,126,127,132,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,122,122,122,122,122,122,122,122,122,122,144,]),'IF_CONDITIONAL':([0,3,4,5,6,7,8,9,10,11,12,34,36,94,97,110,113,119,120,121,122,123,124,125,126,127,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,123,123,123,123,123,123,123,123,123,123,]),'OUTPUT':([0,3,4,5,6,7,8,9,10,11,12,34,36,94,97,110,113,119,120,121,122,123,124,125,126,127,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,124,124,124,124,124,124,124,124,124,124,]),'INPUT':([0,3,4,5,6,7,8,9,10,11,12,34,36,39,42,94,97,110,113,119,120,121,122,123,124,125,126,127,],[9,9,9,9,9,9,9,9,9,9,9,9,9,62,67,9,9,9,125,125,125,125,125,125,125,125,125,125,]),'VAR':([0,3,4,5,6,7,8,9,10,11,12,34,36,39,42,94,97,110,113,119,120,121,122,123,124,125,126,127,],[10,10,10,10,10,10,10,10,10,10,10,10,10,63,68,10,10,10,126,126,126,126,126,126,126,126,126,126,]),'FUNCTION':([0,3,4,5,6,7,8,9,10,11,12,34,36,94,97,110,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'FUNC_CALL':([0,3,4,5,6,7,8,9,10,11,12,34,36,94,97,110,113,119,120,121,122,123,124,125,126,127,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,127,127,127,127,127,127,127,127,127,127,]),'empty':([0,3,4,5,6,7,8,9,10,11,12,34,36,94,97,110,113,119,120,121,122,123,124,125,126,127,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,128,128,128,128,128,128,128,128,128,128,]),'EXP':([35,37,38,40,43,115,],[48,59,60,65,70,130,]),'VALUE':([35,37,38,40,43,47,76,77,78,79,80,81,82,83,84,85,86,87,115,],[49,49,49,49,49,74,98,99,100,101,102,103,104,105,106,107,108,109,49,]),'EARITH':([35,37,38,40,43,47,76,77,78,79,80,81,82,83,84,85,86,87,115,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'ELOGIC':([35,37,38,40,43,47,76,77,78,79,80,81,82,83,84,85,86,87,115,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'NON_FUNCTION':([113,119,120,121,122,123,124,125,126,127,],[118,134,135,136,137,138,139,140,141,142,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MAIN_PROGRAM","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','Aurorus2.py',543),
  ('MAIN_PROGRAM -> STRUCTURES','MAIN_PROGRAM',1,'p_MAIN_PROGRAM','Aurorus2.py',558),
  ('STRUCTURES -> FOR_LOOP STRUCTURES','STRUCTURES',2,'p_STRUCTURES','Aurorus2.py',564),
  ('STRUCTURES -> DO_WHILE_LOOP STRUCTURES','STRUCTURES',2,'p_STRUCTURES','Aurorus2.py',565),
  ('STRUCTURES -> WHILE_LOOP STRUCTURES','STRUCTURES',2,'p_STRUCTURES','Aurorus2.py',566),
  ('STRUCTURES -> ELSE_CONDITIONAL STRUCTURES','STRUCTURES',2,'p_STRUCTURES','Aurorus2.py',567),
  ('STRUCTURES -> IF_CONDITIONAL STRUCTURES','STRUCTURES',2,'p_STRUCTURES','Aurorus2.py',568),
  ('STRUCTURES -> OUTPUT STRUCTURES','STRUCTURES',2,'p_STRUCTURES','Aurorus2.py',569),
  ('STRUCTURES -> INPUT STRUCTURES','STRUCTURES',2,'p_STRUCTURES','Aurorus2.py',570),
  ('STRUCTURES -> VAR STRUCTURES','STRUCTURES',2,'p_STRUCTURES','Aurorus2.py',571),
  ('STRUCTURES -> FUNCTION STRUCTURES','STRUCTURES',2,'p_STRUCTURES','Aurorus2.py',572),
  ('STRUCTURES -> FUNC_CALL STRUCTURES','STRUCTURES',2,'p_STRUCTURES','Aurorus2.py',573),
  ('STRUCTURES -> empty','STRUCTURES',1,'p_STRUCTURES','Aurorus2.py',574),
  ('VAR -> ID COMMA VAR','VAR',3,'p_VAR','Aurorus2.py',580),
  ('VAR -> MATRIX_VAL COMMA VAR','VAR',3,'p_VAR','Aurorus2.py',581),
  ('VAR -> ID IS_VALUE EXP','VAR',3,'p_VAR','Aurorus2.py',582),
  ('VAR -> MATRIX_VAL IS_VALUE EXP','VAR',3,'p_VAR','Aurorus2.py',583),
  ('INPUT -> ID COMMA INPUT','INPUT',3,'p_INPUT','Aurorus2.py',595),
  ('INPUT -> MATRIX_VAL COMMA INPUT','INPUT',3,'p_INPUT','Aurorus2.py',596),
  ('INPUT -> ID IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS','INPUT',5,'p_INPUT','Aurorus2.py',597),
  ('INPUT -> MATRIX_VAL IS_VALUE READ OPEN_PARENTHESIS CLOSE_PARENTHESIS','INPUT',5,'p_INPUT','Aurorus2.py',598),
  ('OUTPUT -> PRINT OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS','OUTPUT',4,'p_OUTPUT','Aurorus2.py',604),
  ('IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES ELSE_CONDITIONAL','IF_CONDITIONAL',8,'p_IF_CONDITIONAL','Aurorus2.py',610),
  ('IF_CONDITIONAL -> IF OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES','IF_CONDITIONAL',7,'p_IF_CONDITIONAL','Aurorus2.py',611),
  ('ELSE_CONDITIONAL -> ELSE OPEN_BRACES STRUCTURES CLOSE_BRACES','ELSE_CONDITIONAL',4,'p_ELSE_CONDITIONAL','Aurorus2.py',617),
  ('WHILE_LOOP -> WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES','WHILE_LOOP',7,'p_WHILE_LOOP','Aurorus2.py',623),
  ('DO_WHILE_LOOP -> DO OPEN_BRACES STRUCTURES CLOSE_BRACES WHILE OPEN_PARENTHESIS EXP CLOSE_PARENTHESIS','DO_WHILE_LOOP',8,'p_DO_WHILE_LOOP','Aurorus2.py',629),
  ('FOR_LOOP -> FOR OPEN_PARENTHESIS SEQUENCE CLOSE_PARENTHESIS OPEN_BRACES STRUCTURES CLOSE_BRACES','FOR_LOOP',7,'p_FOR_LOOP','Aurorus2.py',635),
  ('FUNCTION -> FUNC ID OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES NON_FUNCTION CLOSE_BRACES','FUNCTION',7,'p_FUNCTION','Aurorus2.py',641),
  ('NON_FUNCTION -> FOR_LOOP NON_FUNCTION','NON_FUNCTION',2,'p_NON_FUNCTION','Aurorus2.py',647),
  ('NON_FUNCTION -> DO_WHILE_LOOP NON_FUNCTION','NON_FUNCTION',2,'p_NON_FUNCTION','Aurorus2.py',648),
  ('NON_FUNCTION -> WHILE_LOOP NON_FUNCTION','NON_FUNCTION',2,'p_NON_FUNCTION','Aurorus2.py',649),
  ('NON_FUNCTION -> ELSE_CONDITIONAL NON_FUNCTION','NON_FUNCTION',2,'p_NON_FUNCTION','Aurorus2.py',650),
  ('NON_FUNCTION -> IF_CONDITIONAL NON_FUNCTION','NON_FUNCTION',2,'p_NON_FUNCTION','Aurorus2.py',651),
  ('NON_FUNCTION -> OUTPUT NON_FUNCTION','NON_FUNCTION',2,'p_NON_FUNCTION','Aurorus2.py',652),
  ('NON_FUNCTION -> INPUT NON_FUNCTION','NON_FUNCTION',2,'p_NON_FUNCTION','Aurorus2.py',653),
  ('NON_FUNCTION -> VAR NON_FUNCTION','NON_FUNCTION',2,'p_NON_FUNCTION','Aurorus2.py',654),
  ('NON_FUNCTION -> FUNC_CALL NON_FUNCTION','NON_FUNCTION',2,'p_NON_FUNCTION','Aurorus2.py',655),
  ('NON_FUNCTION -> empty','NON_FUNCTION',1,'p_NON_FUNCTION','Aurorus2.py',656),
  ('FUNC_CALL -> ID OPEN_PARENTHESIS CLOSE_PARENTHESIS','FUNC_CALL',3,'p_FUNC_CALL','Aurorus2.py',661),
  ('EXP -> VALUE','EXP',1,'p_EXP','Aurorus2.py',670),
  ('VALUE -> EARITH','VALUE',1,'p_VALUE','Aurorus2.py',682),
  ('VALUE -> ELOGIC','VALUE',1,'p_VALUE','Aurorus2.py',683),
  ('VALUE -> OPEN_PARENTHESIS VALUE CLOSE_PARENTHESIS','VALUE',3,'p_VALUE','Aurorus2.py',684),
  ('VALUE -> VAL','VALUE',1,'p_VALUE','Aurorus2.py',685),
  ('VALUE -> ID','VALUE',1,'p_VALUE','Aurorus2.py',686),
  ('VALUE -> MATRIX_VAL','VALUE',1,'p_VALUE','Aurorus2.py',687),
  ('VALUE -> STRING','VALUE',1,'p_VALUE','Aurorus2.py',688),
  ('VALUE -> MATRIX','VALUE',1,'p_VALUE','Aurorus2.py',689),
  ('VALUE -> SEQUENCE','VALUE',1,'p_VALUE','Aurorus2.py',690),
  ('EARITH -> VALUE MULOP VALUE','EARITH',3,'p_EARITH','Aurorus2.py',716),
  ('EARITH -> VALUE DIVOP VALUE','EARITH',3,'p_EARITH','Aurorus2.py',717),
  ('EARITH -> VALUE SUMOP VALUE','EARITH',3,'p_EARITH','Aurorus2.py',718),
  ('EARITH -> VALUE SUBOP VALUE','EARITH',3,'p_EARITH','Aurorus2.py',719),
  ('ELOGIC -> VALUE EQ VALUE','ELOGIC',3,'p_ELOGIC','Aurorus2.py',731),
  ('ELOGIC -> VALUE NE VALUE','ELOGIC',3,'p_ELOGIC','Aurorus2.py',732),
  ('ELOGIC -> VALUE LT VALUE','ELOGIC',3,'p_ELOGIC','Aurorus2.py',733),
  ('ELOGIC -> VALUE GT VALUE','ELOGIC',3,'p_ELOGIC','Aurorus2.py',734),
  ('ELOGIC -> VALUE LE VALUE','ELOGIC',3,'p_ELOGIC','Aurorus2.py',735),
  ('ELOGIC -> VALUE GE VALUE','ELOGIC',3,'p_ELOGIC','Aurorus2.py',736),
  ('ELOGIC -> VALUE AND VALUE','ELOGIC',3,'p_ELOGIC','Aurorus2.py',737),
  ('ELOGIC -> VALUE OR VALUE','ELOGIC',3,'p_ELOGIC','Aurorus2.py',738),
]
